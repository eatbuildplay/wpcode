/* DUPLICATOR-LITE (MYSQL-DUMP BUILD MODE) MYSQL SCRIPT CREATED ON : 2021-01-01 21:55:03 */

/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_actions` (
  `action_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `hook` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL,
  `scheduled_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `scheduled_date_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `args` varchar(191) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `schedule` longtext COLLATE utf8mb4_unicode_ci,
  `group_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `attempts` int(11) NOT NULL DEFAULT '0',
  `last_attempt_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_attempt_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `claim_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `extended_args` varchar(8000) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`action_id`),
  KEY `hook` (`hook`),
  KEY `status` (`status`),
  KEY `scheduled_date_gmt` (`scheduled_date_gmt`),
  KEY `args` (`args`),
  KEY `group_id` (`group_id`),
  KEY `last_attempt_gmt` (`last_attempt_gmt`),
  KEY `claim_id` (`claim_id`)
) ENGINE=InnoDB AUTO_INCREMENT=47 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_actionscheduler_actions` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_actions` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_actions` VALUES (44,'action_scheduler/migration_hook','complete','2020-12-20 02:26:43','2020-12-20 02:26:43','[]','O:30:\"ActionScheduler_SimpleSchedule\":2:{s:22:\"\0*\0scheduled_timestamp\";i:1608431203;s:41:\"\0ActionScheduler_SimpleSchedule\0timestamp\";i:1608431203;}',1,1,'2020-12-20 02:27:05','2020-12-20 02:27:05',0,NULL),(45,'action_scheduler/migration_hook','complete','2020-12-20 02:28:05','2020-12-20 02:28:05','[]','O:30:\"ActionScheduler_SimpleSchedule\":2:{s:22:\"\0*\0scheduled_timestamp\";i:1608431285;s:41:\"\0ActionScheduler_SimpleSchedule\0timestamp\";i:1608431285;}',1,1,'2020-12-20 02:28:24','2020-12-20 02:28:24',0,NULL),(46,'rank_math/analytics/daily_tasks','pending','2021-01-02 23:54:08','2021-01-02 23:54:08','[]','O:32:\"ActionScheduler_IntervalSchedule\":5:{s:22:\"\0*\0scheduled_timestamp\";i:1609631648;s:18:\"\0*\0first_timestamp\";i:1609631648;s:13:\"\0*\0recurrence\";i:604800;s:49:\"\0ActionScheduler_IntervalSchedule\0start_timestamp\";i:1609631648;s:53:\"\0ActionScheduler_IntervalSchedule\0interval_in_seconds\";i:604800;}',0,0,'0000-00-00 00:00:00','0000-00-00 00:00:00',0,NULL);
/*!40000 ALTER TABLE `wp_actionscheduler_actions` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_claims` (
  `claim_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `date_created_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`claim_id`),
  KEY `date_created_gmt` (`date_created_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_actionscheduler_claims` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_claims` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_actionscheduler_claims` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_groups` (
  `group_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `slug` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`group_id`),
  KEY `slug` (`slug`(191))
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_actionscheduler_groups` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_groups` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_groups` VALUES (1,'action-scheduler-migration');
/*!40000 ALTER TABLE `wp_actionscheduler_groups` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_actionscheduler_logs` (
  `log_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `action_id` bigint(20) unsigned NOT NULL,
  `message` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `log_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `log_date_local` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`log_id`),
  KEY `action_id` (`action_id`),
  KEY `log_date_gmt` (`log_date_gmt`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_actionscheduler_logs` WRITE;
/*!40000 ALTER TABLE `wp_actionscheduler_logs` DISABLE KEYS */;
INSERT INTO `wp_actionscheduler_logs` VALUES (1,44,'action created','2020-12-20 02:25:43','2020-12-20 02:25:43'),(2,44,'action started via WP Cron','2020-12-20 02:27:04','2020-12-20 02:27:04'),(3,44,'action complete via WP Cron','2020-12-20 02:27:05','2020-12-20 02:27:05'),(4,45,'action created','2020-12-20 02:27:05','2020-12-20 02:27:05'),(5,45,'action started via Async Request','2020-12-20 02:28:24','2020-12-20 02:28:24'),(6,45,'action complete via Async Request','2020-12-20 02:28:24','2020-12-20 02:28:24'),(7,46,'action created','2021-01-01 21:20:08','2021-01-01 21:20:08');
/*!40000 ALTER TABLE `wp_actionscheduler_logs` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_commentmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `comment_id` (`comment_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_commentmeta` WRITE;
/*!40000 ALTER TABLE `wp_commentmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_commentmeta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_comments` (
  `comment_ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) unsigned NOT NULL DEFAULT '0',
  `comment_author` tinytext COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_author_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT '0',
  `comment_approved` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'comment',
  `comment_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`comment_ID`),
  KEY `comment_post_ID` (`comment_post_ID`),
  KEY `comment_approved_date_gmt` (`comment_approved`,`comment_date_gmt`),
  KEY `comment_date_gmt` (`comment_date_gmt`),
  KEY `comment_parent` (`comment_parent`),
  KEY `comment_author_email` (`comment_author_email`(10))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_comments` WRITE;
/*!40000 ALTER TABLE `wp_comments` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_comments` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_duplicator_packages` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(250) COLLATE utf8_unicode_ci NOT NULL,
  `hash` varchar(50) COLLATE utf8_unicode_ci NOT NULL,
  `status` int(11) NOT NULL,
  `created` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `owner` varchar(60) COLLATE utf8_unicode_ci NOT NULL,
  `package` longtext COLLATE utf8_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `hash` (`hash`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_duplicator_packages` WRITE;
/*!40000 ALTER TABLE `wp_duplicator_packages` DISABLE KEYS */;
INSERT INTO `wp_duplicator_packages` VALUES (1,'20210101_wpcode','2eb777ffff74dc5d2513_20210101215429',20,'2021-01-01 21:55:02','unknown','O:11:\"DUP_Package\":23:{s:7:\"Created\";s:19:\"2021-01-01 21:54:29\";s:7:\"Version\";s:8:\"1.3.40.1\";s:9:\"VersionWP\";s:3:\"5.6\";s:9:\"VersionDB\";s:7:\"10.1.37\";s:10:\"VersionPHP\";s:5:\"7.3.1\";s:9:\"VersionOS\";s:5:\"WINNT\";s:2:\"ID\";i:1;s:4:\"Name\";s:15:\"20210101_wpcode\";s:4:\"Hash\";s:35:\"2eb777ffff74dc5d2513_20210101215429\";s:8:\"NameHash\";s:51:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429\";s:4:\"Type\";i:0;s:5:\"Notes\";s:0:\"\";s:8:\"ScanFile\";s:61:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429_scan.json\";s:10:\"TimerStart\";i:-1;s:7:\"Runtime\";N;s:7:\"ExeSize\";N;s:7:\"ZipSize\";N;s:6:\"Status\";s:4:\"20.0\";s:6:\"WPUser\";s:7:\"unknown\";s:7:\"Archive\";O:11:\"DUP_Archive\":21:{s:10:\"FilterDirs\";s:0:\"\";s:11:\"FilterFiles\";s:0:\"\";s:10:\"FilterExts\";s:0:\"\";s:13:\"FilterDirsAll\";a:0:{}s:14:\"FilterFilesAll\";a:0:{}s:13:\"FilterExtsAll\";a:0:{}s:8:\"FilterOn\";i:0;s:12:\"ExportOnlyDB\";i:0;s:4:\"File\";s:63:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429_archive.zip\";s:6:\"Format\";s:3:\"ZIP\";s:7:\"PackDir\";s:34:\"C:/Users/Casey/Sites/wpcode.dev.cc\";s:4:\"Size\";i:0;s:4:\"Dirs\";a:0:{}s:5:\"Files\";a:0:{}s:10:\"FilterInfo\";O:23:\"DUP_Archive_Filter_Info\":8:{s:4:\"Dirs\";O:34:\"DUP_Archive_Filter_Scope_Directory\":5:{s:7:\"Warning\";a:0:{}s:10:\"Unreadable\";a:0:{}s:4:\"Core\";a:0:{}s:6:\"Global\";a:0:{}s:8:\"Instance\";a:0:{}}s:5:\"Files\";O:29:\"DUP_Archive_Filter_Scope_File\":6:{s:4:\"Size\";a:0:{}s:7:\"Warning\";a:0:{}s:10:\"Unreadable\";a:0:{}s:4:\"Core\";a:0:{}s:6:\"Global\";a:0:{}s:8:\"Instance\";a:0:{}}s:4:\"Exts\";O:29:\"DUP_Archive_Filter_Scope_Base\":3:{s:4:\"Core\";a:0:{}s:6:\"Global\";a:0:{}s:8:\"Instance\";a:0:{}}s:9:\"UDirCount\";i:0;s:10:\"UFileCount\";i:0;s:9:\"UExtCount\";i:0;s:8:\"TreeSize\";a:0:{}s:11:\"TreeWarning\";a:0:{}}s:14:\"RecursiveLinks\";a:0:{}s:10:\"file_count\";i:-1;s:10:\"\0*\0Package\";O:11:\"DUP_Package\":23:{s:7:\"Created\";s:19:\"2021-01-01 21:54:29\";s:7:\"Version\";s:8:\"1.3.40.1\";s:9:\"VersionWP\";s:3:\"5.6\";s:9:\"VersionDB\";s:7:\"10.1.37\";s:10:\"VersionPHP\";s:5:\"7.3.1\";s:9:\"VersionOS\";s:5:\"WINNT\";s:2:\"ID\";N;s:4:\"Name\";s:15:\"20210101_wpcode\";s:4:\"Hash\";s:35:\"2eb777ffff74dc5d2513_20210101215429\";s:8:\"NameHash\";s:51:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429\";s:4:\"Type\";i:0;s:5:\"Notes\";s:0:\"\";s:8:\"ScanFile\";N;s:10:\"TimerStart\";i:-1;s:7:\"Runtime\";N;s:7:\"ExeSize\";N;s:7:\"ZipSize\";N;s:6:\"Status\";i:0;s:6:\"WPUser\";N;s:7:\"Archive\";r:21;s:9:\"Installer\";O:13:\"DUP_Installer\":13:{s:4:\"File\";s:65:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429_installer.php\";s:4:\"Size\";i:0;s:10:\"OptsDBHost\";s:0:\"\";s:10:\"OptsDBPort\";s:0:\"\";s:10:\"OptsDBName\";s:0:\"\";s:10:\"OptsDBUser\";s:0:\"\";s:13:\"OptsDBCharset\";s:0:\"\";s:15:\"OptsDBCollation\";s:0:\"\";s:12:\"OptsSecureOn\";i:0;s:14:\"OptsSecurePass\";s:0:\"\";s:13:\"numFilesAdded\";i:0;s:12:\"numDirsAdded\";i:0;s:10:\"\0*\0Package\";r:61;}s:8:\"Database\";O:12:\"DUP_Database\":14:{s:4:\"Type\";s:5:\"MySQL\";s:4:\"Size\";N;s:4:\"File\";s:64:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429_database.sql\";s:4:\"Path\";N;s:12:\"FilterTables\";s:0:\"\";s:8:\"FilterOn\";i:0;s:4:\"Name\";N;s:10:\"Compatible\";s:0:\"\";s:8:\"Comments\";s:31:\"mariadb.org binary distribution\";s:4:\"info\";O:16:\"DUP_DatabaseInfo\":15:{s:9:\"buildMode\";N;s:13:\"collationList\";a:0:{}s:17:\"isTablesUpperCase\";N;s:15:\"isNameUpperCase\";N;s:4:\"name\";N;s:15:\"tablesBaseCount\";N;s:16:\"tablesFinalCount\";N;s:14:\"tablesRowCount\";N;s:16:\"tablesSizeOnDisk\";N;s:18:\"varLowerCaseTables\";i:1;s:7:\"version\";N;s:14:\"versionComment\";N;s:18:\"tableWiseRowCounts\";a:0:{}s:33:\"\0DUP_DatabaseInfo\0intFieldsStruct\";a:0:{}s:42:\"\0DUP_DatabaseInfo\0indexProcessedSchemaSize\";a:0:{}}s:10:\"\0*\0Package\";r:1;s:24:\"\0DUP_Database\0tempDbPath\";N;s:23:\"\0DUP_Database\0EOFMarker\";s:0:\"\";s:26:\"\0DUP_Database\0networkFlush\";b:0;}s:13:\"BuildProgress\";O:18:\"DUP_Build_Progress\":12:{s:17:\"thread_start_time\";N;s:11:\"initialized\";b:0;s:15:\"installer_built\";b:0;s:15:\"archive_started\";b:0;s:20:\"archive_has_database\";b:0;s:13:\"archive_built\";b:0;s:21:\"database_script_built\";b:0;s:6:\"failed\";b:0;s:7:\"retries\";i:0;s:14:\"build_failures\";a:0:{}s:19:\"validation_failures\";a:0:{}s:27:\"\0DUP_Build_Progress\0package\";r:61;}}s:29:\"\0DUP_Archive\0tmpFilterDirsAll\";a:0:{}s:24:\"\0DUP_Archive\0wpCorePaths\";a:5:{i:0;s:43:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-admin\";i:1;s:53:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content/uploads\";i:2;s:55:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content/languages\";i:3;s:52:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content/themes\";i:4;s:46:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-includes\";}s:29:\"\0DUP_Archive\0wpCoreExactPaths\";a:2:{i:0;s:34:\"C:/Users/Casey/Sites/wpcode.dev.cc\";i:1;s:45:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content\";}}s:9:\"Installer\";r:82;s:8:\"Database\";r:96;s:13:\"BuildProgress\";r:126;}');
/*!40000 ALTER TABLE `wp_duplicator_packages` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_links` (
  `link_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) unsigned NOT NULL DEFAULT '1',
  `link_rating` int(11) NOT NULL DEFAULT '0',
  `link_updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `link_rss` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`),
  KEY `link_visible` (`link_visible`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_links` WRITE;
/*!40000 ALTER TABLE `wp_links` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_links` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_options` (
  `option_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `option_value` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `autoload` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`),
  UNIQUE KEY `option_name` (`option_name`),
  KEY `autoload` (`autoload`)
) ENGINE=InnoDB AUTO_INCREMENT=454 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_options` WRITE;
/*!40000 ALTER TABLE `wp_options` DISABLE KEYS */;
INSERT INTO `wp_options` VALUES (1,'siteurl','http://wpcode.dev.cc','yes'),(2,'home','http://wpcode.dev.cc','yes'),(3,'blogname','WP Code','yes'),(4,'blogdescription','Learn WP code for free','yes'),(5,'users_can_register','1','yes'),(6,'admin_email','pleaseupdate@wpcode.dev.cc','yes'),(7,'start_of_week','1','yes'),(8,'use_balanceTags','0','yes'),(9,'use_smilies','1','yes'),(10,'require_name_email','1','yes'),(11,'comments_notify','1','yes'),(12,'posts_per_rss','10','yes'),(13,'rss_use_excerpt','0','yes'),(14,'mailserver_url','mail.example.com','yes'),(15,'mailserver_login','login@example.com','yes'),(16,'mailserver_pass','password','yes'),(17,'mailserver_port','110','yes'),(18,'default_category','1','yes'),(19,'default_comment_status','open','yes'),(20,'default_ping_status','open','yes'),(21,'default_pingback_flag','1','yes'),(22,'posts_per_page','10','yes'),(23,'date_format','Y-m-d','yes'),(24,'time_format','H:i','yes'),(25,'links_updated_date_format','F j, Y g:i a','yes'),(26,'comment_moderation','0','yes'),(27,'moderation_notify','1','yes'),(28,'permalink_structure','/%postname%','yes'),(29,'rewrite_rules','a:97:{s:19:\"sitemap_index\\.xml$\";s:19:\"index.php?sitemap=1\";s:31:\"([^/]+?)-sitemap([0-9]+)?\\.xml$\";s:51:\"index.php?sitemap=$matches[1]&sitemap_n=$matches[2]\";s:24:\"([a-z]+)?-?sitemap\\.xsl$\";s:25:\"index.php?xsl=$matches[1]\";s:11:\"^wp-json/?$\";s:22:\"index.php?rest_route=/\";s:14:\"^wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:21:\"^index.php/wp-json/?$\";s:22:\"index.php?rest_route=/\";s:24:\"^index.php/wp-json/(.*)?\";s:33:\"index.php?rest_route=/$matches[1]\";s:17:\"^wp-sitemap\\.xml$\";s:23:\"index.php?sitemap=index\";s:17:\"^wp-sitemap\\.xsl$\";s:36:\"index.php?sitemap-stylesheet=sitemap\";s:23:\"^wp-sitemap-index\\.xsl$\";s:34:\"index.php?sitemap-stylesheet=index\";s:48:\"^wp-sitemap-([a-z]+?)-([a-z\\d_-]+?)-(\\d+?)\\.xml$\";s:75:\"index.php?sitemap=$matches[1]&sitemap-subtype=$matches[2]&paged=$matches[3]\";s:34:\"^wp-sitemap-([a-z]+?)-(\\d+?)\\.xml$\";s:47:\"index.php?sitemap=$matches[1]&paged=$matches[2]\";s:47:\"category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:42:\"category/(.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:52:\"index.php?category_name=$matches[1]&feed=$matches[2]\";s:23:\"category/(.+?)/embed/?$\";s:46:\"index.php?category_name=$matches[1]&embed=true\";s:35:\"category/(.+?)/page/?([0-9]{1,})/?$\";s:53:\"index.php?category_name=$matches[1]&paged=$matches[2]\";s:17:\"category/(.+?)/?$\";s:35:\"index.php?category_name=$matches[1]\";s:44:\"tag/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:39:\"tag/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?tag=$matches[1]&feed=$matches[2]\";s:20:\"tag/([^/]+)/embed/?$\";s:36:\"index.php?tag=$matches[1]&embed=true\";s:32:\"tag/([^/]+)/page/?([0-9]{1,})/?$\";s:43:\"index.php?tag=$matches[1]&paged=$matches[2]\";s:14:\"tag/([^/]+)/?$\";s:25:\"index.php?tag=$matches[1]\";s:45:\"type/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:40:\"type/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?post_format=$matches[1]&feed=$matches[2]\";s:21:\"type/([^/]+)/embed/?$\";s:44:\"index.php?post_format=$matches[1]&embed=true\";s:33:\"type/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?post_format=$matches[1]&paged=$matches[2]\";s:15:\"type/([^/]+)/?$\";s:33:\"index.php?post_format=$matches[1]\";s:12:\"robots\\.txt$\";s:18:\"index.php?robots=1\";s:13:\"favicon\\.ico$\";s:19:\"index.php?favicon=1\";s:48:\".*wp-(atom|rdf|rss|rss2|feed|commentsrss2)\\.php$\";s:18:\"index.php?feed=old\";s:20:\".*wp-app\\.php(/.*)?$\";s:19:\"index.php?error=403\";s:18:\".*wp-register.php$\";s:23:\"index.php?register=true\";s:32:\"feed/(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:27:\"(feed|rdf|rss|rss2|atom)/?$\";s:27:\"index.php?&feed=$matches[1]\";s:8:\"embed/?$\";s:21:\"index.php?&embed=true\";s:20:\"page/?([0-9]{1,})/?$\";s:28:\"index.php?&paged=$matches[1]\";s:27:\"comment-page-([0-9]{1,})/?$\";s:39:\"index.php?&page_id=76&cpage=$matches[1]\";s:41:\"comments/feed/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:36:\"comments/(feed|rdf|rss|rss2|atom)/?$\";s:42:\"index.php?&feed=$matches[1]&withcomments=1\";s:17:\"comments/embed/?$\";s:21:\"index.php?&embed=true\";s:44:\"search/(.+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:39:\"search/(.+)/(feed|rdf|rss|rss2|atom)/?$\";s:40:\"index.php?s=$matches[1]&feed=$matches[2]\";s:20:\"search/(.+)/embed/?$\";s:34:\"index.php?s=$matches[1]&embed=true\";s:32:\"search/(.+)/page/?([0-9]{1,})/?$\";s:41:\"index.php?s=$matches[1]&paged=$matches[2]\";s:14:\"search/(.+)/?$\";s:23:\"index.php?s=$matches[1]\";s:47:\"author/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:42:\"author/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:50:\"index.php?author_name=$matches[1]&feed=$matches[2]\";s:23:\"author/([^/]+)/embed/?$\";s:44:\"index.php?author_name=$matches[1]&embed=true\";s:35:\"author/([^/]+)/page/?([0-9]{1,})/?$\";s:51:\"index.php?author_name=$matches[1]&paged=$matches[2]\";s:17:\"author/([^/]+)/?$\";s:33:\"index.php?author_name=$matches[1]\";s:69:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:64:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:80:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&feed=$matches[4]\";s:45:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/embed/?$\";s:74:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&embed=true\";s:57:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:81:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]&paged=$matches[4]\";s:39:\"([0-9]{4})/([0-9]{1,2})/([0-9]{1,2})/?$\";s:63:\"index.php?year=$matches[1]&monthnum=$matches[2]&day=$matches[3]\";s:56:\"([0-9]{4})/([0-9]{1,2})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:51:\"([0-9]{4})/([0-9]{1,2})/(feed|rdf|rss|rss2|atom)/?$\";s:64:\"index.php?year=$matches[1]&monthnum=$matches[2]&feed=$matches[3]\";s:32:\"([0-9]{4})/([0-9]{1,2})/embed/?$\";s:58:\"index.php?year=$matches[1]&monthnum=$matches[2]&embed=true\";s:44:\"([0-9]{4})/([0-9]{1,2})/page/?([0-9]{1,})/?$\";s:65:\"index.php?year=$matches[1]&monthnum=$matches[2]&paged=$matches[3]\";s:26:\"([0-9]{4})/([0-9]{1,2})/?$\";s:47:\"index.php?year=$matches[1]&monthnum=$matches[2]\";s:43:\"([0-9]{4})/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:38:\"([0-9]{4})/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?year=$matches[1]&feed=$matches[2]\";s:19:\"([0-9]{4})/embed/?$\";s:37:\"index.php?year=$matches[1]&embed=true\";s:31:\"([0-9]{4})/page/?([0-9]{1,})/?$\";s:44:\"index.php?year=$matches[1]&paged=$matches[2]\";s:13:\"([0-9]{4})/?$\";s:26:\"index.php?year=$matches[1]\";s:27:\".?.+?/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\".?.+?/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\".?.+?/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\".?.+?/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\".?.+?/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"(.?.+?)/embed/?$\";s:41:\"index.php?pagename=$matches[1]&embed=true\";s:20:\"(.?.+?)/trackback/?$\";s:35:\"index.php?pagename=$matches[1]&tb=1\";s:40:\"(.?.+?)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:35:\"(.?.+?)/(feed|rdf|rss|rss2|atom)/?$\";s:47:\"index.php?pagename=$matches[1]&feed=$matches[2]\";s:28:\"(.?.+?)/page/?([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&paged=$matches[2]\";s:35:\"(.?.+?)/comment-page-([0-9]{1,})/?$\";s:48:\"index.php?pagename=$matches[1]&cpage=$matches[2]\";s:24:\"(.?.+?)(?:/([0-9]+))?/?$\";s:47:\"index.php?pagename=$matches[1]&page=$matches[2]\";s:27:\"[^/]+/attachment/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:37:\"[^/]+/attachment/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:57:\"[^/]+/attachment/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:52:\"[^/]+/attachment/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:33:\"[^/]+/attachment/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";s:16:\"([^/]+)/embed/?$\";s:37:\"index.php?name=$matches[1]&embed=true\";s:20:\"([^/]+)/trackback/?$\";s:31:\"index.php?name=$matches[1]&tb=1\";s:40:\"([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:35:\"([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:43:\"index.php?name=$matches[1]&feed=$matches[2]\";s:28:\"([^/]+)/page/?([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&paged=$matches[2]\";s:35:\"([^/]+)/comment-page-([0-9]{1,})/?$\";s:44:\"index.php?name=$matches[1]&cpage=$matches[2]\";s:24:\"([^/]+)(?:/([0-9]+))?/?$\";s:43:\"index.php?name=$matches[1]&page=$matches[2]\";s:16:\"[^/]+/([^/]+)/?$\";s:32:\"index.php?attachment=$matches[1]\";s:26:\"[^/]+/([^/]+)/trackback/?$\";s:37:\"index.php?attachment=$matches[1]&tb=1\";s:46:\"[^/]+/([^/]+)/feed/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/(feed|rdf|rss|rss2|atom)/?$\";s:49:\"index.php?attachment=$matches[1]&feed=$matches[2]\";s:41:\"[^/]+/([^/]+)/comment-page-([0-9]{1,})/?$\";s:50:\"index.php?attachment=$matches[1]&cpage=$matches[2]\";s:22:\"[^/]+/([^/]+)/embed/?$\";s:43:\"index.php?attachment=$matches[1]&embed=true\";}','yes'),(30,'hack_file','0','yes'),(31,'blog_charset','UTF-8','yes'),(32,'moderation_keys','','no'),(33,'active_plugins','a:2:{i:0;s:25:\"duplicator/duplicator.php\";i:1;s:30:\"seo-by-rank-math/rank-math.php\";}','yes'),(34,'category_base','','yes'),(35,'ping_sites','http://rpc.pingomatic.com/','yes'),(36,'comment_max_links','2','yes'),(37,'gmt_offset','0','yes'),(38,'default_email_category','1','yes'),(39,'recently_edited','','no'),(40,'template','wpcode','yes'),(41,'stylesheet','wpcode','yes'),(42,'comment_registration','0','yes'),(43,'html_type','text/html','yes'),(44,'use_trackback','0','yes'),(45,'default_role','subscriber','yes'),(46,'db_version','49752','yes'),(47,'uploads_use_yearmonth_folders','1','yes'),(48,'upload_path','','yes'),(49,'blog_public','0','yes'),(50,'default_link_category','2','yes'),(51,'show_on_front','page','yes'),(52,'tag_base','','yes'),(53,'show_avatars','1','yes'),(54,'avatar_rating','G','yes'),(55,'upload_url_path','','yes'),(56,'thumbnail_size_w','150','yes'),(57,'thumbnail_size_h','150','yes'),(58,'thumbnail_crop','1','yes'),(59,'medium_size_w','300','yes'),(60,'medium_size_h','300','yes'),(61,'avatar_default','mystery','yes'),(62,'large_size_w','1024','yes'),(63,'large_size_h','1024','yes'),(64,'image_default_link_type','none','yes'),(65,'image_default_size','','yes'),(66,'image_default_align','','yes'),(67,'close_comments_for_old_posts','0','yes'),(68,'close_comments_days_old','14','yes'),(69,'thread_comments','1','yes'),(70,'thread_comments_depth','5','yes'),(71,'page_comments','0','yes'),(72,'comments_per_page','50','yes'),(73,'default_comments_page','newest','yes'),(74,'comment_order','asc','yes'),(75,'sticky_posts','a:0:{}','yes'),(76,'widget_categories','a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(77,'widget_text','a:0:{}','yes'),(78,'widget_rss','a:0:{}','yes'),(79,'uninstall_plugins','a:0:{}','no'),(80,'timezone_string','','yes'),(81,'page_for_posts','0','yes'),(82,'page_on_front','76','yes'),(83,'default_post_format','0','yes'),(84,'link_manager_enabled','0','yes'),(85,'finished_splitting_shared_terms','1','yes'),(86,'site_icon','0','yes'),(87,'medium_large_size_w','768','yes'),(88,'medium_large_size_h','0','yes'),(89,'wp_page_for_privacy_policy','3','yes'),(90,'show_comments_cookies_opt_in','1','yes'),(91,'admin_email_lifespan','1623976100','yes'),(92,'disallowed_keys','','no'),(93,'comment_previously_approved','1','yes'),(94,'auto_plugin_theme_update_emails','a:0:{}','no'),(95,'auto_update_core_dev','enabled','yes'),(96,'auto_update_core_minor','enabled','yes'),(97,'auto_update_core_major','enabled','yes'),(98,'initial_db_version','49752','yes'),(99,'wp_user_roles','a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:77:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;s:23:\"rank_math_edit_htaccess\";b:1;s:16:\"rank_math_titles\";b:1;s:17:\"rank_math_general\";b:1;s:17:\"rank_math_sitemap\";b:1;s:21:\"rank_math_404_monitor\";b:1;s:22:\"rank_math_link_builder\";b:1;s:22:\"rank_math_redirections\";b:1;s:22:\"rank_math_role_manager\";b:1;s:19:\"rank_math_analytics\";b:1;s:23:\"rank_math_site_analysis\";b:1;s:25:\"rank_math_onpage_analysis\";b:1;s:24:\"rank_math_onpage_general\";b:1;s:25:\"rank_math_onpage_advanced\";b:1;s:24:\"rank_math_onpage_snippet\";b:1;s:23:\"rank_math_onpage_social\";b:1;s:19:\"rank_math_admin_bar\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:39:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:23:\"rank_math_site_analysis\";b:1;s:25:\"rank_math_onpage_analysis\";b:1;s:24:\"rank_math_onpage_general\";b:1;s:24:\"rank_math_onpage_snippet\";b:1;s:23:\"rank_math_onpage_social\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:14:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:25:\"rank_math_onpage_analysis\";b:1;s:24:\"rank_math_onpage_general\";b:1;s:24:\"rank_math_onpage_snippet\";b:1;s:23:\"rank_math_onpage_social\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}','yes'),(100,'fresh_site','0','yes'),(101,'widget_search','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(102,'widget_recent-posts','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(103,'widget_recent-comments','a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}','yes'),(104,'widget_archives','a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}','yes'),(105,'widget_meta','a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}','yes'),(106,'sidebars_widgets','a:2:{s:19:\"wp_inactive_widgets\";a:6:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";i:3;s:10:\"archives-2\";i:4;s:12:\"categories-2\";i:5;s:6:\"meta-2\";}s:13:\"array_version\";i:3;}','yes'),(107,'cron','a:9:{i:1609538142;a:1:{s:26:\"action_scheduler_run_queue\";a:1:{s:32:\"0d04ed39571b55704c122d726248bbac\";a:3:{s:8:\"schedule\";s:12:\"every_minute\";s:4:\"args\";a:1:{i:0;s:7:\"WP Cron\";}s:8:\"interval\";i:60;}}}i:1609540101;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1609545600;a:2:{s:35:\"rank_math/redirection/clean_trashed\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:30:\"rank_math/links/internal_links\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1609547300;a:1:{s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1609547301;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1609547420;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1609547421;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1609720101;a:1:{s:30:\"wp_site_health_scheduled_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"weekly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:604800;}}}s:7:\"version\";i:2;}','yes'),(108,'widget_pages','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(109,'widget_calendar','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(110,'widget_media_audio','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(111,'widget_media_image','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(112,'widget_media_gallery','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(113,'widget_media_video','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(114,'widget_tag_cloud','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(115,'widget_nav_menu','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(116,'widget_custom_html','a:1:{s:12:\"_multiwidget\";i:1;}','yes'),(118,'recovery_keys','a:0:{}','yes'),(119,'_site_transient_update_core','O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:57:\"https://downloads.wordpress.org/release/wordpress-5.6.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:57:\"https://downloads.wordpress.org/release/wordpress-5.6.zip\";s:10:\"no_content\";s:68:\"https://downloads.wordpress.org/release/wordpress-5.6-no-content.zip\";s:11:\"new_bundled\";s:69:\"https://downloads.wordpress.org/release/wordpress-5.6-new-bundled.zip\";s:7:\"partial\";s:0:\"\";s:8:\"rollback\";s:0:\"\";}s:7:\"current\";s:3:\"5.6\";s:7:\"version\";s:3:\"5.6\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.6\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1609538045;s:15:\"version_checked\";s:3:\"5.6\";s:12:\"translations\";a:0:{}}','no'),(122,'theme_mods_twentytwentyone','a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1608426054;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:3:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";}s:9:\"sidebar-2\";a:3:{i:0;s:10:\"archives-2\";i:1;s:12:\"categories-2\";i:2;s:6:\"meta-2\";}}}}','yes'),(138,'can_compress_scripts','1','no'),(145,'recently_activated','a:0:{}','yes'),(148,'finished_updating_comment_type','1','yes'),(155,'current_theme','','yes'),(156,'theme_mods_wpcode','a:3:{i:0;b:0;s:18:\"nav_menu_locations\";a:2:{s:7:\"primary\";i:2;s:9:\"secondary\";i:0;}s:18:\"custom_css_post_id\";i:-1;}','yes'),(157,'theme_switched','','yes'),(176,'action_scheduler_hybrid_store_demarkation','43','yes'),(177,'schema-ActionScheduler_StoreSchema','3.0.1608431142','yes'),(178,'schema-ActionScheduler_LoggerSchema','2.0.1608431142','yes'),(179,'rank_math_known_post_types','a:3:{s:4:\"post\";s:4:\"post\";s:4:\"page\";s:4:\"page\";s:10:\"attachment\";s:10:\"attachment\";}','yes'),(180,'rank_math_modules','a:11:{i:0;s:12:\"link-counter\";i:1;s:9:\"analytics\";i:2;s:12:\"seo-analysis\";i:3;s:7:\"sitemap\";i:4;s:12:\"rich-snippet\";i:5;s:11:\"woocommerce\";i:6;s:10:\"buddypress\";i:7;s:7:\"bbpress\";i:8;s:3:\"acf\";i:9;s:11:\"web-stories\";i:10;s:9:\"local-seo\";}','yes'),(181,'rank-math-options-general','a:38:{s:19:\"strip_category_base\";s:3:\"off\";s:24:\"attachment_redirect_urls\";s:2:\"on\";s:27:\"attachment_redirect_default\";s:20:\"http://wpcode.dev.cc\";s:23:\"nofollow_external_links\";s:3:\"off\";s:20:\"nofollow_image_links\";s:3:\"off\";s:25:\"new_window_external_links\";s:2:\"on\";s:11:\"add_img_alt\";s:3:\"off\";s:14:\"img_alt_format\";s:11:\" %filename%\";s:13:\"add_img_title\";s:3:\"off\";s:16:\"img_title_format\";s:22:\"%title% %count(title)%\";s:11:\"breadcrumbs\";s:3:\"off\";s:21:\"breadcrumbs_separator\";s:1:\"-\";s:16:\"breadcrumbs_home\";s:2:\"on\";s:22:\"breadcrumbs_home_label\";s:4:\"Home\";s:26:\"breadcrumbs_archive_format\";s:15:\"Archives for %s\";s:25:\"breadcrumbs_search_format\";s:14:\"Results for %s\";s:21:\"breadcrumbs_404_label\";s:25:\"404 Error: page not found\";s:31:\"breadcrumbs_ancestor_categories\";s:3:\"off\";s:21:\"breadcrumbs_blog_page\";s:3:\"off\";s:16:\"404_monitor_mode\";s:6:\"simple\";s:17:\"404_monitor_limit\";i:100;s:35:\"404_monitor_ignore_query_parameters\";s:2:\"on\";s:24:\"redirections_header_code\";s:3:\"301\";s:18:\"redirections_debug\";s:3:\"off\";s:23:\"console_caching_control\";s:2:\"90\";s:27:\"link_builder_links_per_page\";s:1:\"7\";s:29:\"link_builder_links_per_target\";s:1:\"1\";s:22:\"wc_remove_product_base\";s:3:\"off\";s:23:\"wc_remove_category_base\";s:3:\"off\";s:31:\"wc_remove_category_parent_slugs\";s:3:\"off\";s:18:\"rss_before_content\";s:0:\"\";s:17:\"rss_after_content\";s:0:\"\";s:19:\"wc_remove_generator\";s:2:\"on\";s:24:\"remove_shop_snippet_data\";s:2:\"on\";s:18:\"frontend_seo_score\";s:3:\"off\";s:29:\"frontend_seo_score_post_types\";a:1:{i:0;s:4:\"post\";}s:27:\"frontend_seo_score_position\";s:3:\"top\";s:10:\"setup_mode\";s:4:\"easy\";}','yes'),(182,'rank-math-options-titles','a:95:{s:24:\"noindex_empty_taxonomies\";s:2:\"on\";s:15:\"title_separator\";s:1:\"-\";s:17:\"capitalize_titles\";s:3:\"off\";s:17:\"twitter_card_type\";s:19:\"summary_large_image\";s:19:\"knowledgegraph_type\";s:7:\"company\";s:19:\"knowledgegraph_name\";s:7:\"WP Code\";s:19:\"local_business_type\";s:23:\"EducationalOrganization\";s:20:\"local_address_format\";s:43:\"{address} {locality}, {region} {postalcode}\";s:13:\"opening_hours\";a:7:{i:0;a:2:{s:3:\"day\";s:6:\"Monday\";s:4:\"time\";s:11:\"09:00-17:00\";}i:1;a:2:{s:3:\"day\";s:7:\"Tuesday\";s:4:\"time\";s:11:\"09:00-17:00\";}i:2;a:2:{s:3:\"day\";s:9:\"Wednesday\";s:4:\"time\";s:11:\"09:00-17:00\";}i:3;a:2:{s:3:\"day\";s:8:\"Thursday\";s:4:\"time\";s:11:\"09:00-17:00\";}i:4;a:2:{s:3:\"day\";s:6:\"Friday\";s:4:\"time\";s:11:\"09:00-17:00\";}i:5;a:2:{s:3:\"day\";s:8:\"Saturday\";s:4:\"time\";s:11:\"09:00-17:00\";}i:6;a:2:{s:3:\"day\";s:6:\"Sunday\";s:4:\"time\";s:11:\"09:00-17:00\";}}s:20:\"opening_hours_format\";s:3:\"off\";s:14:\"homepage_title\";s:34:\"%sitename% %page% %sep% %sitedesc%\";s:20:\"homepage_description\";s:0:\"\";s:22:\"homepage_custom_robots\";s:3:\"off\";s:23:\"disable_author_archives\";s:3:\"off\";s:15:\"url_author_base\";s:6:\"author\";s:20:\"author_custom_robots\";s:2:\"on\";s:13:\"author_robots\";a:1:{i:0;s:7:\"noindex\";}s:20:\"author_archive_title\";s:30:\"%name% %sep% %sitename% %page%\";s:19:\"author_add_meta_box\";s:2:\"on\";s:21:\"disable_date_archives\";s:2:\"on\";s:18:\"date_archive_title\";s:30:\"%date% %page% %sep% %sitename%\";s:12:\"search_title\";s:38:\"%search_query% %page% %sep% %sitename%\";s:9:\"404_title\";s:31:\"Page Not Found %sep% %sitename%\";s:19:\"date_archive_robots\";a:1:{i:0;s:7:\"noindex\";}s:14:\"noindex_search\";s:2:\"on\";s:24:\"noindex_archive_subpages\";s:3:\"off\";s:26:\"noindex_password_protected\";s:3:\"off\";s:32:\"pt_download_default_rich_snippet\";s:7:\"product\";s:13:\"pt_post_title\";s:24:\"%title% %sep% %sitename%\";s:19:\"pt_post_description\";s:9:\"%excerpt%\";s:14:\"pt_post_robots\";a:0:{}s:21:\"pt_post_custom_robots\";s:3:\"off\";s:28:\"pt_post_default_rich_snippet\";s:7:\"article\";s:28:\"pt_post_default_article_type\";s:11:\"BlogPosting\";s:28:\"pt_post_default_snippet_name\";s:11:\"%seo_title%\";s:28:\"pt_post_default_snippet_desc\";s:17:\"%seo_description%\";s:17:\"pt_post_ls_use_fk\";s:6:\"titles\";s:20:\"pt_post_add_meta_box\";s:2:\"on\";s:20:\"pt_post_bulk_editing\";s:7:\"editing\";s:24:\"pt_post_link_suggestions\";s:2:\"on\";s:24:\"pt_post_primary_taxonomy\";s:8:\"category\";s:13:\"pt_page_title\";s:24:\"%title% %sep% %sitename%\";s:19:\"pt_page_description\";s:9:\"%excerpt%\";s:14:\"pt_page_robots\";a:0:{}s:21:\"pt_page_custom_robots\";s:3:\"off\";s:28:\"pt_page_default_rich_snippet\";s:7:\"article\";s:28:\"pt_page_default_article_type\";s:7:\"Article\";s:28:\"pt_page_default_snippet_name\";s:11:\"%seo_title%\";s:28:\"pt_page_default_snippet_desc\";s:17:\"%seo_description%\";s:17:\"pt_page_ls_use_fk\";s:6:\"titles\";s:20:\"pt_page_add_meta_box\";s:2:\"on\";s:20:\"pt_page_bulk_editing\";s:7:\"editing\";s:24:\"pt_page_link_suggestions\";s:2:\"on\";s:19:\"pt_attachment_title\";s:24:\"%title% %sep% %sitename%\";s:25:\"pt_attachment_description\";s:9:\"%excerpt%\";s:20:\"pt_attachment_robots\";a:1:{i:0;s:7:\"noindex\";}s:27:\"pt_attachment_custom_robots\";s:2:\"on\";s:34:\"pt_attachment_default_rich_snippet\";s:3:\"off\";s:34:\"pt_attachment_default_article_type\";s:7:\"Article\";s:34:\"pt_attachment_default_snippet_name\";s:11:\"%seo_title%\";s:34:\"pt_attachment_default_snippet_desc\";s:17:\"%seo_description%\";s:26:\"pt_attachment_add_meta_box\";s:3:\"off\";s:16:\"pt_product_title\";s:24:\"%title% %sep% %sitename%\";s:22:\"pt_product_description\";s:9:\"%excerpt%\";s:17:\"pt_product_robots\";a:0:{}s:24:\"pt_product_custom_robots\";s:3:\"off\";s:31:\"pt_product_default_rich_snippet\";s:7:\"product\";s:31:\"pt_product_default_article_type\";s:7:\"Article\";s:31:\"pt_product_default_snippet_name\";s:11:\"%seo_title%\";s:31:\"pt_product_default_snippet_desc\";s:17:\"%seo_description%\";s:20:\"pt_product_ls_use_fk\";s:6:\"titles\";s:23:\"pt_product_add_meta_box\";s:2:\"on\";s:23:\"pt_product_bulk_editing\";s:7:\"editing\";s:27:\"pt_product_link_suggestions\";s:2:\"on\";s:27:\"pt_product_primary_taxonomy\";s:11:\"product_cat\";s:18:\"pt_web-story_title\";s:24:\"%title% %sep% %sitename%\";s:24:\"pt_web-story_description\";s:9:\"%excerpt%\";s:19:\"pt_web-story_robots\";a:0:{}s:26:\"pt_web-story_custom_robots\";s:3:\"off\";s:33:\"pt_web-story_default_rich_snippet\";s:7:\"article\";s:33:\"pt_web-story_default_article_type\";s:7:\"Article\";s:33:\"pt_web-story_default_snippet_name\";s:11:\"%seo_title%\";s:33:\"pt_web-story_default_snippet_desc\";s:17:\"%seo_description%\";s:25:\"pt_web-story_add_meta_box\";s:3:\"off\";s:18:\"tax_category_title\";s:23:\"%term% %sep% %sitename%\";s:19:\"tax_category_robots\";a:0:{}s:25:\"tax_category_add_meta_box\";s:2:\"on\";s:26:\"tax_category_custom_robots\";s:3:\"off\";s:24:\"tax_category_description\";s:18:\"%term_description%\";s:18:\"tax_post_tag_title\";s:23:\"%term% %sep% %sitename%\";s:19:\"tax_post_tag_robots\";a:1:{i:0;s:7:\"noindex\";}s:25:\"tax_post_tag_add_meta_box\";s:2:\"on\";s:26:\"tax_post_tag_custom_robots\";s:2:\"on\";s:24:\"tax_post_tag_description\";s:18:\"%term_description%\";s:28:\"tax_post_format_add_meta_box\";s:2:\"on\";}','yes'),(183,'rank-math-options-sitemap','a:12:{s:14:\"items_per_page\";i:200;s:14:\"include_images\";s:2:\"on\";s:22:\"include_featured_image\";s:3:\"off\";s:19:\"ping_search_engines\";s:2:\"on\";s:13:\"exclude_roles\";a:2:{s:11:\"contributor\";s:11:\"Contributor\";s:10:\"subscriber\";s:10:\"Subscriber\";}s:15:\"pt_post_sitemap\";s:2:\"on\";s:15:\"pt_page_sitemap\";s:2:\"on\";s:21:\"pt_attachment_sitemap\";s:3:\"off\";s:18:\"pt_product_sitemap\";s:2:\"on\";s:20:\"pt_web-story_sitemap\";s:3:\"off\";s:20:\"tax_category_sitemap\";s:2:\"on\";s:20:\"tax_post_tag_sitemap\";s:3:\"off\";}','yes'),(186,'rank_math_version','1.0.55','yes'),(187,'rank_math_db_version','1','yes'),(188,'rank_math_install_date','1608431142','yes'),(190,'action_scheduler_lock_async-request-runner','1609538161','yes'),(194,'rank_math_registration_skip','1','yes'),(195,'rank_math_connect_data','a:5:{s:8:\"username\";s:156:\"W7VDV5Bps0+i6oBMfEX6sTFOYlpOeEl6RHVwRXdDRkR4dTVLWWVyUStBZXcrUjl1QVpoL05STTk2WXpFcnJEVWYyOHYvbFNtbkwwWVFiNkNRUTQ3blFNVnptbUlLeHFtcHUvMWNIVEJFR0tWSkRhUmVoU08=\";s:5:\"email\";s:188:\"fQzC1++Ti3UvGwXyFovsCFdlVkhYWkZDNkRLUnk4SkxrQmNkOEtGSlpLSHFpNzh5MmRIckIzZmVGL3BKL3FHYzMwQnFZNmd3RTcxQUV5bjVvVFFNK0JGQ0tsdnMrY0EzbC9qdzVaM2lvVXpQa2ZCMG12VnJkb3hpQTdsTndBZzZrQUlJVytyZDdMenQ=\";s:7:\"api_key\";s:200:\"YS4wg0TLCsranmRwUAAAS3NJOHhJQWpteWdEbEFYWWFnTUdlVmZtUTJ6MkpHTkJ2QUxZZjNPeHJOYzBBMVJSbjFZKzJIT1VJbm9tbmpaL1lUVlVyZE1IUlRNTjUyN1NKbG9Yb0VDcXhsajVjWUZHZDFKVzdIK3Vma1J3dVR2RmJFS0hpUkZYS202Ymh1L3lZZ0E9PQ==\";s:4:\"plan\";s:144:\"6id1eP12XEA1fSrrycfpSTV5YWxIanJiMEZYUnBLTVBPZUYxWndNbkRwTlRxTkt6WTBlejNiNEZ1RnBzM0dzQVBYc3hpVjg1dGpFajhWWlBkK3ZqY05XWXdtZTkyS1UwMG9SOTB2cCtTMm1p\";s:9:\"connected\";b:1;}','yes'),(196,'rank_math_review_posts_converted','1','yes'),(197,'_transient_rank_math_first_submenu_id','rank-math','yes'),(198,'rank_math_wizard_completed','1','yes'),(200,'action_scheduler_migration_status','complete','yes'),(201,'_transient__rank_math_site_type','otherbusiness','yes'),(204,'rank_math_google_oauth_tokens','a:3:{s:12:\"access_token\";s:456:\"V7DFzq1wShsg/jEl7iQLwXRHVGJtWDB2SGpvZ0R1S1VFYTFUUzhKaldVdFkxMEc1U3hXVVJIRkZLZ2k5NHBRcDJnWmdXN3loUkVmY2tUNVR4SVNJVmIwSHRnMEU5QVIrTnU5SnAvL0VBcmFUVHJIMXhoSWN2eTZaNEFSbVB0T2NvVElBdzNUQ3hCV1VwamVHMzdxZDlyYWhta3pMR0ZueDJtKzhDcGFMbHlsa3BuNHlONU5QZG81amMyVVVPelNsV3pjOVMwUFBZQnV4dFVUZkoxRFNqa2VaTkljWDNkclVUK0p0RmNGNTVqbWlrdWFOTW9iZWlHT2RDb2hNeHdnbkJ1TUVLcGVhUkdrcnRKV29FU0w0QVFBb002aWpyOXRrVUJiUTBrNEZ2YWRSTXhVdUVFVXJvWnhvVkJaNlE1b29CNTAzbnpmSmRGM3FTOEMyaXZSbQ==\";s:13:\"refresh_token\";s:320:\"A8KFyksAb57pdxQrzEBYjXgxRkpid1dNdGRPMStTYnhXb290VFdjb2Q0UEFzYmNLQmV5OHJIRXI3aXVHRXRCRzc0cHpCUzlrUWlmZk11MWkvQXFmYm8wV3dmQmtVYWRMQnNPL1BJRFgvdnBieW54YVJBdjVzS1U3eUs4UHRNb1EyZDlHOWJvdDU1Sms0TG1FV2lRemlFd2wyQ0tXWElFVHU5Yi9HVWZDYWFiMG5wK21GaDdkbnI1Q3I2bmVtWHoyZEZxNUJUTnM1Rzg0OC95ckFGazMzZks4blpmSE1lbUV3Y0NiUkEvb04rWVhsZFFh\";s:6:\"expire\";s:10:\"1608434902\";}','yes'),(205,'rank_math_analytics_all_services','a:8:{s:10:\"isVerified\";b:1;s:15:\"inSearchConsole\";b:1;s:10:\"hasSitemap\";b:0;s:12:\"hasAnalytics\";b:1;s:20:\"hasAnalyticsProperty\";b:0;s:7:\"homeUrl\";s:21:\"http://wpcode.dev.cc/\";s:5:\"sites\";a:1:{s:26:\"sc-domain:eatbuildplay.com\";s:26:\"sc-domain:eatbuildplay.com\";}s:8:\"accounts\";a:1:{i:172854641;a:2:{s:4:\"name\";s:14:\"Eat/Build/Play\";s:10:\"properties\";a:1:{s:14:\"UA-172854641-1\";a:5:{s:4:\"name\";s:14:\"Eat/Build/Play\";s:2:\"id\";s:14:\"UA-172854641-1\";s:3:\"url\";s:24:\"https://eatbuildplay.com\";s:10:\"account_id\";s:9:\"172854641\";s:8:\"profiles\";a:2:{i:224131640;a:3:{s:2:\"id\";s:9:\"224131640\";s:4:\"name\";s:17:\"All Web Site Data\";s:4:\"type\";s:3:\"WEB\";}i:224195887;a:3:{s:2:\"id\";s:9:\"224195887\";s:4:\"name\";s:26:\"Default Google Ads Profile\";s:4:\"type\";s:3:\"WEB\";}}}}}}}','yes'),(207,'rank_math_is_configured','1','yes'),(212,'rank_math_sitemap_cache_files','a:0:{}','yes'),(251,'_transient_timeout_rank_math_dashboard_stats_widget','1611458130','no'),(252,'_transient_rank_math_dashboard_stats_widget','O:8:\"stdClass\":4:{s:8:\"keywords\";a:3:{s:5:\"total\";i:0;s:8:\"previous\";i:0;s:10:\"difference\";i:0;}s:6:\"clicks\";a:3:{s:5:\"total\";i:0;s:8:\"previous\";i:0;s:10:\"difference\";i:0;}s:11:\"impressions\";a:3:{s:5:\"total\";i:0;s:8:\"previous\";i:0;s:10:\"difference\";i:0;}s:8:\"position\";a:3:{s:5:\"total\";d:0;s:8:\"previous\";d:0;s:10:\"difference\";d:0;}}','no'),(253,'_transient_timeout_rank_math_feed_posts','1609730131','no'),(254,'_transient_rank_math_feed_posts','a:3:{i:0;a:24:{s:2:\"id\";i:417217;s:4:\"date\";s:19:\"2020-08-18T10:59:54\";s:8:\"date_gmt\";s:19:\"2020-08-18T14:59:54\";s:4:\"guid\";a:1:{s:8:\"rendered\";s:30:\"https://rankmath.com/?p=417217\";}s:8:\"modified\";s:19:\"2020-09-21T13:44:22\";s:12:\"modified_gmt\";s:19:\"2020-09-21T17:44:22\";s:4:\"slug\";s:15:\"woocommerce-seo\";s:6:\"status\";s:7:\"publish\";s:4:\"type\";s:4:\"post\";s:4:\"link\";s:42:\"https://rankmath.com/blog/woocommerce-seo/\";s:5:\"title\";a:1:{s:8:\"rendered\";s:66:\"WooCommerce SEO: The Definitive Guide for Your Online Store (2020)\";}s:7:\"content\";a:2:{s:8:\"rendered\";s:49164:\"\n<p>If you use WooCommerce for your online store,<strong> you&rsquo;ve come to the right place. </strong>We&rsquo;re aware and have been told time and time again that there just aren&rsquo;t enough (let alone any good) practical guides on <strong>WooCommerce SEO</strong> that actually show you exactly what you need to focus on. </p>\n\n\n\n<!--more-->\n\n\n\n<p>So, in this practical guide, we&rsquo;ll dive deep into how to technically optimize your WooCommerce store <strong>for search and for a better user experience</strong> &ndash;&nbsp;and answer the most common questions we&rsquo;re asked about the optimal WooCommerce SEO setup.</p>\n\n\n\n<div id=\"toc\">\n<h2>In this WooCommerce SEO guide, we&rsquo;ll take a look at:</h2>\n<ol><li><a href=\"#what-is-seo\">What is SEO &amp; Why Does It Matter?</a></li>\n<li><a href=\"#seo-plugins\">Important WooCommerce SEO Plugins &amp; Theme Choice</a></li>\n<li><a href=\"#wordpress-seo-settings\">WordPress SEO Settings</a> </li>\n<li><a href=\"#woocommerce-seo-settings\">WooCommerce SEO Settings</a></li>\n<li><a href=\"#page-layout\">WooCommerce Product Page Layout</a></li>\n<li><a href=\"#schema\">Schema Markup for WooCommerce Stores</a></li>\n<li><a href=\"#conclusion\">Summary: WooCommerce + Rank Math = An SEO Powerhouse</a></li>\n<li><a href=\"#faq\">WooCommerce SEO: Frequently Asked Questions</a></li></ol></div>\n\n\n\n<h2 id=\"what-is-seo\"><span class=\"number\">1</span>  What is SEO &amp; Why Does It Matter?</h2>\n\n\n\n<p>If you&rsquo;ve newly moved your in-person storefront online &amp; transitioned to serving customers through a WooCommerce store, before we dive in &ndash; it&rsquo;s important to understand what SEO is and why it matters. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1000\" height=\"435\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201000%20435\'%3E%3C/svg%3E\" alt=\"Google search result showing WooCommerce Product Schema\" class=\"wp-image-609449 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/WooCommerce-Product-Schema.jpg\"></figure><p>Search engines, particularly Google, are an incredible source of ongoing website traffic as they direct searchers (potential customers) to visit certain sites when they are looking for information as well as <strong>products. </strong>And this is why this guide focuses on the 2nd facet of this &ndash; products and how you can optimize your site to rank &amp; drive traffic from search. </p>\n\n\n\n<h2 id=\"seo-plugins\"><span class=\"number\">2</span>  Important SEO Plugins &amp; WooCommerce Theme Choice</h2>\n\n\n\n<h3><span class=\"number\">2.1</span>  Rank Math SEO Plugin</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><a href=\"https://rankmath.com/wordpress/plugin/seo-suite/\"><img loading=\"lazy\" width=\"3332\" height=\"1300\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%203332%201300\'%3E%3C/svg%3E\" alt=\"WooCommerce SEO Plugin Rank Math\" class=\"wp-image-606971 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/rank-math-woocommerce-seo-1.png\"></a></figure><p>Although we might be a bit biased, to simplify the entire technical SEO process for your WooCommerce store, we wholeheartedly recommend the <a href=\"https://rankmath.com/wordpress/plugin/seo-suite/\" class=\"rank-math-link\"><strong>Rank Math WordPress SEO plugin</strong></a> <strong>as it offers built-in support for WooCommerce SEO</strong>, and better yet, it&rsquo;s completely free to use. </p>\n\n\n\n<p><a href=\"https://rankmath.com/kb/how-to-setup/\" class=\"rank-math-link\">Learn more about how to get started here.</a></p>\n\n\n\n<h3><span class=\"number\">2.2</span>  Setting Up Tracking</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"626\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20626\'%3E%3C/svg%3E\" alt=\"Google Analytics Events\" class=\"wp-image-609910 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/google-analytics-events.jpg\"></figure><p>Setting up Google Analytics for regular websites is fairly standard but <strong>with WooCommerce websites, you&rsquo;ll need to set up&nbsp;<em>enhanced tracking</em></strong><em>&nbsp;</em>to pass key actions that people can take on your website into Google Analytics as events, such as:</p>\n\n\n\n<ul><li>Applying coupons/removing coupons</li><li>Refunding orders</li><li>Canceling orders</li><li>Completing orders (orders that reach the thank you page as well as those that don&rsquo;t) </li><li>Customers signing into and out of your WooCommerce store</li><li>Customers submitting product reviews </li></ul><p>Thankfully, if you&rsquo;re using WooCommerce this isn&rsquo;t something you need to worry about manually configuring as it can easily be done with the help of the <a class=\"rank-math-link\" href=\"https://woocommerce.com/products/woocommerce-google-analytics-pro/\">official WooCommerce Google Analytics Pro extension</a>. </p>\n\n\n\n<p>That being said, if you prefer to and are comfortable with doing so, here is a brilliant guide from CommerceGurus that walks you through setting up <a href=\"https://www.commercegurus.com/guides/google-analytics-woocommerce/\" class=\"rank-math-link\">Google Analytics tracking for WooCommerce</a>.</p>\n\n\n\n<h3><span class=\"number\">2.3</span>  Our Recommended WooCommerce Themes</h3>\n\n\n\n<p>Unless you&rsquo;re an experienced developer and are comfortable with making customizations to an existing theme or starter framework, <strong>it&rsquo;s really important that you choose a theme that was built from the ground-up to be both SEO-friendly and compatible with WooCommerce.</strong> </p>\n\n\n\n<p>It might seem like a good idea just to use whatever theme you&rsquo;re already using for regular WordPress sites, but there are fundamental differences in terms of design, <strong>CRO</strong> (Conversion Rate Optimization) and compatibility that go into building a WooCommerce/eCommerce-friendly theme.</p>\n\n\n\n<p><strong>Benefits of choosing a theme that was built from the ground up to be used on WooCommerce websites:</strong></p>\n\n\n\n<ol><li>Your site&rsquo;s overall architecture will accommodate showcasing products effectively. </li><li>Your website&rsquo;s overall appearance will be far more coherent &amp; consistent. </li><li>You won&rsquo;t have to tweak/play around with certain settings just to get the basic site layout you need for a WooCommerce store working. </li></ol><h4><a href=\"https://mythemeshop.com/themes/schema/\" class=\"rank-math-link\">The Schema Theme</a> (used on this website)</h4>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"906\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20906\'%3E%3C/svg%3E\" alt=\"Schema WordPress Theme\" class=\"wp-image-609456 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/schema-theme.jpg\"></figure><p class=\"takeaway\"><strong>Disclosure:</strong>&nbsp;Rank Math is affiliated with MyThemeShop. We were founded by the same founders&nbsp;behind MyThemeShop.</p>\n\n\n\n<p>Obviously, <a class=\"rank-math-link\" href=\"https://mythemeshop.com/\">MyThemeShop</a> &ndash; the same products and quality support you already know and love if you use Rank Math &ndash; is at the top of our list since we use it on this website as well. The <strong>Schema WooCommerce theme</strong> is the same theme used to power the Rank Math website (yep, the website you&rsquo;re reading this post on right now.</p>\n\n\n\n<p>That being said, here are a number of other WooCommerce themes we can also confidently recommend: </p>\n\n\n\n<h4><a href=\"https://mythemeshop.com/themes/ecommerce/\" class=\"rank-math-link\">The eCommerce Theme</a></h4>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"974\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20974\'%3E%3C/svg%3E\" alt=\"eCommerce WordPress Theme\" class=\"wp-image-609457 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/ecommerce-theme.jpg\"></figure><p>The eCommerce theme is also built by MyThemeShop and was designed from the ground up for WooCommerce stores. Some more general themes that are suitable for traditional websites aren&rsquo;t specifically built to support the functionality required by eCommerce websites and in particular compatibility for WooCommerce, which is exactly what MyThemeShop built the eCommerce theme for. </p>\n\n\n\n<h4><a href=\"https://wordpress.org/themes/storefront/\" class=\"rank-math-link\">Storefront by WooCommerce</a></h4>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"942\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20942\'%3E%3C/svg%3E\" alt=\"Storefront WordPress Theme\" class=\"wp-image-609458 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/storefront-theme.jpg\"></figure><p>And last but not least is the Storefront theme. <strong>Built and maintained by WooCommerce themselves</strong>, this theme is definitely worth checking out as they also offer a whole range of child themes to accelerate your design process.</p>\n\n\n\n<p>Beyond these four themes above, if you weren&rsquo;t able to find what you were looking for and are looking for more <a href=\"https://kinsta.com/blog/woocommerce-themes/#the-best-free-woocommerce-themes\" class=\"rank-math-link\">WooCommerce themes, Kinsta&rsquo;s post here</a> has you covered.</p>\n\n\n\n<div class=\"takeaway red\"><strong>Note: </strong>Either way, before making your final theme choice, <strong>we highly recommend</strong> running the following 3 tests:</div>\n\n\n\n<p><strong>1. Test Theme Demos Using <a href=\"https://developers.google.com/speed/pagespeed/insights/\">Google PageSpeed Insights</a></strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1901\" height=\"854\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201901%20854\'%3E%3C/svg%3E\" alt=\"Google PageSpeed Result\" class=\"wp-image-607684 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/google-pagespeed-insights.png\"></figure><p>Once you&rsquo;ve settled on a design that&rsquo;s suitable for your store, be sure to test using Google PageSpeed Insights as this is how Google assesses page speed (<strong>a known ranking factor</strong>). Doing this using a <a rel=\"nofollow\" class=\"rank-math-link\" href=\"https://demo.mythemeshop.com/schema/\"><em>theme&rsquo;s demo URL</em></a> (before buying) as it will give you an accurate picture of the type of performance you can expect if you choose to use this theme for your WooCommerce theme.</p>\n\n\n\n<p><strong>2. Test Theme Using <a href=\"https://search.google.com/test/mobile-friendly\" class=\"rank-math-link\">Google&rsquo;s Mobile-Friendly Testing Tool</a></strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1909\" height=\"686\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201909%20686\'%3E%3C/svg%3E\" alt=\"Google Mobile Friendly testing tool\" class=\"wp-image-607689 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/google-mobile-friendly-testing-tool.png\"></figure><p>The above tool is useful as it will indicate whether or not Google views the website/theme you&rsquo;re <strong>testing to be mobile-friendly</strong> or if certain clickable elements are too close together, too small, and so forth.</p>\n\n\n\n<p>Beyond this, we would also recommend manually trying the theme on a mobile device to see if it is fully functional <strong>for actual users</strong> as sometimes the tests can be misleading.</p>\n\n\n\n<p><strong>3. Ensure The Theme Is Not Adding Invalid Schema Markup Using <a href=\"https://search.google.com/test/rich-results\" class=\"rank-math-link\">Google&rsquo;s Rich Results Test</a></strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1906\" height=\"676\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201906%20676\'%3E%3C/svg%3E\" alt=\"Google Rich Results testing tool\" class=\"wp-image-607691 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/google-rich-results-test.png\"></figure><p><strong>Some supposedly SEO-friendly WooCommerce themes take the liberty of adding structured data markup (Schema) to the theme files directly.</strong> This can be problematic and often results in serious issues with them no longer adhering to Google&rsquo;s latest guidelines simply because themes typically aren&rsquo;t updated as frequently as plugins which is why we highly recommend using the Rank Math WordPress SEO plugin. </p>\n\n\n\n<p>Once you&rsquo;ve made a final decision on what theme is best for you &ndash; based on design, performance and other factors that you&rsquo;re taking into consideration&nbsp;&ndash; refer to this <a class=\"rank-math-link\" href=\"https://mythemeshop.com/blog/wordpress-speed-optimization/\"><strong>WordPress speed optimization</strong> </a>guide to properly optimize the rest of your website (we recommend making these changes in a staging area before applying them to your production site). </p>\n\n\n\n<h2 id=\"wordpress-seo-settings\"><span class=\"number\">3</span>  WordPress SEO Settings</h2>\n\n\n\n<h3><span class=\"number\">3.1</span>  Choose A Suitable Site Title &amp; Tagline</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"494\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20494\'%3E%3C/svg%3E\" alt=\"Site Title &amp; Tagline settings\" class=\"wp-image-609759 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/site-title-and-tagline.jpg\"></figure><p>The first step of configuring the overall SEO settings of your website is ensuring that you&rsquo;ve added a suitable <strong>Site Title </strong>and <strong>Tagline</strong>. </p>\n\n\n\n<p><strong>Your Site Title will typically be your brand&rsquo;s name</strong>, while your tagline can be used to provide more context about what products you sell on your WooCommerce store &ndash;&nbsp;such as <em>Beauty Products for Men/Women</em> etc. </p>\n\n\n\n<h3><span class=\"number\">3.2</span>  Ensure Your Site is Indexable</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2292\" height=\"1674\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202292%201674\'%3E%3C/svg%3E\" alt=\"WordPress setting to block search engines from indexing the whole site\" class=\"wp-image-606947 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-reading-settings-seo.png\"></figure><p>After setting a suitable Site Title and Tagline for your WooCommerce store, the next step is to navigate to <strong>Settings &gt; General </strong>in your WordPress admin area and ensure that the <em><strong>Search Engine Visibility </strong></em>option to discourage search engines from indexing your website is <strong>disabled</strong> (i.e. the checkbox should not be ticked). </p>\n\n\n\n<h3><span class=\"number\">3.3</span>  Ensure You Have A Valid SSL Certificate Installed</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"888\" height=\"406\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20888%20406\'%3E%3C/svg%3E\" alt=\"SSL Certificate notice in the browser\" class=\"wp-image-606952 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-seo-ssl-certificate.png\"></figure><p>Although this is now standard with many web hosts in the WooCommerce/WordPress hosting industry, it is extremely important to <strong>ensure your SSL certificate is both installed and valid</strong>. </p>\n\n\n\n<p>For more information, refer to this <a href=\"https://mythemeshop.com/blog/lets-encrypt-free-ssl/\" class=\"rank-math-link\">guide about SSL certificates, how to install them &amp; why you need one</a> on your WooCommerce store.</p>\n\n\n\n<h3><span class=\"number\">3.4</span>  Make Proper Use of Canonicalization</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201%201\'%3E%3C/svg%3E\" alt=\"Canonical URLs\" data-src=\"https://rankmath.com/wp-content/uploads/Canonical-URLs.jpg\" class=\"lazy\"></figure><p><strong>Duplicate content can get complicated with WooCommerce stores</strong>. The most fundamental issue is with the various different versions of a specific URL:</p>\n\n\n\n<pre id=\"block-3e757dfd-aca2-462a-8a68-ab4e1cbc4eea\" class=\"wp-block-preformatted\">https://website.com\nhttps://www.website.com\nhttp://website.com\nhttp://www.website.com</pre>\n\n\n\n<p><strong>All of which should redirect to one specific &ldquo;canonicalized&rdquo; version.</strong></p>\n\n\n<div class=\"youtube-container\"><div class=\"youtube-player\" data-id=\"gEWkYTPSEjs\" data-image=\"exists\" data-controls=\"1\" role=\"button\" tabindex=\"0\" aria-label=\"Play Video\"><div><img loading=\"lazy\" class=\"youtube-thumb lazy\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201280%20720\'%3E%3C/svg%3E\" width=\"1280\" height=\"720\" alt=\"Canonicalization: SEO Mythbusting\" role=\"presentation\" data-src=\"https://img.youtube.com/vi/gEWkYTPSEjs/maxresdefault.jpg\"><div class=\"play-button\" aria-hidden=\"true\"><i class=\"icon-youtube\"></i></div></div></div></div>\n\n\n<p><strong>Your site should not be accessible from multiple URLs</strong> (i.e. both the www and non-www variation at the same time). The version you choose to use is not irrelevant, but non-www is becoming more of a standard since it is increasingly more common &amp; shorter. </p>\n\n\n\n<p>To ensure that canonicalization is in place, <strong>you can test your site using this <a class=\"rank-math-link\" href=\"https://rankmath.com/tools/seo-analyzer/\">SEO Analyzer</a>.</strong> </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1962\" height=\"136\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201962%20136\'%3E%3C/svg%3E\" alt=\"Test Canonical URLs using Rank Math Analyzer tool\" class=\"wp-image-606938 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/canonicalization-test.png\"></figure><p>Beyond this, canonicalization is also important when you have a number of pages on your site that have similar/the same content as this can result in duplicate content issues (this commonly occurs in WooCommerce stores due to categories, archives and product pages all have very similar and sometimes also very thin content). </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2452\" height=\"1062\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202452%201062\'%3E%3C/svg%3E\" alt=\"Rank Math Advanced Settings tab\" class=\"wp-image-443345 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2019/12/image.png\"></figure><p>Thankfully, <strong>changing your canonical URL for posts, pages, and products on your WooCommerce store couldn&rsquo;t be easier than with Rank Math.</strong> Simply head to the meta box and you&rsquo;ll find the option under the <a class=\"rank-math-link\" href=\"https://rankmath.com/kb/advanced-tab/\"><strong>Advanced tab.</strong></a> </p>\n\n\n\n<h3><span class=\"number\">3.5</span>  Choose A Simple Permalink Structure</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"505\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20505\'%3E%3C/svg%3E\" alt=\"WooCommerce Product Slug Change Setting\" class=\"wp-image-609778 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-product-permalink.jpg\"></figure><div class=\"takeaway red\"><strong>Note: </strong>If your website is already bringing in sales and traffic, <strong>we advise you NOT to</strong> change these settings or proceed with extreme caution when doing so.</div>\n\n\n\n<p>However, for those of you configuring the settings for your new WooCommerce stores, we highly recommend altering these settings here in favor of a cleaner URL structure.</p>\n\n\n\n<p><strong>Although cleaner URLs reportedly doesn&rsquo;t have a direct impact on SEO, this overall helps improve the user experience </strong>of your site as customers can easily remember their URLs and understand what products they&rsquo;re currently viewing as they browse your site. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"899\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20899\'%3E%3C/svg%3E\" alt=\"WooCommerce Permalink Settings\" class=\"wp-image-609777 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-permalink-settings.jpg\"></figure><p>The above settings are suitable for most sites unless someone specifically wants a different URL structure due to the particular products or product line-ups that they have.</p>\n\n\n\n<h2 id=\"woocommerce-seo-settings\"><span class=\"number\">4</span>  WooCommerce SEO Settings</h2>\n\n\n\n<p>Now that we&rsquo;ve covered the important settings you need to configure in the WordPress content management system, it&rsquo;s time to dive deeper into the settings specifically pertaining to the WooCommerce plugin itself.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1238\" height=\"818\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201238%20818\'%3E%3C/svg%3E\" alt=\"Rank Math WooCommerce Module\" class=\"wp-image-606975 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/rank-math-woocommerce-seo-2.png\"></figure><p>Earlier in this post, we covered why installing Rank Math makes this process significantly easier. Once it&rsquo;s installed, you&rsquo;ll want to head to <strong>Rank Math &gt; Dashboard</strong> <strong>to make sure that the WooCommerce SEO Module is enabled.</strong> </p>\n\n\n\n<p>Once you&rsquo;ve activated or confirmed its activation, head to <a href=\"https://rankmath.com/kb/titles-and-meta/#products\" class=\"rank-math-link\">Rank Math &gt; General Settings &gt; WooCommerce</a> and enable the following settings.</p>\n\n\n\n<div class=\"takeaway red\"><strong>Note: </strong>The following options <strong>should NOT be enabled on established websites</strong> unless you know what you&rsquo;re doing.</div>\n\n\n\n<h3><strong><span class=\"number\">4.1</span>  Remove Base</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"732\" height=\"158\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20732%20158\'%3E%3C/svg%3E\" alt=\"Rank Math option to remove WooCommerce base from the permalinks\" class=\"wp-image-607702 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/remove-base-woocommerce-rank-math.png\"></figure><p>It&rsquo;s important that you ensure URLs are easily accessible and memorable for both users and SERPs. Removing the unnecessary prefixes, such as&nbsp;<strong>shop&nbsp;</strong>and&nbsp;<strong>product&nbsp;</strong>from your URLs will make your WooCommerce store easier to navigate and URLs shorter to remember and easier to share. Although keywords in URLs are thought not to have a direct impact on SEO, a better experience for visitors and a URL structure that only includes terms users are actually interested in is a change for the better.</p>\n\n\n\n<h3><strong><span class=\"number\">4.2</span>  Remove Category Base</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"729\" height=\"128\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20729%20128\'%3E%3C/svg%3E\" alt=\"Rank Math option to remove category base from WooCommerce Permalinks\" class=\"wp-image-607703 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/remove-woocommerce-category-base-rank-math.png\"></figure><p>By default, WooCommerce appends <code>/product-category/</code> before the actual category appears in your permalink which is undesirable in most cases. As mentioned above, the cleaner your URL structure, the better for users and SERPs.</p>\n\n\n\n<p>So, instead of having a permalink that looks like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/product-category/accessories/action-figures/</code></pre>\n\n\n\n<p>You&rsquo;d be able to have a cleaner, easier to read permalink like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/accessories/action-figures/</code></pre>\n\n\n\n<p><strong>This is far cleaner and will make it a lot easier for users to navigate your store. </strong>It also helps improve Google&rsquo;s understanding of your site&rsquo;s structure since <code>/product-category/</code> has no actual meaning/purpose in your URL.</p>\n\n\n\n<h3><strong><span class=\"number\">4.3</span>  Remove Parent Slugs</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"715\" height=\"126\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20715%20126\'%3E%3C/svg%3E\" alt=\"Rank Math option to remove WooCommerce parent category slug\" class=\"wp-image-607704 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/remove-parent-slugs-woocommerce-rank-math.png\"></figure><p><strong>This next option can be useful if you aren&rsquo;t really making use of categories.</strong> When enabled, it will remove the parent category slug from your product page permalinks. The benefit of this again is that you aren&rsquo;t relying on the categories in your store and certain products may be standalone (i.e. not warrant the creation of an entirely new category on your WooCommerce store). </p>\n\n\n\n<h3><strong><span class=\"number\">4.4</span>  Remove WooCommerce Generator Tag</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"646\" height=\"87\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20646%2087\'%3E%3C/svg%3E\" alt=\"Rank Math option to remove WooCommece version number meta tag\" class=\"wp-image-607700 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/remove-woocommerce-generator-tag-rank-math.png\"></figure><p><strong>When enabled, this will prevent WooCommerce from loading a meta generator tag</strong> in the header of your website&rsquo;s code that reveals the version of WooCommerce that you are running and is simply unnecessary. <strong>We recommend enabling it</strong> to clean up &amp; remove the following from your website&rsquo;s source code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;meta name=\"generator\" content=\"WooCommerce 4.4.2\" /&gt;</code></pre>\n\n\n\n<h3><strong><span class=\"number\">4.5</span>  Remove Schema Markup on Shop Page</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"691\" height=\"93\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20691%2093\'%3E%3C/svg%3E\" alt=\"Rank Math option to remove Schema markup code from the shop page\" class=\"wp-image-607709 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/remove-woocommerce-schema-markup-shop-archives.png\"></figure><p>Enabling this option will remove Schema Markup on shop archive pages which is following <a href=\"https://developers.google.com/search/docs/guides/sd-policies#multiple-elements\" class=\"rank-math-link\">Google&rsquo;s official recommendations</a> which are <strong>not to use any other Schema type on the shop archive pages</strong>. </p>\n\n\n\n<h3><strong><span class=\"number\">4.6</span>  Remove Schema Data From Categories</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"694\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20694\'%3E%3C/svg%3E\" alt=\"Rank Math option to remove Schema markup code from the shop category pages\" class=\"wp-image-609935 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/remove-schema-from-woocommerce-category.jpg\"></figure><p>Enabling the <strong>Remove Snippet Data </strong>option will prevent Schema data from being added to your product category pages as is now in line with <a href=\"https://developers.google.com/search/docs/guides/sd-policies#multiple-elements-on-a-page\" class=\"rank-math-link\">Google&rsquo;s guidelines</a>. </p>\n\n\n\n<h2 id=\"page-layout\"><span class=\"number\">5</span>  WooCommerce Product Page Layout</h2>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"820\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20820\'%3E%3C/svg%3E\" alt=\"WooCommerce Single Product Page\" class=\"wp-image-609936 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-single-product.jpg\"></figure><p>Making use of a thoughtful WooCommerce product page layout is incredibly important when choosing a theme.</p>\n\n\n\n<p>Without this, you&rsquo;ll struggle to <strong>write copy that converts visitors into customers</strong> and also find it more difficult than it has to be to rank for long-tail keywords due to the content on your pages. </p>\n\n\n\n<p>Here is our advice on how to make the most of your product pages in particular with your product descriptions: </p>\n\n\n\n<ul><li>Put yourself in your ideal buyer&rsquo;s position (what do they expect to read/know when they land on this page)</li><li><strong>Focus on benefits not features</strong></li><li>Use social proof to your advantage (make reviews visible)</li><li><strong>Make your product description easy-to-follow</strong></li><li>Leverage product data to acquire rich snippets. Rank Math SEO plugin does that automatically</li><li>Use language that sells: <a href=\"https://rankmath.com/blog/power-words/\" class=\"rank-math-link\">power words</a> not keywords</li><li>Add high-quality images that truly showcase your product &amp; ensure you <a aria-label=\"add alt-text to every image (opens in a new tab)\" rel=\"noreferrer noopener\" href=\"https://rankmath.com/kb/general-settings/#add-missing-alt-attributes\" target=\"_blank\" class=\"rank-math-link\">add alt-text to every image</a></li></ul><p id=\"block-39f9f497-e44f-4e2a-9ec2-9fa2ed012511\"><strong>Thankfully, with a plugin like Rank Math, adding meta titles and descriptions for products created with WooCommerce is extremely easy to do. </strong></p>\n\n\n\n<p>Simply head to the product page as if you were planning to edit the product normally and scroll down. When you&rsquo;ve installed Rank Math, you&rsquo;ll see the SEO Meta Box in this area which is where you can customize all of the settings pertaining to the specific product you are editing (as shown below).</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2366\" height=\"1324\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202366%201324\'%3E%3C/svg%3E\" alt=\"Rank Math option to edit single product meta tags\" class=\"wp-image-437194 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2019/11/editing-product-info-woocommerce-1.png\"></figure><p>In addition to this, you should also take the opportunity to add FAQ Schema to these pages, where suitable, using the method outline in this post about <a class=\"rank-math-link\" href=\"https://rankmath.com/blog/faq-schema/#faq-classic-editor\">FAQ Schema</a>. </p>\n\n\n\n<h3><span class=\"number\">5.2</span>  Enable Breadcrumbs</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201%201\'%3E%3C/svg%3E\" alt=\"Google Search Result Breadcrumbs\" class=\"wp-image-609993 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/google-search-breadcrumbs.jpg\"></figure><p><a aria-label=\"Breadcrumbs (opens in a new tab)\" rel=\"noreferrer noopener\" class=\"rank-math-link\" href=\"https://schema.org/breadcrumb\" target=\"_blank\">Breadcrumbs</a> are links that appear at the top of product pages and make it easier for people browsing your website to move back to previous category pages or landing pages. Essentially, they show a user where they are and where they have been which <strong>makes your website easier to navigate</strong>. </p>\n\n\n\n<p>It is, however, important to mention that breadcrumbs are actually not only helpful for website visitors. <strong>Google also uses these to change the way in which your website appears in search results.</strong> </p>\n\n\n\n<p>While WooCommerce does include basic breadcrumb functionality that is useful to add to your website &ldquo;out-of-the-box&rdquo;, if you really want to <strong>leverage the SEO benefits of breadcrumbs</strong>, you can do so by installing an SEO plugin like Rank Math.</p>\n\n\n\n<p>Enabling breadcrumbs with Rank Math is extremely easy to do. Simply head to <strong>Rank Math &gt; General Settings</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"796\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20796\'%3E%3C/svg%3E\" alt=\"Rank Math Breadcrumbs Settings\" class=\"wp-image-609994 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/rank-math-breadcrumbs.jpg\"></figure><p>Once enabled, <a href=\"https://rankmath.com/kb/general-settings/#bread-crumbs\" class=\"rank-math-link\">a number of settings</a> will appear giving you full control over how you&rsquo;d like the breadcrumbs to appear &ndash; where you&rsquo;d like the <em>home </em>link to direct users to, what you&rsquo;d like the label for that link to go and more.</p>\n\n\n\n<h2><span class=\"number\">6</span>  Organize Your Products With Categories &amp; Tags</h2>\n\n\n\n<p>Although this isn&rsquo;t essential for smaller online stores, as you grow and you offer multiple products in multiple different line-ups &ndash; <strong>making proper use of product categories &amp; tags is extremely important</strong>. </p>\n\n\n\n<p>This will make it significantly easier for your website visitors to find what it is that they&rsquo;re looking for while also giving you the opportunity to rank in search when customers are searching for certain <strong><em>types </em></strong>of products. </p>\n\n\n\n<p>This may seem simple to begin with but if you want to organize it in a way that makes sense even when new products &amp; categories of products are introduced, it&rsquo;s essential that you fully consider the organization/structure from the beginning. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"674\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20674\'%3E%3C/svg%3E\" alt=\"WooCommerce Category Structure\" class=\"wp-image-609991 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-category-structure.jpg\"></figure><h3><span class=\"number\">6.1</span>  How To Organize Your Store With Categories And Tags</h3>\n\n\n\n<p><strong>Firstly, you&rsquo;ll want to divide your store&rsquo;s products into a select few core (general) categories and then the separate subcategories that will live underneath those parent categories. </strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"597\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20597\'%3E%3C/svg%3E\" alt=\"WooCommerce Site Category Structure\" class=\"wp-image-610114 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/ecommerce-category-structure.jpg\"></figure><p>For example, if you sell clothing &amp; accessories &ndash;&nbsp;these would presumably be two of the core, top-level categories in your store. You would then potentially have <strong>Pants </strong>and <strong>Shirts </strong>as subcategories of your top-level <strong>Clothing </strong>category. <strong>There is no blanket solution for how to do this as it will vary based on your store</strong>, what types of products you currently offer as well as what you intend to introduce in the future. </p>\n\n\n\n<p>For example, will you have both <em>Men&rsquo;s </em>and <em>Women&rsquo;s </em>clothing? These are all things that need to be taken into consideration when you&rsquo;re setting up your store. </p>\n\n\n\n<p><strong>And the purpose of tags is to keep track of common features, metrics, qualities, and other characteristics that products may have.</strong> The best way to think of tags are details that are important to your product, but not important enough to warrant the introduction of an entire category or subcategory (at least not yet, they may eventually as you introduce more products). </p>\n\n\n\n<p>Tags can include any <strong>properties</strong> relevant to your product, such as color, brand, and size &ndash;&nbsp;considering what your customers would want to use to filter through your collections is a great way to find inspiration. </p>\n\n\n\n<h2 id=\"schema\"><span class=\"number\">7</span>  Schema Markup for WooCommerce Stores</h2>\n\n\n\n<h3><span class=\"number\">7.1</span>  Enabling WooCommerce Review Schema aka Product Schema</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"298\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20298\'%3E%3C/svg%3E\" alt=\"Google Review Schema\" class=\"wp-image-609999 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/wordpress-review-plugin.jpg\"></figure><p><strong>Rank Math automatically converts your WooCommerce product&rsquo;s information into Schema-ready content.</strong> It even pulls the <code>aggregateRating</code> and <code>review</code> fields from the actual product reviews that customers leave via the review functionality that is built into WooCommerce. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1762\" height=\"1492\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201762%201492\'%3E%3C/svg%3E\" alt=\"woocommerce-review-schema\" class=\"wp-image-607737 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-review-schema.png\"></figure><div class=\"takeaway red\"><strong>Note: </strong>If you currently don&rsquo;t have any product reviews then this is going to show up as a warning in Google&rsquo;s Structured Data Testing Tool. This is because Google will actually look for these fields so we recommend encouraging your most loyal customers to leave reviews to get rid of the &ldquo;aggregateRating&rdquo; and &ldquo;review&rdquo; error.</div>\n\n\n\n<h3><span class=\"number\">7.2</span>  Fixing SKU/Availability Schema Errors </h3>\n\n\n\n<p>Similarly, <strong>the SKU and availability error can be fixed by entering the field in the Inventory tab</strong> of your product&rsquo;s data, as shown below:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1914\" height=\"690\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201914%20690\'%3E%3C/svg%3E\" alt=\"WooCommerce SKU and Stock options\" class=\"wp-image-607026 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-sku-schema-warning.png\"></figure><h3><span class=\"number\">7.3</span>  Fixing &ldquo;Brand&rdquo; Schema Warnings WooCommerce</h3>\n\n\n\n<p><strong>In order to fix the Brand Schema warning</strong>, in the WordPress admin area, navigate to <strong>Rank Math &gt; General Settings &gt; WooCommerce</strong> and choose from any of the available fields to use as your product&rsquo;s brands. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"861\" height=\"227\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20861%20227\'%3E%3C/svg%3E\" alt=\"Rank Math brand settings\" class=\"wp-image-608688 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/woocommerce-brand-schema-1.png\"></figure><p><strong>However, if your store has a single brand</strong> and you&rsquo;d prefer not to be dependent on the use of tags &amp; categories, <strong>you can make use of the following filter</strong> by adding this code to your theme&rsquo;s functions.php file (ideally using a child theme) or using the <a class=\"rank-math-link\" href=\"https://wordpress.org/plugins/code-snippets/\">Code Snippets plugin</a>: </p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Add Brand for Products.\nadd_filter( \'rank_math/snippet/rich_snippet_product_entity\', function( $entity ) {\n    $entity[\'brand\'] = \'Rank Math\';\n    return $entity;\n});</code></pre>\n\n\n\n<p><strong>Replace the &ldquo;Rank Math&rdquo; text with your actual brand name then run your website through the Structured Data Testing tool once again.</strong></p>\n\n\n\n<h3><span class=\"number\">7.4</span>  GTIN, ISBN &amp; MPN Schema Setup</h3>\n\n\n\n<p><strong>If you wish to show GTIN, ISBN and MPN structured data</strong>, you can do that using custom product attributes in WooCommerce or using the following <a class=\"rank-math-link\" href=\"https://wordpress.org/plugins/product-gtin-ean-upc-isbn-for-woocommerce/\">Product GTIN plugin</a> for WooCommerce. </p>\n\n\n\n<h3><span class=\"number\">7.5</span>  Fixing The &ldquo;priveValidUntil&rdquo; Schema Warning</h3>\n\n\n\n<p><strong>For the <code>priceValidUntil</code> warning</strong> that may appear in Google Search Console, you can either just ignore it (it simply won&rsquo;t appear in SERPs) or you can add a sale price with a certain time period to get rid of it.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1200\" height=\"436\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201200%20436\'%3E%3C/svg%3E\" alt=\"Fix priceValidUntil schema error\" class=\"wp-image-610018 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/schema-pricevaliduntil-issue-fix.gif\"></figure><h2 id=\"conclusion\">Summary: WooCommerce + Rank Math = An SEO Powerhouse</h2>\n\n\n\n<p>It&rsquo;s clear to see why WooCommerce is such a popular choice among eCommerce store owners. It makes it extremely easy to get up &amp; running while also not confining you to the limitations of a certain platform. </p>\n\n\n\n<p>Easy to get started, easy to customize, and <strong>even easier to optimize for SEO with Rank Math</strong>. </p>\n\n\n\n<p>Honestly, what&rsquo;s not to love? </p>\n\n\n\n<p>Once you&rsquo;ve followed this guide to ensure your WooCommerce store is properly set up &ndash;&nbsp;we also highly recommend looking into <a href=\"https://woocommerce.com/posts/google-shopping-for-woocommerce/\" class=\"rank-math-link\">how to sync your products to Google&rsquo;s Shopping product feed</a>.</p>\n\n\n\n<p><strong>Here are some other useful guides worth checking out: </strong></p>\n\n\n\n<ul><li><a href=\"https://backlinko.com/ecommerce-seo\" class=\"rank-math-link\">Backlinko&rsquo;s &ldquo;Definitive&rdquo; eCommerce Guide (2020)</a></li><li><a href=\"https://ahrefs.com/blog/ecommerce-seo\" class=\"rank-math-link\">Ecommerce&nbsp;SEO: A Simple (But Complete) Guide by Ahrefs</a></li><li><a href=\"https://www.matthewwoodward.co.uk/seo/ecommerce/\" class=\"rank-math-link\">Matthew Woodward&rsquo;s Ultimate eCommerce SEO Guide</a></li></ul><p>If you have absolutely anything to add or have a question &ndash; <a href=\"https://twitter.com/rankmathseo\" class=\"rank-math-link\">Tweet @rankmathseo</a>! &#128172;</p>\n\n\n\n<hr class=\"wp-block-separator\"><h2 id=\"faq\">WooCommerce SEO: Frequently Asked Questions</h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1597675563882\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Is WooCommerce Good For SEO?</h3>\n<div class=\"rank-math-answer \"><p><strong>Yes, WooCommerce is a great platform for eCommerce stores that care about SEO.</strong> It provides far more flexibility and control over your site&rsquo;s design &amp; structure than all other eCommerce platforms do. </p>\n</div>\n</div>\n<div id=\"faq-question-1597675573966\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>Should WooCommerce Product Tags &amp; Categories Be Indexable?&nbsp;</strong></h3>\n<div class=\"rank-math-answer \"><img width=\"128\" height=\"78\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20128%2078\'%3E%3C/svg%3E\" class=\"alignright lazy\" alt=\"WooCommerce-category-SERP-example\" loading=\"lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/08/WooCommerce-category-SERP-example.png\"><p>In general, people will suggest not indexing categories and tags to prevent issues with duplicate content. But in theory, this question is actually far more nuanced than that. As long as you&rsquo;re not having the same posts and the same content in the vast majority of your categories and tags (with a small number of products in many), there is merit in indexing these pages since they can allow you to rank for a whole range of search terms with buyer intent (such as the example below which is the SERP for &ldquo;men&rsquo;s t-shirts&rdquo;).</p>\n<p>As a general rule, Tags are recommended to be indexed if someone has over 100 products on their store, otherwise &ndash; indexing categories should suffice for most stores to avoid receiving a <a href=\"https://support.google.com/webmasters/answer/9044175?visit_id=637000007761316852-2626911818&amp;rd=2#thin-content\" class=\"rank-math-link\">thin content penalty from Google</a>.</p>\n</div>\n</div>\n<div id=\"faq-question-1597675620625\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>What Plugin Is Best For WooCommerce SEO? </strong></h3>\n<div class=\"rank-math-answer \"><p>Obviously, we&rsquo;re a little bit biased when it comes to this, but all in all, we think it&rsquo;s safe to say that <strong><a href=\"https://rankmath.com/wordpress/plugin/seo-suite/\" class=\"rank-math-link\">Rank Math for WooCommerce</a> is the best plugin for WooCommerce SEO.</strong></p>\n</div>\n</div>\n<div id=\"faq-question-1597675634631\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>How to Fix Schema Errors in WooCommerce?</strong></h3>\n<div class=\"rank-math-answer \"><p>If the Google Search Console is reporting issues with the structured data on one or more of your pages, <strong>we recommend following the process detailed on this post</strong> to ensure that everything has been set up correctly.</p>\n</div>\n</div>\n<div id=\"faq-question-1597675638093\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>Is HTTPS / SSL Required To Run A WooCommerce Store?</strong></h3>\n<div class=\"rank-math-answer \"><p>Using SSL and ensuring your site is only accessible over HTTPS is a standard for WooCommerce stores and <strong>we would seriously advise all store owners who aren&rsquo;t already doing this to look to <a href=\"https://mythemeshop.com/blog/lets-encrypt-free-ssl/\" class=\"rank-math-link\">implement this with their web host</a></strong> as soon as possible. Also, it is a ranking factor.</p>\n</div>\n</div>\n<div id=\"faq-question-1597675641099\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>Where Can I Find Product Images? </strong></h3>\n<div class=\"rank-math-answer \"><p><strong>We highly advise that store owners invest in the production of unique, high-quality product images for their websites.</strong> However, if you simply aren&rsquo;t able to, you can resort to popular <a href=\"https://mythemeshop.com/blog/stock-photos/\" class=\"rank-math-link\">stock photography websites</a>. </p>\n</div>\n</div>\n<div id=\"faq-question-1597675645229\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>How To Show Star Ratings On Google? </strong></h3>\n<div class=\"rank-math-answer \"><p>To begin with, you should ensure that your <a href=\"https://rankmath.com/kb/how-to-fix-review-schema-errors/\" class=\"rank-math-link\">Review Schema Markup</a> (added via Rank Math) is free of any errors that may be caused by a conflicting theme or plugin. And beyond this, considering everything is in compliance/accordance with Google&rsquo;s guidelines which can be tested using <a href=\"https://search.google.com/test/rich-results\" class=\"rank-math-link\">Google&rsquo;s Rich Results testing tool</a> &ndash;&nbsp;you&rsquo;ve done everything you can to ensure that the star ratings appear but Google simply doesn&rsquo;t show it for all sites which is something out of your control. There are so many factors in play that determine star ratings appearing along with your product results and having the correct Schema is just one of those factors. You can read more about that <a href=\"https://developers.google.com/search/docs/guides/sd-policies\" class=\"rank-math-link\">here</a>.</p>\n</div>\n</div>\n<div id=\"faq-question-1597675650464\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \"><strong>How To Show Product Price On Google? </strong></h3>\n<div class=\"rank-math-answer \"><p>To show product price in your site&rsquo;s rich snippets in search, <strong>you need to ensure that the required structured data has been added</strong>. If you use the Rank Math WordPress SEO plugin and have the WooCommerce SEO module activated, this is done automatically.</p>\n</div>\n</div>\n</div>\n</div>\n\n\n<p></p>\n\";s:9:\"protected\";b:0;}s:7:\"excerpt\";a:2:{s:8:\"rendered\";s:299:\"<p>If you use WooCommerce for your online store, you&rsquo;ve come to the right place. We&rsquo;re aware and have been told time and time again that there just aren&rsquo;t enough (let alone any good) practical guides on WooCommerce SEO that actually show you exactly what you need to focus on.</p>\n\";s:9:\"protected\";b:0;}s:6:\"author\";i:37;s:14:\"featured_media\";i:610995;s:14:\"comment_status\";s:4:\"open\";s:11:\"ping_status\";s:4:\"open\";s:6:\"sticky\";b:0;s:8:\"template\";s:0:\"\";s:6:\"format\";s:8:\"standard\";s:4:\"meta\";a:0:{}s:10:\"categories\";a:1:{i:0;i:1;}s:4:\"tags\";a:0:{}s:6:\"_links\";a:11:{s:4:\"self\";a:1:{i:0;a:1:{s:4:\"href\";s:47:\"https://rankmath.com/wp-json/wp/v2/posts/417217\";}}s:10:\"collection\";a:1:{i:0;a:1:{s:4:\"href\";s:40:\"https://rankmath.com/wp-json/wp/v2/posts\";}}s:5:\"about\";a:1:{i:0;a:1:{s:4:\"href\";s:45:\"https://rankmath.com/wp-json/wp/v2/types/post\";}}s:6:\"author\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:43:\"https://rankmath.com/wp-json/wp/v2/users/37\";}}s:7:\"replies\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:55:\"https://rankmath.com/wp-json/wp/v2/comments?post=417217\";}}s:15:\"version-history\";a:1:{i:0;a:2:{s:5:\"count\";i:3;s:4:\"href\";s:57:\"https://rankmath.com/wp-json/wp/v2/posts/417217/revisions\";}}s:19:\"predecessor-version\";a:1:{i:0;a:2:{s:2:\"id\";i:611104;s:4:\"href\";s:64:\"https://rankmath.com/wp-json/wp/v2/posts/417217/revisions/611104\";}}s:16:\"wp:featuredmedia\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:47:\"https://rankmath.com/wp-json/wp/v2/media/610995\";}}s:13:\"wp:attachment\";a:1:{i:0;a:1:{s:4:\"href\";s:54:\"https://rankmath.com/wp-json/wp/v2/media?parent=417217\";}}s:7:\"wp:term\";a:2:{i:0;a:3:{s:8:\"taxonomy\";s:8:\"category\";s:10:\"embeddable\";b:1;s:4:\"href\";s:57:\"https://rankmath.com/wp-json/wp/v2/categories?post=417217\";}i:1;a:3:{s:8:\"taxonomy\";s:8:\"post_tag\";s:10:\"embeddable\";b:1;s:4:\"href\";s:51:\"https://rankmath.com/wp-json/wp/v2/tags?post=417217\";}}s:6:\"curies\";a:1:{i:0;a:3:{s:4:\"name\";s:2:\"wp\";s:4:\"href\";s:23:\"https://api.w.org/{rel}\";s:9:\"templated\";b:1;}}}}i:1;a:24:{s:2:\"id\";i:489163;s:4:\"date\";s:19:\"2020-03-12T05:53:16\";s:8:\"date_gmt\";s:19:\"2020-03-12T12:53:16\";s:4:\"guid\";a:1:{s:8:\"rendered\";s:30:\"https://rankmath.com/?p=489163\";}s:8:\"modified\";s:19:\"2020-07-31T16:04:16\";s:12:\"modified_gmt\";s:19:\"2020-07-31T20:04:16\";s:4:\"slug\";s:12:\"howto-schema\";s:6:\"status\";s:7:\"publish\";s:4:\"type\";s:4:\"post\";s:4:\"link\";s:39:\"https://rankmath.com/blog/howto-schema/\";s:5:\"title\";a:1:{s:8:\"rendered\";s:68:\"How To Add &#8216;HowTo Schema&#8217; To Your Website With Rank Math\";}s:7:\"content\";a:2:{s:8:\"rendered\";s:29601:\"\n<p>In this article, we are going to show you exactly how you can add <strong><a href=\"https://developers.google.com/search/docs/data-types/how-to\" target=\"_blank\" aria-label=\"HowTo Schema (opens in a new tab)\" rel=\"noreferrer noopener\" class=\"rank-math-link\">HowTo Schema</a></strong> using Rank Math&rsquo;s easy-to-use Gutenberg block. </p>\n\n\n\n<p>Thanks to Rank Math&rsquo;s HowTo Block adding structured data to your posts and pages has never been easier. </p>\n\n\n\n<!--more-->\n\n\n\n<div id=\"toc\">\n	<h2>In this HowTo Schema guide, we&rsquo;ll take a look at:</h2>\n	<ul><li><a href=\"#what-is-how-to-schema\">1. What is HowTo Schema Markup?</a></li>\n		<li><a href=\"#benefits\">2. The Benefits of Adding HowTo Schema</a></li>\n		<li><a href=\"#how-to-add-how-to-schema\">3. How Do I Add HowTo Schema in WordPress?</a>\n			<ul><li><a href=\"#final-image\">3.1 The Final Image</a></li>\n				<li><a href=\"#main-description\">3.2 Main Description</a></li>\n				<li><a href=\"#duration\">3.3 Duration</a></li>\n				<li><a href=\"#adding-steps\">3.4 Adding HowTo Steps</a></li>\n				<li><a href=\"#step-titles\">3.5 Adding A Step Title</a></li>\n				<li><a href=\"#step-image\">3.6 Adding Step Images</a></li>\n				<li><a href=\"#step-description\">3.7 Adding A Step Description</a></li>\n				<li><a href=\"#adding-steps\">3.8 Adding New Steps</a></li>\n				<li><a href=\"#deleting-and-hiding-steps\">3.9 Deleting or Hiding Steps</a></li>\n			</ul></li><li><a href=\"#block-options\">4. HowTo Schema Block Options</a></li>\n		<li><a href=\"#5-previewing-the-howto\">5. Previewing Your HowTo Schema</a></li>\n		<li><a href=\"#6-important-things-to-know-about-how-to-schema\">6. Important Things To Know About HowTo Schema</a></li>\n		<li><a href=\"#validating-how-to-schema\">7. Validating HowTo Schema</a></li>\n		<li><a href=\"#faq\">8. Frequently Asked Questions</a></li>\n		<li><a href=\"#conclusion\">9. Final Words &ndash; Start Taking Advantage of HowTo Schema</a></li>\n	</ul></div>\n\n\n\n<h2 id=\"what-is-how-to-schema\"><span class=\"number\">1</span>  What Is HowTo Schema Markup?</h2>\n\n\n\n<p>HowTo Schema should be used to indicate to Google (and other search engines) that your content is, in fact, as you might have guessed a <strong>HowTo guide. </strong>A HowTo guide is a post or page that walks a user through a set of steps to successfully complete a specific task &ndash;&nbsp;examples include things like <em><strong>how to tie a shoelace, </strong></em>and <em><strong>how to change a light bulb</strong></em>.</p>\n\n\n\n<p>When pages are properly marked up using structured data, and in this case How-To Schema, they may be eligible to appear as a &ldquo;rich result&rdquo; (what is otherwise referred to as a rich snippet) in Search. </p>\n\n\n\n<p>Before we dive into the simple setup process, let&rsquo;s take a quick look at the<strong> benefits of using HowTo structured data on your website</strong>:</p>\n\n\n\n<h2 id=\"benefits\"><span class=\"number\">2</span>  The Benefits of Adding How To Schema To Your Website</h2>\n\n\n\n<p>Winning HowTo rich snippet is beneficial as it helps increase the overall visibility of your website since it&nbsp;<strong>occupies additional space in search engine results pages</strong>&nbsp;and provides users with a method of interaction.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-large is-resized\"><img loading=\"lazy\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20342%20397\'%3E%3C/svg%3E\" alt=\"HowTo Schema Example\" class=\"wp-image-490831 lazy\" width=\"342\" height=\"397\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-schema-serp.jpg\"></figure></div>\n\n\n\n<p>But that&rsquo;s just the beginning, here are the other benefits:</p>\n\n\n\n<ul><li><strong>Increased visibility&nbsp;</strong>&ndash; as you can see in the image above, interactive results are more appealing to searchers and take up more space on screens visually. </li><li><strong>Eligibility for Voice Search Actions&nbsp;</strong>&ndash; Making use of HowTo Schema can also make your site eligible for an&nbsp;<a rel=\"noreferrer noopener\" href=\"https://developers.google.com/actions/content-actions/faq\" target=\"_blank\">action that is made available in the Google Assistant</a>. This can potentially help your site be the source of answers for people using voice search to ask questions. For example, if &ndash;&nbsp;using Google Assitant &ndash; someone asks &ldquo;how can I download a YouTube video to my iPhone&rdquo; and your article is the best answer to the question it may be used.</li></ul><p>By design &ndash; a page eligible for the HowTo rich results&nbsp;<strong>gets additional space below the regular search snippet</strong>, just as is the case with other rich snippet types. And, as you&rsquo;d expect, the additional real estate in Google search tends to equate to a better click-through rate. </p>\n\n\n\n<p>If you&rsquo;re active in the community and have attended, conferences and webinars recently you&rsquo;ll know that it&rsquo;s very difficult to go without hearing structured data come up at some point. This is because Google is focusing on this heavily at the moment mainly because the web is evolving. </p>\n\n\n\n<p>From simple, text-based content and text search,<strong> we now have other forms of media making it into search</strong> including video, audio and image content. </p>\n\n\n\n<p>Searchers are now no longer mainly searching from desktops, people are using mobile phones, and they&rsquo;re even searching on their smart TVs for crying out loud. To improve this experience, <strong>Google needs to understand data like never before</strong> and that is exactly where structured data comes in. </p>\n\n\n\n<h2 id=\"how-to-add-how-to-schema\"><span class=\"number\">3</span> &nbsp;How Do I Add HowTo Schema in WordPress?</h2>\n\n\n\n<p><a href=\"https://rankmath.com/kb/installation/\" class=\"rank-math-link\">Once you&rsquo;ve installed the Rank Math plugin</a>, all you need to do is create a new post or page (or open an existing one) that you&rsquo;d like to add HowTo Schema to. It&rsquo;s important to note that Rank Math only supports the WordPress block editor when adding the HowTo Block so if you&rsquo;re using the classic editor on your website, you will have to upgrade to the Block Editor temporarily.</p>\n\n\n\n<p>Once you&rsquo;re in the editor, simply add a new block to the post using the &ldquo;+&rdquo; button to see all the available blocks, or search for How To using the &ldquo;/&rdquo; shortcut and you&rsquo;ll see the HowTo block as shown below:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"520\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20520\'%3E%3C/svg%3E\" alt=\"Adding HowTo Block\" class=\"wp-image-490929 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/Rank-Math-HowTo-Schema.gif\"></figure><p>Click on the block to add it to the post and this is how it should appear in the editor once it has been added to the post: </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1230\" height=\"1060\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201230%201060\'%3E%3C/svg%3E\" alt=\"Rank Math HowTo Block\" class=\"wp-image-490844 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/rankmath-howto-block.png\"></figure><p>As you can see, there are a number of options to configure in a single HowTo Block, and <strong>configuring each of them correctly is important</strong> if you want your page to be considered for rich results. </p>\n\n\n\n<p>If any of the options are not configured according to Google&rsquo;s Structured Data Guidelines, then your page is likely to be not considered for rich results. So let&rsquo;s take a closer look at each of the individual options available:</p>\n\n\n\n<h3 id=\"final-image\"><span class=\"number\">3.1</span>  Final Image</h3>\n\n\n\n<p>In the Final Image section, you need to add an image that represents the final result of your HowTo visually. </p>\n\n\n\n<p>For example, if your post is about &ldquo;How to tie your shoelaces,&rdquo; then the image here should be of shoes with the laces tied.</p>\n\n\n\n<p><strong>This image is optional to add but highly recommended</strong>, as seeing the final results is a compelling motivation for users to read through the entire result.</p>\n\n\n\n<p>To add a final image, click the <strong>Add Final Image</strong> button. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"317\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20317\'%3E%3C/svg%3E\" alt=\"HowTo Final Image\" class=\"wp-image-490848 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-final-image.jpg\"></figure><p>The WordPress Media Manager will open up. There, upload or select the image for the Final Image.</p>\n\n\n\n<p>And the image will be added as the Final Image. You can use the 2 buttons on the top right of the image to edit or delete the image.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"599\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20599\'%3E%3C/svg%3E\" alt=\"HowTo Final Image Edit\" class=\"wp-image-490858 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-final-image-edit.jpg\"></figure><h3 id=\"main-description\"><span class=\"number\">3.2</span>  Main Description</h3>\n\n\n\n<p>Here you need to describe what you&rsquo;re trying to accomplish. The field is meant for a description of your goal, not the process of reaching the goal. For example, if you&rsquo;re trying to talk about &ldquo;How to build a dog house,&rdquo; then do not talk about <em>how</em> you will build them here&mdash;that is what the individual steps are for. </p>\n\n\n\n<p>Here, <strong>you could say something like</strong>, &ldquo;In this post, we will learn how to build a dog house for your furry mate. We will consider the various sizes, materials, and costs, and come with a brilliant design for your canine.&rdquo;</p>\n\n\n\n<p>This field is <strong>mandatory</strong>, as an overview of what you&rsquo;re trying to accomplish is important to establish before you set to show how to do it. Just fill in the description of the HowTo in the text area.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"273\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20273\'%3E%3C/svg%3E\" alt=\"HowTo Final Description\" class=\"wp-image-490867 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/add-howto-final-description.jpg\"></figure><h3 id=\"duration\"><span class=\"number\">3.3</span>  Duration</h3>\n\n\n\n<p>The duration is a simple field, and you just have to enter the estimated time that the entire task will take. The duration field is optional and is disabled by default. Click the toggle button to enable the field.</p>\n\n\n\n<p>When enabled, you&rsquo;ll see these options.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"241\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20241\'%3E%3C/svg%3E\" alt=\"HowTo Duration\" class=\"wp-image-490860 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-duration.jpg\"></figure><p>The first field is just a label that you give to the duration. If we use the shoelace example, you could enter &ldquo;Time to tie shoelaces,&rdquo; there.</p>\n\n\n\n<p>The rest of the fields represent <strong>Days, Hours, and Minutes</strong>. Just enter the actual duration in these fields.</p>\n\n\n\n<p>And this is how it should appear on the post.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"480\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20480\'%3E%3C/svg%3E\" alt=\"HowTo Duration in Frontend\" class=\"wp-image-490865 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-duration-frontend.jpg\"></figure><p>The duration field is optional to configure (that is why it is disabled by default), but the more information you can give to Google, the better it usually is.</p>\n\n\n\n<h3 id=\"adding-steps\"><span class=\"number\">3.4</span>  HowTo Step</h3>\n\n\n\n<p>Next comes perhaps the most important part of the entire HowTo Block; the actual step that needs to be performed. The step itself is made up of 3 parts. Let us discuss each of them.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"309\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20309\'%3E%3C/svg%3E\" alt=\"HowTo Step\" class=\"wp-image-490872 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-step.jpg\"></figure><h3 id=\"step-title\"><span class=\"number\">3.5</span>  Step Title</h3>\n\n\n\n<p>This is where you would give a title to the step. Do not describe the step here; just use a few words to say <em>what</em> you&rsquo;re going to do. For example, using our two-loop shoelace knot, for the title, we&rsquo;d say, &ldquo;Make a loop with each of the ends.&rdquo;</p>\n\n\n\n<h3 id=\"step-image\"><span class=\"number\">3.6</span>  Step Image</h3>\n\n\n\n<p>Here you will add an image for <strong>the specific step</strong> that you&rsquo;re talking about. As we&rsquo;ve mentioned earlier, adding images is not mandatory but highly recommended. As the number of smart devices and assisted devices explode, visual content like images will be consumed at a much higher rate than usual.</p>\n\n\n\n<ol><li>To add an image, click the <strong>Add Step Image</strong> button.</li><li>When the WordPress media manager opens up, upload or select the image in the gallery, and click the <strong>Select Button</strong>.</li><li>The image will be added to the step.</li></ol><p>Similar to the final image, you can delete or change the image using the two buttons in the top right corner of the image.</p>\n\n\n\n<h3 id=\"step-description\"><span class=\"number\">3.7</span>  Step Description</h3>\n\n\n\n<p>This is where you will describe the step in detail. Make sure to mention all the important assumptions, and write the description in a way that people <strong>listening</strong> to it are able to follow along without any problems. Yes, Google is already using the HowTo Structured-Data for voice search and smart devices. </p>\n\n\n\n<p>As voice search becomes a bigger part of the web, the number of people that <strong>listen</strong> to the web will rise, so <strong>keep your content ready</strong>.</p>\n\n\n\n<p>Continuing with our shoelace example, here is how we would describe the step. &ldquo;Create a loop with on both ends of the shoelace, using around four-fifths of the shoelace for the loop. Make sure you are pulling the laces tight and holding the loop between your index finger and your thumb&rdquo;. As you see, the instructions are specific, simple, and easy to follow.</p>\n\n\n\n<h3 id=\"adding-new-steps\"><span class=\"number\">3.8</span>  Adding New Steps</h3>\n\n\n\n<p>Till now, we&rsquo;ve added a single step using the HowTo Block. But, you need to perform more than one step to finish a task most of the time. So, you&rsquo;ll need more steps inside your HowTo Block. To add another step, click the <strong>Add New Step</strong> button at the bottom of the last step.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"459\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20459\'%3E%3C/svg%3E\" alt=\"HowTo Add New Step\" class=\"wp-image-490882 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-add-new-step.jpg\"></figure><p>A blank step will be created below the last step.</p>\n\n\n\n<p>You will need to follow the same instructions and fill in the details in this step as well. Repeat the process of adding steps and filling in the information until you have described the process in sufficient detail.</p>\n\n\n\n<h3 id=\"deleting-and-hiding-steps\"><span class=\"number\">3.9</span>  Deleting Or Hiding Steps</h3>\n\n\n\n<p>The HowTo Block offers functionality to delete individual steps or hide them temporarily. Both of these are quite useful when updating old content, or even testing out content formats.</p>\n\n\n\n<p>To hide any step, click the <strong>eye icon</strong> on the top right of the step. When a step is hidden, it will be grayed out, and the icon will change as well.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"372\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20372\'%3E%3C/svg%3E\" alt=\"HowTo Hide Step\" class=\"wp-image-490886 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-hide-step.jpg\"></figure><p>To delete a step, click the <strong>trash icon</strong> next to the eye icon.</p>\n\n\n\n<h2 id=\"block-options\"><span class=\"number\">4</span>  Rank Math HowTo Block Options</h2>\n\n\n\n<p>Since the HowTo data is added as a block, it supports block-level customizations as well. Using this, we&rsquo;ve built some exclusive customization features to the HowTo Block both for the structure, and the styling. </p>\n\n\n\n<p><strong>Let us explain the customization options</strong>.</p>\n\n\n\n<h3><span class=\"number\">4.1</span>  How To Options (Structure)</h3>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-large is-resized\"><img loading=\"lazy\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20298%20493\'%3E%3C/svg%3E\" alt=\"HowTo Block Options\" class=\"wp-image-490894 lazy\" width=\"298\" height=\"493\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/rank-math-howto-block-options.jpg\"></figure></div>\n\n\n\n<p>The HowTo Options dictate how the structure of the elements. In simple words, it defines the HTML wrappers that are used the wrap the content. Here are the options.</p>\n\n\n\n<ul><li><strong>List Style</strong>: The steps in a HowTo are presented as a list. This option lets you choose whether the list is presented as an ordered list, an unordered list, or not a list.</li><li><strong>Title Wrapper</strong>: The step titles are displayed as heading on the page. This option lets you choose if the heading is H2, H3&hellip;upto H6. You can even ditch the headings and choose a  or as a wrapper.</li><li><strong>Main Image Size</strong>: This option lets you pick the size of the main image. You can choose between thumbnail, large, medium, and full size.</li><li><strong>Image Size</strong>: This option lets you pick the size of the images for the steps. You can choose between thumbnail, large, medium, and full size.</li></ul><h3><span class=\"number\">4.2</span>  Styling Options</h3>\n\n\n\n<p>You can style your HowTo by using the custom styling options built into Rank Math. Here are the options that you can configure and what they do.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"alignright size-large is-resized\"><img loading=\"lazy\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20298%20270\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-490898 lazy\" width=\"298\" height=\"270\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-block-custom-classes.jpg\"></figure></div>\n\n\n\n<ul><li><strong>Title Wrapper CSS Class(es)</strong>: Here, you can enter the CSS Class(es) that will be applied to the step titles.</li><li><strong>Content Wrapper CSS Class(es)</strong>: Here you can enter the CSS Class(es) that will be applied to the step descriptions</li><li><strong>List CSS Class(es)</strong>: Here, you can enter the CSS Class(es) that will be applied to the list containing the complete How-To.</li></ul><h2><span class=\"number\">5</span>  Previewing The HowTo</h2>\n\n\n\n<p>Once you&rsquo;ve added some content, you can use WordPress&rsquo;s preview feature to preview how the content in the HowTo will appear for the end-user. Here is an example output.</p>\n\n\n\n<figure class=\"wp-block-image size-large is-resized\"><img loading=\"lazy\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20860%20792\'%3E%3C/svg%3E\" alt=\"HowTo Schema\" class=\"wp-image-490911 lazy\" width=\"860\" height=\"792\" data-src=\"https://rankmath.com/wp-content/uploads/2020/03/howto-schema.jpg\"></figure><h2><span class=\"number\">6</span>  Important Things To Know About How To Schema</h2>\n\n\n\n<p>Although How-To structured data is fairly easy to understand and, thanks to Rank Math, very easy to implement &ndash; there are s<strong>everal things to keep in mind</strong> when using it. </p>\n\n\n\n<ul><li>You should not be using HowTo Schema for anything that violates Google&rsquo;s guidelines &ndash; this includes, hate speech, sexually explicit content, profanity, illegal activities, promoting dangerous or violent content, or harassment is against the guidelines. So, <strong>don&rsquo;t start writing HowTo guides about how to stalk people</strong>&hellip;</li><li>Make sure that every action needed to perform the task and achieve the desired result is properly marked up (and nothing else). Do not add an introduction, conclusions or personal experiences in the HowTo block steps.</li><li><strong>Do not add more than one HowTo block to the same page.</strong> </li><li>All the steps for the HowTo guide should be present on the same page as if it is distributed over multiple pages, Google may not consider your website for rich results (this also wouldn&rsquo;t make sense to do so logically).</li><li>The page itself must be specific to what the HowTo guide is about, do not include a HowTo section on a page about something very general. Instead, <strong>create a page dedicated to the HowTo guide</strong> that you can mark up using structured data. </li><li>It is highly recommended to include helpful images <strong>for each HowTo step</strong> but ensure that you are only doing so with images that are directly related to each specific step. </li><li><strong>Do not </strong>use HowTo Schema to advertise products and services. In simple terms, this means don&rsquo;t use HowTo structured data for a query where you simply advertise a product to achieve the desired result of the HowTo guide. In addition, the HowTo Schema should not be used for articles, blog content, or opinionated content &ndash;&nbsp;it should be reserved only for discrete, step-by-step instructions. </li></ul><h2 id=\"validating-how-to-schema\"><span class=\"number\">7</span>  Validating HowTo Schema</h2>\n\n\n\n<p>As is the case with other types of structured data, such as <a href=\"https://rankmath.com/blog/faq-schema\" class=\"rank-math-link\">FAQ Schema</a>, mistakes or any slight ommissions will result in your site not winning the rich snippet that we&rsquo;re all aiming for. Therefore, it goes without saying that <strong>it is extremely important to ensure that the structured data that you add is correct</strong>. </p>\n\n\n\n<p>Using the Rank Math plugin takes the guesswork out of the process, but validating the Schema is still an important part of your workflow&nbsp;&ndash;&nbsp;so here are the tools you need: </p>\n\n\n\n<ul><li><a href=\"https://rankmath.com/blog/faq-schema/#google-sdtt\" class=\"rank-math-link\">Google&rsquo;s Structured Data Testing Tool</a></li><li><a href=\"https://rankmath.com/blog/faq-schema/#google-rrtt\" class=\"rank-math-link\">Google&rsquo;s Rich Results Testing Tool</a></li></ul><h2 id=\"faq\"><span class=\"number\">8</span>  Frequently Asked Questions</h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1584004600555\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">I&rsquo;ve added the HowTo Schema on my pages. How do I check if they are properly implemented?</h3>\n<div class=\"rank-math-answer \"><p>Rank Math properly adds the tags, and you don&rsquo;t need to test them to confirm. But, if you want to do so anyway, you can test your page source code with the <a href=\"https://search.google.com/structured-data/testing-tool\">Google Structured Data Testing Tool</a> or test a live URL with the <a href=\"https://search.google.com/test/rich-results\">Google Rich Result Test</a>.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004606929\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">I&rsquo;ve added the How-to Schema to my posts. When can I expect them to appear in the search results?</h3>\n<div class=\"rank-math-answer \"><p>There is no set time when, or if, your page will start appearing as rich results, even if you have the correct markup. It is up to Google to include your website in the search results, and the factors they consider to do so are not made available publicly.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004620487\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">I see the rich results on my mobile phone, but not on my desktop, what&rsquo;s wrong?</h3>\n<div class=\"rank-math-answer \"><p>That is perfectly fine, as HowTo Rich Results are currently limited to mobile results only, and are not available on desktop results.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004628752\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Are adding images to the steps mandatory?</h3>\n<div class=\"rank-math-answer \"><p>No, but it is highly recommended, as it can give your website the edge in the results, as visual communication provides a  great experience than only text.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004639666\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Can I use the same image for all the HowTo Steps?</h3>\n<div class=\"rank-math-answer \"><p>No. Google encourages you to use images that are specific to each step, and repeating images just defeats the purpose of using images in the first place. If you don&rsquo;t have the right images, omit them, but please don&rsquo;t reuse images for multiple steps.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004651908\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Is it mandatory to add the final result image?</h3>\n<div class=\"rank-math-answer \"><p>It is not mandatory, but it is highly recommended. Images, especially the final image, play a huge role in improving the user experience in many ways. So, if you don&rsquo;t add the final image, but one of your competitors does, it is likely that Google may pick their website for the rich results instead of yours.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004661728\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Can I use the HowTo Block for recipes?</h3>\n<div class=\"rank-math-answer \"><p>No. Even though recipes are technically HowTo content, Google doesn&rsquo;t allow you to use the HowTo Structured-Data for recipes. It is recommended that you use the Recipe Structured Data for recipes instead. Don&rsquo;t worry, Rank Math supports Recipe Structured Data natively. <a href=\"https://rankmath.com/kb/rich-snippets/#recipe\" class=\"rank-math-link\">Click here to learn more about it</a>.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004670697\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Can any type of content be added with the HowTo Block?</h3>\n<div class=\"rank-math-answer \"><p>Mostly, yes. As long as the content qualifies as a How-To, you can use the HowTo Structured-Data. However, there are some restrictions from Google that you should be aware of. Google doesn&rsquo;t allow using the HowTo Structured-Data for advertising, so don&rsquo;t promote specific products inside the blocks. Also, the content must not be obscene, contain profanity, sexually explicit, or promote or display violence, promote illegal or dangerous activity, or have hate speech.</p>\n</div>\n</div>\n<div id=\"faq-question-1584004679592\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">How detailed should my steps be?</h3>\n<div class=\"rank-math-answer \"><p>There are no specific guidelines on how detailed your content needs to be, but we can make some reasonable assumptions. Since the content is about <strong>how</strong> to do certain things, make sure to include enough specifics so that there is no place of doubt. Second, make sure the content is friendly enough so that some unfamiliar with the process is able to follow along. Third, remember that many people might consume your content via voice, so make sure to make the text descriptive and easy to follow and not rely heavily on images for instructions.</p>\n</div>\n</div>\n</div>\n</div>\n\n\n<h2 id=\"conclusion\"><span class=\"number\">9</span>  Final Words &ndash;&nbsp;Start Taking Advantage of HowTo Schema </h2>\n\n\n\n<p>We hope that you found this guide useful in both understanding the importance of HowTo Schema as well as guiding you through the process of adding it to your pages. </p>\n\n\n\n<p><strong>Why not go through some of your existing content</strong> and see if any of it would qualify to be converted into a comprehensive HowTo guide using Rank Math&rsquo;s HowTo Schema block to drive more traffic to your site?</p>\n\n\n\n<p>If you have any questions or run into any problems when using Rank Math&rsquo;s HowTo Block, you&rsquo;re always more than welcome to get in touch with our dedicated support team by opening a ticket on the forum. <a class=\"rank-math-link rank-math-link\" href=\"http://support.rankmath.com/\">We have expert staff available 24/7 </a>and they&rsquo;d be more than happy to guide you through the process. </p>\n\n\n\n<p>Have any other questions about HowTo Schema or want to join the conversation? Tweet <a href=\"https://twitter.com/rankmathseo\" class=\"rank-math-link\">@rankmathseo</a>. &#128172;</p>\n\";s:9:\"protected\";b:0;}s:7:\"excerpt\";a:2:{s:8:\"rendered\";s:249:\"<p>In this article, we are going to show you exactly how you can add HowTo Schema using Rank Math&rsquo;s easy-to-use Gutenberg block. Thanks to Rank Math&rsquo;s HowTo Block adding structured data to your posts and pages has never been easier.</p>\n\";s:9:\"protected\";b:0;}s:6:\"author\";i:37;s:14:\"featured_media\";i:490921;s:14:\"comment_status\";s:4:\"open\";s:11:\"ping_status\";s:4:\"open\";s:6:\"sticky\";b:0;s:8:\"template\";s:0:\"\";s:6:\"format\";s:8:\"standard\";s:4:\"meta\";a:0:{}s:10:\"categories\";a:1:{i:0;i:1;}s:4:\"tags\";a:0:{}s:6:\"_links\";a:11:{s:4:\"self\";a:1:{i:0;a:1:{s:4:\"href\";s:47:\"https://rankmath.com/wp-json/wp/v2/posts/489163\";}}s:10:\"collection\";a:1:{i:0;a:1:{s:4:\"href\";s:40:\"https://rankmath.com/wp-json/wp/v2/posts\";}}s:5:\"about\";a:1:{i:0;a:1:{s:4:\"href\";s:45:\"https://rankmath.com/wp-json/wp/v2/types/post\";}}s:6:\"author\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:43:\"https://rankmath.com/wp-json/wp/v2/users/37\";}}s:7:\"replies\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:55:\"https://rankmath.com/wp-json/wp/v2/comments?post=489163\";}}s:15:\"version-history\";a:1:{i:0;a:2:{s:5:\"count\";i:4;s:4:\"href\";s:57:\"https://rankmath.com/wp-json/wp/v2/posts/489163/revisions\";}}s:19:\"predecessor-version\";a:1:{i:0;a:2:{s:2:\"id\";i:712169;s:4:\"href\";s:64:\"https://rankmath.com/wp-json/wp/v2/posts/489163/revisions/712169\";}}s:16:\"wp:featuredmedia\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:47:\"https://rankmath.com/wp-json/wp/v2/media/490921\";}}s:13:\"wp:attachment\";a:1:{i:0;a:1:{s:4:\"href\";s:54:\"https://rankmath.com/wp-json/wp/v2/media?parent=489163\";}}s:7:\"wp:term\";a:2:{i:0;a:3:{s:8:\"taxonomy\";s:8:\"category\";s:10:\"embeddable\";b:1;s:4:\"href\";s:57:\"https://rankmath.com/wp-json/wp/v2/categories?post=489163\";}i:1;a:3:{s:8:\"taxonomy\";s:8:\"post_tag\";s:10:\"embeddable\";b:1;s:4:\"href\";s:51:\"https://rankmath.com/wp-json/wp/v2/tags?post=489163\";}}s:6:\"curies\";a:1:{i:0;a:3:{s:4:\"name\";s:2:\"wp\";s:4:\"href\";s:23:\"https://api.w.org/{rel}\";s:9:\"templated\";b:1;}}}}i:2;a:24:{s:2:\"id\";i:476662;s:4:\"date\";s:19:\"2020-02-24T08:04:56\";s:8:\"date_gmt\";s:19:\"2020-02-24T15:04:56\";s:4:\"guid\";a:1:{s:8:\"rendered\";s:30:\"https://rankmath.com/?p=476662\";}s:8:\"modified\";s:19:\"2020-07-31T16:04:27\";s:12:\"modified_gmt\";s:19:\"2020-07-31T20:04:27\";s:4:\"slug\";s:10:\"faq-schema\";s:6:\"status\";s:7:\"publish\";s:4:\"type\";s:4:\"post\";s:4:\"link\";s:37:\"https://rankmath.com/blog/faq-schema/\";s:5:\"title\";a:1:{s:8:\"rendered\";s:40:\"FAQ Schema: A Practical (and EASY) Guide\";}s:7:\"content\";a:2:{s:8:\"rendered\";s:36540:\"\n<p><strong>Talented SEOs all over the world are now using <a href=\"https://developers.google.com/search/docs/data-types/faqpage\" target=\"_blank\" aria-label=\"FAQ Schema (opens in a new tab)\" rel=\"noreferrer noopener\" class=\"rank-math-link\">FAQ Schema</a> to their advantage because it&rsquo;s proven to be extremely effective. </strong></p>\n\n\n\n<p>Have you ever wondered how you can use FAQs to increase your click-through rate and drive more organic traffic? &#128200;</p>\n\n\n\n<p>Well, you&rsquo;ve come to the right place &ndash; because, in this post, we&rsquo;re going to dive deep, look at why this matters and how you can get started&hellip;</p>\n\n\n\n<!--more-->\n\n\n\n<div id=\"toc\">\n<h2>In this FAQ Page Schema guide, we&rsquo;ll take a look at:</h2>\n<ul><li><a href=\"#what-is-faq-schema\">1. What is FAQ Schema Markup?</a></li><li><a href=\"#benefits\">2. The Benefits of Adding FAQ Schema</a></li><li><a href=\"#how-to-add-faq-schema\">3. How Do I Add FAQ Schema in WordPress?</a></li><li><a href=\"#validating-faq-schema\">4. Validating FAQ Schema</a></li><li><a href=\"#ping-google\">5. Notify Google To Crawl It</a></li><li><a href=\"#finding-questions\">6. Finding Questions for FAQ Schema</a></li><li><a href=\"#best-practices\">7. FAQ Schema &ndash; Best Practices &amp; Tips</a></li><li><a href=\"#8-frequently-asked-questions\">8. Frequently Asked Questions</a></li><li><a href=\"#conclusion\">9. Summary: Take Advantage of FAQ Schema To Drive Organic Traffic</a></li></ul></div>\n\n\n\n<h2 id=\"what-is-faq-schema\"><span class=\"number\">1</span>  What is FAQ Schema Markup?</h2>\n\n\n\n<p>An FAQ page (a frequently asked questions page) is a page that contains <strong>a list of questions and their respective answers</strong> with regard to a particular topic. When such pages are properly marked up, they may be eligible to appear as a &ldquo;rich result&rdquo; (otherwise known as a rich snippet) in Search as well as be used by <a href=\"https://assistant.google.com/\" class=\"rank-math-link\">Google Assistant</a>.</p>\n\n\n\n<p>Here&rsquo;s an example of what an FAQ rich snippet may look like:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"508\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20508\'%3E%3C/svg%3E\" alt=\"FAQ Schema Example\" class=\"wp-image-481439 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/serp-faq-schema-example-rank-math.jpg\"></figure><p>Now that you know what FAQPage Schema is, let&rsquo;s dive deeper into how this is useful to you and what the benefits of using structured data actually are.</p>\n\n\n\n<h2 id=\"benefits\"><span class=\"number\">2</span>  The Benefits of Adding FAQ Schema</h2>\n\n\n\n<p>Winning FAQ rich snippets is beneficial as it helps increase the overall visibility of your website since it <strong>occupies additional space in search engine results pages</strong> and provides users with a method of interaction. </p>\n\n\n\n<p>But that&rsquo;s just the beginning, here are the other benefits: </p>\n\n\n\n<ul><li><strong>Increased visibility </strong>&ndash; more content is shown to searchers from a single site (potentially yours) and links are inserted to relevant answers to commonly asked questions. </li><li><strong>Eligibility for Voice Search Actions </strong>&ndash; Making use of FAQPage Schema can also make your site eligible for an <a class=\"rank-math-link\" href=\"https://developers.google.com/actions/content-actions/faq\">action that is made available in the Google Assistant</a>. This can potentially help your site be the source of answers for people using voice search to ask questions.</li></ul><p><mark><strong>FAQ Schema is particularly helpful for articles that are ranking on the first page, but not the first three positions.</strong></mark></p>\n\n\n\n<p>By design &ndash; a page eligible for the FAQ rich results <strong>gets additional space below the regular search snippet</strong> in the form of FAQ tabs added using in-page markup. As you&rsquo;d expect, the additional space in Google search results <a href=\"https://www.coywolf.news/seo/schema-faqpage-google-traffic/\" class=\"rank-math-link\">tends to equate to more clicks</a> to your site, consequently a better click-through rate.</p>\n\n\n\n<h2 id=\"how-to-add-faq-schema\"><span class=\"number\">3</span>  How Do I Add FAQ Schema in WordPress?</h2>\n\n\n\n<p>So, now that we know why structured data is important &ndash; let&rsquo;s answer the next burning question: <strong>how can people like me and you make use of this?</strong></p>\n\n\n\n<h3><span class=\"number\">3.1</span>  Install Rank Math</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1616\" height=\"824\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201616%20824\'%3E%3C/svg%3E\" alt=\"add-new-plugin-wordpress\" class=\"wp-image-477536 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/add-new-plugin.png\"><figcaption>Add New Plugin WordPress</figcaption></figure><p>Once you&rsquo;ve logged into your WordPress website, hover over the plugins menu and proceed to click <em><strong>Add New</strong></em>. This will take you to the page where you can install new plugins &ndash;&nbsp;now, <strong>search for <em>Rank Math.</em></strong></p>\n\n\n\n<p>And then you&rsquo;ll see the following &ndash;&nbsp;so, as you might&rsquo;ve guessed, click <strong><em>Install Now.</em></strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1594\" height=\"808\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201594%20808\'%3E%3C/svg%3E\" alt=\"install-rank-math\" class=\"wp-image-477535 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/install-rank-math.png\"><figcaption>Install Rank Math</figcaption></figure><p>Once you&rsquo;ve installed Rank Math, you&rsquo;ll be greeted by the setup wizard which we&rsquo;ve designed to make it as easy as possible to <strong>fine-tune your site&rsquo;s settings</strong>. However, if you&rsquo;re already using some other SEO plugin on your site, migrating all of the existing options is extremely easy.</p>\n\n\n\n<p>If you&rsquo;d like a more in-depth explanation of how to set up and migrate to Rank Math, we recommend reading our <a class=\"rank-math-link rank-math-link\" href=\"https://rankmath.com/kb/how-to-setup/\">getting started guide here</a>. </p>\n\n\n\n<h3><span class=\"number\">3.2</span>  Add An FAQ Using the WordPress Block Editor</h3>\n\n\n\n<p>Now that you&rsquo;ve installed and activated Rank Math, adding an FAQ block using the WordPress Gutenberg Block editor couldn&rsquo;t be easier. </p>\n\n\n\n<p>While writing a post or editing a page, simply click the plus icon that is present on the left of the content area to add a block. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1488\" height=\"454\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201488%20454\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-477801 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/add-faq-block-gutenberg.png\"></figure><p>Clicking this will allow you to select from a list of available blocks that will depend on the plugins installed on your site. If you&rsquo;ve installed Rank Math, you&rsquo;ll be able to <strong>choose the FAQ Block</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"833\" height=\"540\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20833%20540\'%3E%3C/svg%3E\" alt=\"Rank Math FAQ Block in Block Editor\" class=\"wp-image-480090 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/rank-math-faq-block-in-block-editor.gif\"></figure><p>Now that you&rsquo;ve inserted the block, this is what you&rsquo;ll see:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2460\" height=\"1742\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202460%201742\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-477557 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/faq-schema-options.png\"></figure><p>As expected, initially and most importantly you&rsquo;ll be able to easily insert the question text and the answer content to that question respectively as well as an image. </p>\n\n\n\n<p>In addition to this, there is also a <strong>range of block options available</strong> to you such as the ability to change the list style, title wrapper, image sizing and more&hellip;</p>\n\n\n\n<p>You can learn about <a href=\"https://rankmath.com/kb/faq-schema-block/\" class=\"rank-math-link\">how to use the FAQ Block by Rank Math</a> in more detail on our Knowledge Base. </p>\n\n\n\n<p>Due to a limitation that is currently in place with Gutenberg, if you would like images that are added with the Rank Math FAQ block to appear in your sitemap, you can do so by inserting an <strong>Inline Image</strong> instead.</p>\n\n\n\n<p>However, this may change and become easier in the future. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"609\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20609\'%3E%3C/svg%3E\" alt=\"Rank Math FAQ block Inline Image option\" class=\"wp-image-480830 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/faq-schema-with-inline-image.jpg\"></figure><p>Unlike other plugins that have made attempts to implement FAQ blocks, with Rank Math you thankfully <strong>aren&rsquo;t limited to just one block per page</strong>, you can add as many as your content requires (or heart desires &#128521;).</p>\n\n\n\n<h3 id=\"faq-classic-editor\"><span class=\"number\">3.3</span>  Adding FAQ Schema using the WordPress Classic Editor</h3>\n\n\n\n<p>If you prefer to use the Classic Editor, it is important to note that the process of adding FAQ Schema will be slightly different. </p>\n\n\n\n<p>Using <a href=\"https://saijogeorge.com/json-ld-schema-generator/faq/\" class=\"rank-math-link\">Saijo George&rsquo;s JSON-LD FAQ Schema Generator</a>, you can manually generate the markup required as shown below. Then, simply click the <strong>Copy FAQ Schema </strong>button to copy the generated code.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2534\" height=\"796\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202534%20796\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-478895 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/copy-faq-schema.png\"></figure><p>And simply head to the WordPress Classic Editor, switching from <strong>Visual </strong>to <strong>Text</strong> and then simply pasting the generated HTML code into this area. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2744\" height=\"702\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202744%20702\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-478896 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/insert-markup-html-classic-editor.png\"></figure><p>The limitation with this method is that you are limited to adding the FAQ section just once, so we personally recommend that you make the necessary plans and arrangements to switch to the Block Editor.</p>\n\n\n\n<p>It is also important to note that if you use this method, you not only have to add the JSON-LD markup, as shown above, but you <strong>also need to add the exact same questions and answers to the webpage&rsquo;s visual HTML</strong> as well since Google requires all FAQs to be visible to the visitors as well. </p>\n\n\n\n<h2 id=\"validating-faq-schema\"><span class=\"number\">4</span>  Validating FAQ Schema</h2>\n\n\n\n<p>Mistakes or slight discrepancies will likely result in your site not winning the rich snippet you&rsquo;re aiming for. It is important to ensure that the structured data you added is correct. </p>\n\n\n\n<p>Using a plugin like Rank Math significantly reduces the likelihood of this happening since it <strong>takes the guesswork out of the process</strong>. That being said, validating the Schema is still important &ndash; so, here&rsquo;s how:</p>\n\n\n\n<ul><li><a href=\"#google-sdtt\" class=\"rank-math-link\">Google&rsquo;s Structured Data Testing Tool</a></li><li><a href=\"#google-rrtt\" class=\"rank-math-link\">Google&rsquo;s Rich Results Testing Tool</a></li></ul><h3 id=\"google-sdtt\">Google&rsquo;s Structured Data Testing Tool</h3>\n\n\n\n<p>With <a href=\"https://search.google.com/structured-data/testing-tool/u/0/\" class=\"rank-math-link\">Google&rsquo;s Structured Data Testing Tool</a>, there are two ways to test a page. You can either paste in the URL of the page that you would like to test or you can head to the webpage, right-click in Google Chrome and click <strong>View Page Source</strong> and then copy the code. </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"900\" height=\"461\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20900%20461\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-483523 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/sdtt-faq-Schema.jpg\"></figure><p>In this case, we&rsquo;ve used the <strong>Fetch URL </strong>method by pasting in a URL as shown above and then clicking <strong>Run Test</strong>. Shortly after clicking &ldquo;run test&rdquo;, if you entered a valid URL, you&rsquo;ll be greeted by a page much like the one shown below: </p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"900\" height=\"425\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20900%20425\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-483527 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/sdtt-faq-page-schema-test.jpg\"></figure><p>In the above case, you can see an example of what the results of the test would look like if there is FAQPage Schema present on the page with <strong>zero errors and zero warnings</strong> &ndash;&nbsp;as shown more closely below:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"900\" height=\"482\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20900%20482\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-483532 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/faq-Schema-no-errors.jpg\"></figure><h3 id=\"google-rrtt\">Google&rsquo;s Rich Results Testing Tool</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"900\" height=\"506\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20900%20506\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-483535 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/faqs-eligible-for-rich-results.jpg\"></figure><p>You can run the FAQ page through the <a href=\"https://search.google.com/test/rich-results\" class=\"rank-math-link\">rich results testing tool</a> to see the <a class=\"rank-math-link rank-math-link rank-math-link\" href=\"https://support.google.com/webmasters/answer/7445569#supported_types\">types of Schema</a> your post is eligible for. </p>\n\n\n\n<h2 id=\"ping-google\"><span class=\"number\">5</span>  Notify Google To Crawl It</h2>\n\n\n\n<p>Next, since you&rsquo;ve gone through all of this effort &ndash; you&rsquo;ll want to make sure that Google actually picks up the changes. </p>\n\n\n\n<p><strong>Once you&rsquo;ve validated the FAQ schema of your page</strong>, head to the <a href=\"https://search.google.com/search-console\" target=\"_blank\" aria-label=\"Google Search Console (opens in a new tab)\" rel=\"noreferrer noopener\" class=\"rank-math-link\">Google Search Console</a>. </p>\n\n\n\n<p>Then, enter your URL as shown below to inspect it.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2350\" height=\"878\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202350%20878\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-477882 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/gsc-faq-update.png\"></figure><p>This will then take you to a page that looks like this. Evidently, it will vary based on the state of the page and whether or not the URL is already in Google&rsquo;s index. Regardless, once you&rsquo;ve added your FAQ schema, click <strong>Request Indexing </strong>as highlighted below:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"3334\" height=\"730\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%203334%20730\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-477886 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/gsc-faq-update-1.png\"></figure><p>This will ping Google to update and recognize changes made to your page, or if it isn&rsquo;t already in the index, <strong>it will signal to Google</strong> that &ndash;&nbsp;if possible &ndash; the page should be queued for indexing.</p>\n\n\n\n<p>If your posts or pages with FAQ Schema also contain LiveStreaming or JobPosting markup, you should consider <a class=\"rank-math-link rank-math-link rank-math-link\" href=\"https://rankmath.com/blog/google-indexing-api/\"><strong>using Google&rsquo;s Indexing API to speed this process up</strong></a>.</p>\n\n\n\n<h2 id=\"finding-questions\"><span class=\"number\">6</span>  Finding Questions for FAQ Schema</h2>\n\n\n\n<p>Now that we&rsquo;ve gone through the technicalities of the process and how you can use the Rank Math plugin to make it even easier, let&rsquo;s take a look at how to <strong>actually find questions you can use in your content</strong>. </p>\n\n\n\n<p>There are a number of ways you can do this &ndash;&nbsp;we&rsquo;ll take a look at our favorites and the ones we consider the best:</p>\n\n\n\n<ul><li><a class=\"rank-math-link rank-math-link\" href=\"#people-also-ask\">Google&rsquo;s <em>People Also Ask </em>section</a></li><li><a class=\"rank-math-link\" href=\"#quora\">Quora</a></li><li><a class=\"rank-math-link\" href=\"#answer-the-public\">Answer The Public</a></li><li><a class=\"rank-math-link\" href=\"#internal-search\">Internal site search</a></li></ul><h3 id=\"people-also-ask\"><span class=\"number\">6.1</span>  Google Autocomplete &amp; <em>People Also Ask</em> Section</h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1628\" height=\"852\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201628%20852\'%3E%3C/svg%3E\" alt=\"google-wordpress-related-questions\" class=\"wp-image-478923 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/wordpress-related-questions-google.png\"></figure><p><strong>Google&rsquo;s <em>People Also Ask </em>section</strong> is as close to the source of information as we could possibly get. This is an area that Google uses to suggest things that people commonly also ask after searching for a specific search term. </p>\n\n\n\n<p>When present in the search engine results page for the keyword you&rsquo;re trying to rank for, this is the <strong>best way to find out </strong>how to craft your content and make it as helpful to readers as possible. </p>\n\n\n\n<p>Similarly, autocomplete in search can be used to find questions, as shown below.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"1410\" height=\"1250\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%201410%201250\'%3E%3C/svg%3E\" alt=\"wordpress-google-autocomplete\" class=\"wp-image-478921 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/google-autocomplete.png\"></figure><p>To find the best type of questions, depending on the keyword you&rsquo;re targeting, using different question modifiers such as <em>&ldquo;how, what, when, why, where, who, which, will, are&rdquo; </em>will help you find more suitable questions&hellip;</p>\n\n\n\n<h3 id=\"quora\"><span class=\"number\">6.2</span>  <strong>Quora</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2102\" height=\"1166\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202102%201166\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-478918 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/quora-wordpress-questions.png\"></figure><p>An alternative to using Google&rsquo;s search functionality and related questions directly is browsing Quora. </p>\n\n\n\n<p>If we continue with the <em><strong>WordPress</strong></em> example, you&rsquo;ll see that when we search for the keyword, we&rsquo;re met by questions that people have posted. </p>\n\n\n\n<p>Using the questions here, we&rsquo;d recommend focusing on the more popular ones (i.e. the ones with more answers and views) since those are more commonly asked and searched for and then you can <strong>work your way through other questions</strong> that would make sense addressing in your content. </p>\n\n\n\n<h3 id=\"answer-the-public\"><span class=\"number\">6.3</span>  <strong>Answer The Public</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2738\" height=\"1420\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202738%201420\'%3E%3C/svg%3E\" alt=\"answer-the-public-wordpress-questions\" class=\"wp-image-478919 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/answer-the-public-wordpress-questions.png\"></figure><p>And last, but definitely not least is <a href=\"https://answerthepublic.com/\" class=\"rank-math-link\">Answer The Public</a>. Similarly, entering a keyword such as <strong><em>WordPress</em></strong><em> </em>which we used in the above two examples, you&rsquo;ll be presented with 100s of questions suitable for your content.</p>\n\n\n\n<h3 id=\"internal-search\"><span class=\"number\">6.4</span>  <strong>Internal Site Search</strong></h3>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"2120\" height=\"724\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%202120%20724\'%3E%3C/svg%3E\" alt=\"\" class=\"wp-image-478444 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/internal-site-search.png\"></figure><p>If your site allows visitors to search for content, and you have Google Analytics installed, you may be able to find suitable questions by using the method described in <a class=\"rank-math-link rank-math-link\" href=\"https://ahrefs.com/blog/google-analytics-for-seo/#find-keyword-opportunities-from-site-search\">this post by Ahrefs on how to find keyword opportunities</a> from site search. </p>\n\n\n\n<h2 id=\"best-practices\"><span class=\"number\">7</span>  FAQ Schema &ndash;&nbsp;Best Practices &amp; Tips</h2>\n\n\n\n<h3><span class=\"number\">7.1</span>  FAQ Schema Invalid Use Cases</h3>\n\n\n\n<ol><li>A forum where answers consist of user-generated content all of which answer a single question.</li><li>Any page where users can submit multiple answers to a single question.</li><li>Making use of an FAQ Page for advertising purposes.</li><li>Truncating questions and answers so that they cannot be displayed in full (i.e. display full text of the question).</li><li>Usage with FAQs where either questions or answers contain anything that may be construed as sexually explicit, graphically violent, dangerous or illegal content and so forth.</li><li>The questions themselves aren&rsquo;t visible to the user on the source page.</li></ol><p>Google themselves also advise websites that have FAQ content that is repetitive (i.e. the exact same questions and answers appear on multiple pages on your website), to mark up a single instance of that FAQ for your entire website. </p>\n\n\n\n<h3><span class=\"number\">7.2</span>  FAQ Schema Valid Use Cases</h3>\n\n\n\n<ol><li>A Frequently Asked Questions page that was written by an author that does not allow for users to submit their own answers.</li><li>A product support page that lists commonly asked questions and their exact answers (also while not allowing users to submit their own answers).</li><li>FAQs that follow <a href=\"https://developers.google.com/search/docs/data-types/faqpage#content-guidelines\" class=\"rank-math-link\">Google&rsquo;s FAQ content guidelines</a>.</li></ol><h3><span class=\"number\">7.3</span>  FAQPage Schema Best Practices</h3>\n\n\n\n<p>We would recommend adding a minimum of 3 FAQs, where 5 or more are recommended. This is because doing so would maximize the amount of real estate, space that your website visually occupies in search engine results page as this would, therefore, increase the likelihood of getting searchers to click-through to your website.</p>\n\n\n\n<p>If more than 10 are used on any given page, then the number of FAQs shown in search results would be truncated, as shown here in the example below:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"960\" height=\"856\" src=\"data:image/svg+xml,%3Csvg%20xmlns=\'http://www.w3.org/2000/svg\'%20viewBox=\'0%200%20960%20856\'%3E%3C/svg%3E\" alt=\"10 FAQ Schema Limit in Google SERPs\" class=\"wp-image-481281 lazy\" data-src=\"https://rankmath.com/wp-content/uploads/2020/02/10-faq-schema-limit-rank-math.jpg\"></figure><p>It is, however, worth noting that Google tends to only show the first three frequently asked questions in search and hides the remaining number until the <strong>Show More </strong>button is pressed. </p>\n\n\n\n<p>Adding relevant internal links to your answers is highly recommended as they will be clickable from within the rich snippet. This can be a <strong>clever internal linking strategy </strong>since the FAQPage Schema may not result in capturing a click if the rich snippet answers a searcher&rsquo;s question immediately, but if you link to a relevant page that they may be interested in, they are more likely to click-through to your site to learn more. </p>\n\n\n\n<p>This technique should only be used within reason. All links to other pages in <strong>answer text should actually provide value to searchers</strong> and must also be added to the content on the page. As mentioned earlier, the visible content on the page must match the Schema code exactly.</p>\n\n\n\n<ul><li>Only add relevant FAQs.</li><li>Keep it simple, short and accurate: for the best results, answers to FAQs tend to fall in the range of 160-200 characters.</li><li>Answers must fully answer questions and try to answer the question fully as early on as possible (i.e. <strong>No &hellip; [explanation]</strong>).</li><li>Write FAQs to convince users to click links (only when relevant, not in a spammy way).</li><li>Always <a href=\"#best-practices\" class=\"rank-math-link\">follow Google&rsquo;s guidelines</a>.</li></ul><p><strong>Recommended:</strong> <a class=\"rank-math-link rank-math-link\" href=\"https://herothemes.com/blog/5-simple-ways-write-perfect-answers-faqs/\">Writing The Perfect Answers to Frequently Asked Questions</a></p>\n\n\n\n<h2><span class=\"number\">8</span>  Frequently Asked Questions</h2>\n\n\n<div id=\"rank-math-faq\" class=\"rank-math-block\">\n<div class=\"rank-math-list \">\n<div id=\"faq-question-1582514180056\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Which Structured Data Format Is Better? (JSON-LD vs Microdata)</h3>\n<div class=\"rank-math-answer \"><p>When John Mueller &ndash;&nbsp;Webmaster Trends Analyst at Google &ndash; was asked what type of Schema markup Google prefers, he answered stating, <strong><em>&ldquo;We currently prefer JSON-LD Markup. I think most of the new structured data that are kind of come out for JSON-LD first. So that&rsquo;s what we prefer.&rdquo;</em></strong></p>\n</div>\n</div>\n<div id=\"faq-question-1582514197914\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Which Schema Type Is Better &ndash;&nbsp;FAQ or Q&amp;A?</h3>\n<div class=\"rank-math-answer \"><p><a href=\"https://developers.google.com/search/docs/data-types/faqpage\" class=\"rank-math-link\">FAQ</a> and <a href=\"https://developers.google.com/search/docs/data-types/qapage\" class=\"rank-math-link\">Q&amp;A</a> Schema are two different types of structured data &ndash;&nbsp;both of which can be used to get rich results for your pages. However, they do have slightly different use cases. </p>\n<p>If you have a page where multiple users can submit alternative answers to questions (such as a forum) then you would use Q&amp;A Schema. </p>\n<p>However, if you have a page with questions and specific answers to those questions all around the same topic, it would make sense to use FAQ Schema (as you might&rsquo;ve guessed, this page uses FAQ Schema). </p>\n</div>\n</div>\n<div id=\"faq-question-1582514209384\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Will Schema Get Me To Rank For <em>People Also Ask </em>And <em>Features Snippets</em>?</h3>\n<div class=\"rank-math-answer \"><p>Unfortunately, even if you have added the required Schema, <a href=\"https://developers.google.com/search/docs/guides/sd-policies\" class=\"rank-math-link\">Google does not guarantee that your structured data will appear in search</a> &ndash; this is also regardless of whether the page has been validated according to the Structured Data Testing Tool. </p>\n</div>\n</div>\n<div id=\"faq-question-1582514219537\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Will Structured Data Make My Site Accessible To Voice Search?</h3>\n<div class=\"rank-math-answer \"><p>Structured data, specifically FAQ Schema are extremely helpful in making your site more accessible to voice search. It is not only a good SEO practice overall but it actually helps Google feature elements of your content in various places of search as well as voice search. This is because, currently, the majority of answers to questions made using voice search are taken from featured snippets.</p>\n</div>\n</div>\n<div id=\"faq-question-1582514240563\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">What is FAQPage Schema?</h3>\n<div class=\"rank-math-answer \"><p>FAQPage Schema is structured data/markup that indicates to Google that the page has a section with Frequently Asked Questions (FAQs) and the respective answers to the questions. </p>\n</div>\n</div>\n<div id=\"faq-question-1582514254621\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">How can I get FAQ rich results in Google?</h3>\n<div class=\"rank-math-answer \"><p>To win FAQ rich snippets for your website, you&rsquo;ll need to add FAQPage Schema to your site which is extremely to do as described in <a href=\"https://rankmath.com/blog/faq-schema#how-to-add-faq-schema\" class=\"rank-math-link\">this detailed guide</a>. </p>\n</div>\n</div>\n<div id=\"faq-question-1582514263757\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Will Emojis And HTML Tags Work With FAQPage Schema?</h3>\n<div class=\"rank-math-answer \"><p>Yes, Google officially states that they accept HTML tags and emojis, as well as other Unicode characters, seem to be accepted. </p>\n</div>\n</div>\n<div id=\"faq-question-1582514286698\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Do FAQ Snippets Work On Mobile And Desktop?</h3>\n<div class=\"rank-math-answer \"><p>Yes, FAQs appear in Google Search on both desktop and mobile devices.</p>\n</div>\n</div>\n<div id=\"faq-question-1582514292412\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">What Is The Risk Involved With FAQ Schema?</h3>\n<div class=\"rank-math-answer \"><p>It is important to note that when implementing Schema, you may end up creating a situation where searchers get the answers they need from within the search results and never end up clicking through to your website. Obviously, this would be less-than-ideal and is something that should be considered.  </p>\n</div>\n</div>\n<div id=\"faq-question-1582514300900\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">I&rsquo;m Ranking #2 &ndash;&nbsp;Where Are My FAQs?</h3>\n<div class=\"rank-math-answer \"><p>There are a number of reasons your site may not be eligible for the FAQ rich snippet. Most notably, due to the increased usage, Google has now decided to filter out results when it considers the query match to not be relevant to the content on your page if you are, in some way, breaching the guidelines for the implementation (i.e. your content is too promotional). </p>\n<p>There may also be a technical issue with your implementation which is why it is extremely important to use <a href=\"#google-rrtt\" class=\"rank-math-link\">Google&rsquo;s Rich Results Testing Tool</a> and <a href=\"#google-sdtt\" class=\"rank-math-link\">Structured Data Testing Tool</a> to double-check.</p>\n<p>And last, but certainly not least, your FAQs also won&rsquo;t show up if the data that you&rsquo;ve added as Schema is not visible on the page itself. If you want rich results for your page, you <strong>absolutely</strong> <strong>must</strong> have the same questions and answers displayed in the page content. </p>\n</div>\n</div>\n<div id=\"faq-question-1582514305669\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">How Many FAQ Rich Results Can Appear In The SERP At The Same Time?</h3>\n<div class=\"rank-math-answer \"><p>Currently, only three FAQ rich results are displayed at any given time on a single search engine results page (SERP). The rich result will have a toggle link to show more FAQs for that specific webpage (if available). </p>\n</div>\n</div>\n<div id=\"faq-question-1582514339119\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Can FAQ Markup Be Added To Non-FAQ Pages Like My Homepage?</h3>\n<div class=\"rank-math-answer \"><p>Technically, no. While you can add the markup to your homepage, you will not earn FAQ rich results for your homepage so <strong>we wouldn&rsquo;t recommend taking the time to do so</strong>. This is evidently quite unfortunate for single-page applications&hellip;</p>\n<p>In addition to this, you also are extremely unlikely to earn the FAQ rich result in combination with other snippets such as the review snippet. Although, this would be nice. </p>\n</div>\n</div>\n<div id=\"faq-question-1582514370196\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Should I markup the entire question and answer, even if it&rsquo;s really long?</h3>\n<div class=\"rank-math-answer \"><p>Google officially suggests that the structured data markup wholly includes the entire text of each question and answer. However, some webmasters have reported that for extremely long-form answers, they chose to <strong>limit their answers to the most important information</strong> and found during testing that it still works.</p>\n</div>\n</div>\n<div id=\"faq-question-1582514375327\" class=\"rank-math-list-item\">\n<h3 class=\"rank-math-question \">Can I Use FAQ Schema For FAQ Pages That Link Out To Separate Pages For Each Question?</h3>\n<div class=\"rank-math-answer \"><p>No, this simply wouldn&rsquo;t work. All of the questions (and their respective answers) must be listed on the page that contains the structured data. This means that the content itself must actually present in the page&rsquo;s HTML so it is visible by users and can also be rendered by search engines.</p>\n</div>\n</div>\n</div>\n</div>\n\n\n<h2 id=\"conclusion\"><span class=\"number\">9</span>  Summary: Take Advantage of FAQ Schema To Drive Organic Traffic</h2>\n\n\n\n<p>Making effective use of FAQ structured data can help <strong>increase the visibility of your website</strong>. And, especially with the help of the Rank Math WordPress plugin, it&rsquo;s something that&rsquo;s both simple &amp; easy to implement across all of your WordPress websites today.</p>\n\n\n\n<p>It is worth noting that there is some debate surrounding the use of structured data markup and rich snippets. Earlier in the article, we mentioned how <strong>providing too much information in your answers can inevitably result in the dreaded &ldquo;no-click&rdquo; searches</strong>. Simply because searchers find the information they&rsquo;re looking for on the search engine results pages without even visiting your page. </p>\n\n\n\n<p>However, we definitely still recommend testing out and using the FAQPage Schema, because the reality is that if you don&rsquo;t, <strong>one of your competitors likely will</strong>, as a result of which, you&rsquo;ll just end up not ranking, not answering the searcher&rsquo;s question and not getting them to visit your site anyway. </p>\n\n\n\n<p>So, if you do aim to earn rich snippets, we encourage you to proceed to <strong>use the Google Search Console Performance report</strong> to compare the average click-through rate with vs. without the rich snippet present. </p>\n\n\n\n<p>Have any other questions about FAQPage Schema or want to join the conversation? Tweet <a href=\"https://twitter.com/rankmathseo\">@rankmathseo</a>. &#128172;</p>\n\";s:9:\"protected\";b:0;}s:7:\"excerpt\";a:2:{s:8:\"rendered\";s:362:\"<p>Talented SEOs all over the world are now using FAQ Schema to their advantage because it&rsquo;s proven to be extremely effective. Have you ever wondered how you can use FAQs to increase your click-through rate and drive more organic traffic? &#128200; Well, you&rsquo;ve come to the right place &ndash; because, in this post, we&rsquo;re going [&hellip;]</p>\n\";s:9:\"protected\";b:0;}s:6:\"author\";i:37;s:14:\"featured_media\";i:479715;s:14:\"comment_status\";s:4:\"open\";s:11:\"ping_status\";s:4:\"open\";s:6:\"sticky\";b:0;s:8:\"template\";s:0:\"\";s:6:\"format\";s:8:\"standard\";s:4:\"meta\";a:0:{}s:10:\"categories\";a:1:{i:0;i:1;}s:4:\"tags\";a:0:{}s:6:\"_links\";a:11:{s:4:\"self\";a:1:{i:0;a:1:{s:4:\"href\";s:47:\"https://rankmath.com/wp-json/wp/v2/posts/476662\";}}s:10:\"collection\";a:1:{i:0;a:1:{s:4:\"href\";s:40:\"https://rankmath.com/wp-json/wp/v2/posts\";}}s:5:\"about\";a:1:{i:0;a:1:{s:4:\"href\";s:45:\"https://rankmath.com/wp-json/wp/v2/types/post\";}}s:6:\"author\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:43:\"https://rankmath.com/wp-json/wp/v2/users/37\";}}s:7:\"replies\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:55:\"https://rankmath.com/wp-json/wp/v2/comments?post=476662\";}}s:15:\"version-history\";a:1:{i:0;a:2:{s:5:\"count\";i:3;s:4:\"href\";s:57:\"https://rankmath.com/wp-json/wp/v2/posts/476662/revisions\";}}s:19:\"predecessor-version\";a:1:{i:0;a:2:{s:2:\"id\";i:598597;s:4:\"href\";s:64:\"https://rankmath.com/wp-json/wp/v2/posts/476662/revisions/598597\";}}s:16:\"wp:featuredmedia\";a:1:{i:0;a:2:{s:10:\"embeddable\";b:1;s:4:\"href\";s:47:\"https://rankmath.com/wp-json/wp/v2/media/479715\";}}s:13:\"wp:attachment\";a:1:{i:0;a:1:{s:4:\"href\";s:54:\"https://rankmath.com/wp-json/wp/v2/media?parent=476662\";}}s:7:\"wp:term\";a:2:{i:0;a:3:{s:8:\"taxonomy\";s:8:\"category\";s:10:\"embeddable\";b:1;s:4:\"href\";s:57:\"https://rankmath.com/wp-json/wp/v2/categories?post=476662\";}i:1;a:3:{s:8:\"taxonomy\";s:8:\"post_tag\";s:10:\"embeddable\";b:1;s:4:\"href\";s:51:\"https://rankmath.com/wp-json/wp/v2/tags?post=476662\";}}s:6:\"curies\";a:1:{i:0;a:3:{s:4:\"name\";s:2:\"wp\";s:4:\"href\";s:23:\"https://api.w.org/{rel}\";s:9:\"templated\";b:1;}}}}}','no'),(318,'WPLANG','','yes'),(319,'new_admin_email','casey.milne@eatbuildplay.com','yes'),(320,'_transient_random_seed','2a8b669210512b08fbd7154d98e025cc','yes'),(321,'adminhash','a:2:{s:4:\"hash\";s:32:\"188dd599352467f8cbf6a0c64494df8e\";s:8:\"newemail\";s:28:\"casey.milne@eatbuildplay.com\";}','yes'),(352,'_transient_health-check-site-status-result','{\"good\":\"14\",\"recommended\":\"4\",\"critical\":\"2\"}','yes'),(392,'nav_menu_options','a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}','yes'),(399,'_site_transient_timeout_php_check_90e738eca301c4d89366b1a4d15fe37f','1610140311','no'),(400,'_site_transient_php_check_90e738eca301c4d89366b1a4d15fe37f','a:5:{s:19:\"recommended_version\";s:3:\"7.4\";s:15:\"minimum_version\";s:6:\"5.6.20\";s:12:\"is_supported\";b:1;s:9:\"is_secure\";b:1;s:13:\"is_acceptable\";b:1;}','no'),(402,'_site_transient_timeout_browser_2c129f86f872c5672a380bd7ea7a2cad','1610140753','no'),(403,'_site_transient_browser_2c129f86f872c5672a380bd7ea7a2cad','a:10:{s:4:\"name\";s:7:\"Firefox\";s:7:\"version\";s:4:\"84.0\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:32:\"https://www.mozilla.org/firefox/\";s:7:\"img_src\";s:44:\"http://s.w.org/images/browsers/firefox.png?1\";s:11:\"img_src_ssl\";s:45:\"https://s.w.org/images/browsers/firefox.png?1\";s:15:\"current_version\";s:2:\"56\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}','no'),(406,'_site_transient_update_themes','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1609538047;s:7:\"checked\";a:2:{s:15:\"twentytwentyone\";s:3:\"1.1\";s:6:\"wpcode\";s:0:\"\";}s:8:\"response\";a:0:{}s:9:\"no_update\";a:1:{s:15:\"twentytwentyone\";a:6:{s:5:\"theme\";s:15:\"twentytwentyone\";s:11:\"new_version\";s:3:\"1.1\";s:3:\"url\";s:45:\"https://wordpress.org/themes/twentytwentyone/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/theme/twentytwentyone.1.1.zip\";s:8:\"requires\";s:3:\"5.3\";s:12:\"requires_php\";s:3:\"5.6\";}}s:12:\"translations\";a:0:{}}','no'),(425,'category_children','a:0:{}','yes'),(443,'_site_transient_timeout_poptags_40cd750bba9870f18aada2478b24840a','1609548830','no'),(444,'_site_transient_poptags_40cd750bba9870f18aada2478b24840a','O:8:\"stdClass\":100:{s:6:\"widget\";a:3:{s:4:\"name\";s:6:\"widget\";s:4:\"slug\";s:6:\"widget\";s:5:\"count\";i:4736;}s:11:\"woocommerce\";a:3:{s:4:\"name\";s:11:\"woocommerce\";s:4:\"slug\";s:11:\"woocommerce\";s:5:\"count\";i:4604;}s:4:\"post\";a:3:{s:4:\"name\";s:4:\"post\";s:4:\"slug\";s:4:\"post\";s:5:\"count\";i:2701;}s:5:\"admin\";a:3:{s:4:\"name\";s:5:\"admin\";s:4:\"slug\";s:5:\"admin\";s:5:\"count\";i:2574;}s:5:\"posts\";a:3:{s:4:\"name\";s:5:\"posts\";s:4:\"slug\";s:5:\"posts\";s:5:\"count\";i:1986;}s:9:\"shortcode\";a:3:{s:4:\"name\";s:9:\"shortcode\";s:4:\"slug\";s:9:\"shortcode\";s:5:\"count\";i:1837;}s:8:\"comments\";a:3:{s:4:\"name\";s:8:\"comments\";s:4:\"slug\";s:8:\"comments\";s:5:\"count\";i:1818;}s:6:\"google\";a:3:{s:4:\"name\";s:6:\"google\";s:4:\"slug\";s:6:\"google\";s:5:\"count\";i:1500;}s:6:\"images\";a:3:{s:4:\"name\";s:6:\"images\";s:4:\"slug\";s:6:\"images\";s:5:\"count\";i:1498;}s:7:\"twitter\";a:3:{s:4:\"name\";s:7:\"twitter\";s:4:\"slug\";s:7:\"twitter\";s:5:\"count\";i:1497;}s:3:\"seo\";a:3:{s:4:\"name\";s:3:\"seo\";s:4:\"slug\";s:3:\"seo\";s:5:\"count\";i:1467;}s:8:\"facebook\";a:3:{s:4:\"name\";s:8:\"facebook\";s:4:\"slug\";s:8:\"facebook\";s:5:\"count\";i:1464;}s:5:\"image\";a:3:{s:4:\"name\";s:5:\"image\";s:4:\"slug\";s:5:\"image\";s:5:\"count\";i:1462;}s:7:\"sidebar\";a:3:{s:4:\"name\";s:7:\"sidebar\";s:4:\"slug\";s:7:\"sidebar\";s:5:\"count\";i:1307;}s:5:\"email\";a:3:{s:4:\"name\";s:5:\"email\";s:4:\"slug\";s:5:\"email\";s:5:\"count\";i:1236;}s:7:\"gallery\";a:3:{s:4:\"name\";s:7:\"gallery\";s:4:\"slug\";s:7:\"gallery\";s:5:\"count\";i:1214;}s:9:\"ecommerce\";a:3:{s:4:\"name\";s:9:\"ecommerce\";s:4:\"slug\";s:9:\"ecommerce\";s:5:\"count\";i:1196;}s:4:\"page\";a:3:{s:4:\"name\";s:4:\"page\";s:4:\"slug\";s:4:\"page\";s:5:\"count\";i:1141;}s:6:\"social\";a:3:{s:4:\"name\";s:6:\"social\";s:4:\"slug\";s:6:\"social\";s:5:\"count\";i:1114;}s:5:\"login\";a:3:{s:4:\"name\";s:5:\"login\";s:4:\"slug\";s:5:\"login\";s:5:\"count\";i:1029;}s:8:\"security\";a:3:{s:4:\"name\";s:8:\"security\";s:4:\"slug\";s:8:\"security\";s:5:\"count\";i:919;}s:5:\"video\";a:3:{s:4:\"name\";s:5:\"video\";s:4:\"slug\";s:5:\"video\";s:5:\"count\";i:912;}s:7:\"widgets\";a:3:{s:4:\"name\";s:7:\"widgets\";s:4:\"slug\";s:7:\"widgets\";s:5:\"count\";i:890;}s:5:\"links\";a:3:{s:4:\"name\";s:5:\"links\";s:4:\"slug\";s:5:\"links\";s:5:\"count\";i:883;}s:10:\"e-commerce\";a:3:{s:4:\"name\";s:10:\"e-commerce\";s:4:\"slug\";s:10:\"e-commerce\";s:5:\"count\";i:844;}s:4:\"spam\";a:3:{s:4:\"name\";s:4:\"spam\";s:4:\"slug\";s:4:\"spam\";s:5:\"count\";i:812;}s:6:\"slider\";a:3:{s:4:\"name\";s:6:\"slider\";s:4:\"slug\";s:6:\"slider\";s:5:\"count\";i:800;}s:9:\"analytics\";a:3:{s:4:\"name\";s:9:\"analytics\";s:4:\"slug\";s:9:\"analytics\";s:5:\"count\";i:793;}s:7:\"content\";a:3:{s:4:\"name\";s:7:\"content\";s:4:\"slug\";s:7:\"content\";s:5:\"count\";i:789;}s:4:\"form\";a:3:{s:4:\"name\";s:4:\"form\";s:4:\"slug\";s:4:\"form\";s:5:\"count\";i:763;}s:10:\"buddypress\";a:3:{s:4:\"name\";s:10:\"buddypress\";s:4:\"slug\";s:10:\"buddypress\";s:5:\"count\";i:756;}s:5:\"media\";a:3:{s:4:\"name\";s:5:\"media\";s:4:\"slug\";s:5:\"media\";s:5:\"count\";i:732;}s:3:\"rss\";a:3:{s:4:\"name\";s:3:\"rss\";s:4:\"slug\";s:3:\"rss\";s:5:\"count\";i:723;}s:6:\"search\";a:3:{s:4:\"name\";s:6:\"search\";s:4:\"slug\";s:6:\"search\";s:5:\"count\";i:713;}s:5:\"pages\";a:3:{s:4:\"name\";s:5:\"pages\";s:4:\"slug\";s:5:\"pages\";s:5:\"count\";i:709;}s:6:\"editor\";a:3:{s:4:\"name\";s:6:\"editor\";s:4:\"slug\";s:6:\"editor\";s:5:\"count\";i:692;}s:4:\"menu\";a:3:{s:4:\"name\";s:4:\"menu\";s:4:\"slug\";s:4:\"menu\";s:5:\"count\";i:670;}s:6:\"jquery\";a:3:{s:4:\"name\";s:6:\"jquery\";s:4:\"slug\";s:6:\"jquery\";s:5:\"count\";i:664;}s:4:\"feed\";a:3:{s:4:\"name\";s:4:\"feed\";s:4:\"slug\";s:4:\"feed\";s:5:\"count\";i:659;}s:8:\"category\";a:3:{s:4:\"name\";s:8:\"category\";s:4:\"slug\";s:8:\"category\";s:5:\"count\";i:653;}s:5:\"embed\";a:3:{s:4:\"name\";s:5:\"embed\";s:4:\"slug\";s:5:\"embed\";s:5:\"count\";i:642;}s:4:\"ajax\";a:3:{s:4:\"name\";s:4:\"ajax\";s:4:\"slug\";s:4:\"ajax\";s:5:\"count\";i:639;}s:7:\"payment\";a:3:{s:4:\"name\";s:7:\"payment\";s:4:\"slug\";s:7:\"payment\";s:5:\"count\";i:636;}s:12:\"contact-form\";a:3:{s:4:\"name\";s:12:\"contact form\";s:4:\"slug\";s:12:\"contact-form\";s:5:\"count\";i:630;}s:9:\"gutenberg\";a:3:{s:4:\"name\";s:9:\"gutenberg\";s:4:\"slug\";s:9:\"gutenberg\";s:5:\"count\";i:596;}s:3:\"css\";a:3:{s:4:\"name\";s:3:\"css\";s:4:\"slug\";s:3:\"css\";s:5:\"count\";i:594;}s:7:\"youtube\";a:3:{s:4:\"name\";s:7:\"youtube\";s:4:\"slug\";s:7:\"youtube\";s:5:\"count\";i:588;}s:10:\"javascript\";a:3:{s:4:\"name\";s:10:\"javascript\";s:4:\"slug\";s:10:\"javascript\";s:5:\"count\";i:585;}s:4:\"link\";a:3:{s:4:\"name\";s:4:\"link\";s:4:\"slug\";s:4:\"link\";s:5:\"count\";i:581;}s:9:\"affiliate\";a:3:{s:4:\"name\";s:9:\"affiliate\";s:4:\"slug\";s:9:\"affiliate\";s:5:\"count\";i:565;}s:15:\"payment-gateway\";a:3:{s:4:\"name\";s:15:\"payment gateway\";s:4:\"slug\";s:15:\"payment-gateway\";s:5:\"count\";i:565;}s:5:\"share\";a:3:{s:4:\"name\";s:5:\"share\";s:4:\"slug\";s:5:\"share\";s:5:\"count\";i:563;}s:10:\"responsive\";a:3:{s:4:\"name\";s:10:\"responsive\";s:4:\"slug\";s:10:\"responsive\";s:5:\"count\";i:557;}s:5:\"theme\";a:3:{s:4:\"name\";s:5:\"theme\";s:4:\"slug\";s:5:\"theme\";s:5:\"count\";i:557;}s:7:\"comment\";a:3:{s:4:\"name\";s:7:\"comment\";s:4:\"slug\";s:7:\"comment\";s:5:\"count\";i:556;}s:9:\"dashboard\";a:3:{s:4:\"name\";s:9:\"dashboard\";s:4:\"slug\";s:9:\"dashboard\";s:5:\"count\";i:548;}s:3:\"ads\";a:3:{s:4:\"name\";s:3:\"ads\";s:4:\"slug\";s:3:\"ads\";s:5:\"count\";i:537;}s:6:\"custom\";a:3:{s:4:\"name\";s:6:\"custom\";s:4:\"slug\";s:6:\"custom\";s:5:\"count\";i:534;}s:3:\"api\";a:3:{s:4:\"name\";s:3:\"api\";s:4:\"slug\";s:3:\"api\";s:5:\"count\";i:531;}s:7:\"contact\";a:3:{s:4:\"name\";s:7:\"contact\";s:4:\"slug\";s:7:\"contact\";s:5:\"count\";i:531;}s:10:\"categories\";a:3:{s:4:\"name\";s:10:\"categories\";s:4:\"slug\";s:10:\"categories\";s:5:\"count\";i:527;}s:4:\"user\";a:3:{s:4:\"name\";s:4:\"user\";s:4:\"slug\";s:4:\"user\";s:5:\"count\";i:508;}s:6:\"button\";a:3:{s:4:\"name\";s:6:\"button\";s:4:\"slug\";s:6:\"button\";s:5:\"count\";i:499;}s:4:\"tags\";a:3:{s:4:\"name\";s:4:\"tags\";s:4:\"slug\";s:4:\"tags\";s:5:\"count\";i:496;}s:6:\"events\";a:3:{s:4:\"name\";s:6:\"events\";s:4:\"slug\";s:6:\"events\";s:5:\"count\";i:489;}s:6:\"mobile\";a:3:{s:4:\"name\";s:6:\"mobile\";s:4:\"slug\";s:6:\"mobile\";s:5:\"count\";i:488;}s:5:\"users\";a:3:{s:4:\"name\";s:5:\"users\";s:4:\"slug\";s:5:\"users\";s:5:\"count\";i:483;}s:9:\"marketing\";a:3:{s:4:\"name\";s:9:\"marketing\";s:4:\"slug\";s:9:\"marketing\";s:5:\"count\";i:468;}s:4:\"chat\";a:3:{s:4:\"name\";s:4:\"chat\";s:4:\"slug\";s:4:\"chat\";s:5:\"count\";i:465;}s:5:\"block\";a:3:{s:4:\"name\";s:5:\"block\";s:4:\"slug\";s:5:\"block\";s:5:\"count\";i:458;}s:9:\"elementor\";a:3:{s:4:\"name\";s:9:\"elementor\";s:4:\"slug\";s:9:\"elementor\";s:5:\"count\";i:456;}s:5:\"popup\";a:3:{s:4:\"name\";s:5:\"popup\";s:4:\"slug\";s:5:\"popup\";s:5:\"count\";i:449;}s:8:\"calendar\";a:3:{s:4:\"name\";s:8:\"calendar\";s:4:\"slug\";s:8:\"calendar\";s:5:\"count\";i:447;}s:5:\"photo\";a:3:{s:4:\"name\";s:5:\"photo\";s:4:\"slug\";s:5:\"photo\";s:5:\"count\";i:444;}s:5:\"forms\";a:3:{s:4:\"name\";s:5:\"forms\";s:4:\"slug\";s:5:\"forms\";s:5:\"count\";i:441;}s:10:\"navigation\";a:3:{s:4:\"name\";s:10:\"navigation\";s:4:\"slug\";s:10:\"navigation\";s:5:\"count\";i:441;}s:9:\"slideshow\";a:3:{s:4:\"name\";s:9:\"slideshow\";s:4:\"slug\";s:9:\"slideshow\";s:5:\"count\";i:435;}s:5:\"stats\";a:3:{s:4:\"name\";s:5:\"stats\";s:4:\"slug\";s:5:\"stats\";s:5:\"count\";i:431;}s:14:\"contact-form-7\";a:3:{s:4:\"name\";s:14:\"contact form 7\";s:4:\"slug\";s:14:\"contact-form-7\";s:5:\"count\";i:430;}s:10:\"newsletter\";a:3:{s:4:\"name\";s:10:\"newsletter\";s:4:\"slug\";s:10:\"newsletter\";s:5:\"count\";i:429;}s:6:\"photos\";a:3:{s:4:\"name\";s:6:\"photos\";s:4:\"slug\";s:6:\"photos\";s:5:\"count\";i:423;}s:10:\"statistics\";a:3:{s:4:\"name\";s:10:\"statistics\";s:4:\"slug\";s:10:\"statistics\";s:5:\"count\";i:416;}s:12:\"social-media\";a:3:{s:4:\"name\";s:12:\"social media\";s:4:\"slug\";s:12:\"social-media\";s:5:\"count\";i:406;}s:8:\"shipping\";a:3:{s:4:\"name\";s:8:\"shipping\";s:4:\"slug\";s:8:\"shipping\";s:5:\"count\";i:404;}s:4:\"news\";a:3:{s:4:\"name\";s:4:\"news\";s:4:\"slug\";s:4:\"news\";s:5:\"count\";i:404;}s:10:\"shortcodes\";a:3:{s:4:\"name\";s:10:\"shortcodes\";s:4:\"slug\";s:10:\"shortcodes\";s:5:\"count\";i:399;}s:8:\"redirect\";a:3:{s:4:\"name\";s:8:\"redirect\";s:4:\"slug\";s:8:\"redirect\";s:5:\"count\";i:399;}s:11:\"performance\";a:3:{s:4:\"name\";s:11:\"performance\";s:4:\"slug\";s:11:\"performance\";s:5:\"count\";i:396;}s:4:\"code\";a:3:{s:4:\"name\";s:4:\"code\";s:4:\"slug\";s:4:\"code\";s:5:\"count\";i:390;}s:12:\"notification\";a:3:{s:4:\"name\";s:12:\"notification\";s:4:\"slug\";s:12:\"notification\";s:5:\"count\";i:387;}s:7:\"plugins\";a:3:{s:4:\"name\";s:7:\"plugins\";s:4:\"slug\";s:7:\"plugins\";s:5:\"count\";i:382;}s:3:\"url\";a:3:{s:4:\"name\";s:3:\"url\";s:4:\"slug\";s:3:\"url\";s:5:\"count\";i:378;}s:9:\"multisite\";a:3:{s:4:\"name\";s:9:\"multisite\";s:4:\"slug\";s:9:\"multisite\";s:5:\"count\";i:378;}s:4:\"meta\";a:3:{s:4:\"name\";s:4:\"meta\";s:4:\"slug\";s:4:\"meta\";s:5:\"count\";i:365;}s:4:\"list\";a:3:{s:4:\"name\";s:4:\"list\";s:4:\"slug\";s:4:\"list\";s:5:\"count\";i:362;}s:8:\"tracking\";a:3:{s:4:\"name\";s:8:\"tracking\";s:4:\"slug\";s:8:\"tracking\";s:5:\"count\";i:361;}s:6:\"import\";a:3:{s:4:\"name\";s:6:\"import\";s:4:\"slug\";s:6:\"import\";s:5:\"count\";i:354;}s:16:\"google-analytics\";a:3:{s:4:\"name\";s:16:\"google analytics\";s:4:\"slug\";s:16:\"google-analytics\";s:5:\"count\";i:354;}s:5:\"cache\";a:3:{s:4:\"name\";s:5:\"cache\";s:4:\"slug\";s:5:\"cache\";s:5:\"count\";i:350;}s:16:\"custom-post-type\";a:3:{s:4:\"name\";s:16:\"custom post type\";s:4:\"slug\";s:16:\"custom-post-type\";s:5:\"count\";i:343;}}','no'),(446,'_site_transient_timeout_theme_roots','1609539847','no'),(447,'_site_transient_theme_roots','a:2:{s:15:\"twentytwentyone\";s:7:\"/themes\";s:6:\"wpcode\";s:7:\"/themes\";}','no'),(448,'_site_transient_update_plugins','O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1609538053;s:7:\"checked\";a:2:{s:25:\"duplicator/duplicator.php\";s:8:\"1.3.40.1\";s:30:\"seo-by-rank-math/rank-math.php\";s:6:\"1.0.55\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:2:{s:25:\"duplicator/duplicator.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:24:\"w.org/plugins/duplicator\";s:4:\"slug\";s:10:\"duplicator\";s:6:\"plugin\";s:25:\"duplicator/duplicator.php\";s:11:\"new_version\";s:8:\"1.3.40.1\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/duplicator/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/duplicator.1.3.40.1.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:63:\"https://ps.w.org/duplicator/assets/icon-256x256.png?rev=2083921\";s:2:\"1x\";s:63:\"https://ps.w.org/duplicator/assets/icon-128x128.png?rev=2083921\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:65:\"https://ps.w.org/duplicator/assets/banner-772x250.png?rev=2085472\";}s:11:\"banners_rtl\";a:0:{}}s:30:\"seo-by-rank-math/rank-math.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:30:\"w.org/plugins/seo-by-rank-math\";s:4:\"slug\";s:16:\"seo-by-rank-math\";s:6:\"plugin\";s:30:\"seo-by-rank-math/rank-math.php\";s:11:\"new_version\";s:6:\"1.0.55\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/seo-by-rank-math/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/seo-by-rank-math.1.0.55.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:69:\"https://ps.w.org/seo-by-rank-math/assets/icon-256x256.png?rev=2348086\";s:2:\"1x\";s:61:\"https://ps.w.org/seo-by-rank-math/assets/icon.svg?rev=2348086\";s:3:\"svg\";s:61:\"https://ps.w.org/seo-by-rank-math/assets/icon.svg?rev=2348086\";}s:7:\"banners\";a:2:{s:2:\"2x\";s:72:\"https://ps.w.org/seo-by-rank-math/assets/banner-1544x500.png?rev=2348086\";s:2:\"1x\";s:71:\"https://ps.w.org/seo-by-rank-math/assets/banner-772x250.png?rev=2348086\";}s:11:\"banners_rtl\";a:0:{}}}}','no'),(449,'duplicator_settings','a:17:{s:7:\"version\";s:8:\"1.3.40.1\";s:18:\"uninstall_settings\";b:1;s:15:\"uninstall_files\";b:1;s:16:\"uninstall_tables\";b:1;s:13:\"package_debug\";b:0;s:17:\"package_mysqldump\";b:1;s:22:\"package_mysqldump_path\";s:0:\"\";s:24:\"package_phpdump_qrylimit\";s:3:\"100\";s:17:\"package_zip_flush\";b:0;s:19:\"installer_name_mode\";s:6:\"simple\";s:16:\"storage_position\";s:6:\"wpcont\";s:20:\"storage_htaccess_off\";b:0;s:18:\"archive_build_mode\";i:2;s:17:\"skip_archive_scan\";b:0;s:21:\"unhook_third_party_js\";b:0;s:22:\"unhook_third_party_css\";b:0;s:17:\"active_package_id\";i:1;}','yes'),(450,'duplicator_lite_inst_hash_notice','1','yes'),(451,'duplicator_version_plugin','1.3.40.1','yes'),(452,'duplicator_package_active','O:11:\"DUP_Package\":23:{s:7:\"Created\";s:19:\"2021-01-01 21:54:29\";s:7:\"Version\";s:8:\"1.3.40.1\";s:9:\"VersionWP\";s:3:\"5.6\";s:9:\"VersionDB\";s:7:\"10.1.37\";s:10:\"VersionPHP\";s:5:\"7.3.1\";s:9:\"VersionOS\";s:5:\"WINNT\";s:2:\"ID\";N;s:4:\"Name\";s:15:\"20210101_wpcode\";s:4:\"Hash\";s:35:\"2eb777ffff74dc5d2513_20210101215429\";s:8:\"NameHash\";s:51:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429\";s:4:\"Type\";i:0;s:5:\"Notes\";s:0:\"\";s:8:\"ScanFile\";s:61:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429_scan.json\";s:10:\"TimerStart\";i:-1;s:7:\"Runtime\";N;s:7:\"ExeSize\";N;s:7:\"ZipSize\";N;s:6:\"Status\";i:0;s:6:\"WPUser\";N;s:7:\"Archive\";O:11:\"DUP_Archive\":21:{s:10:\"FilterDirs\";s:0:\"\";s:11:\"FilterFiles\";s:0:\"\";s:10:\"FilterExts\";s:0:\"\";s:13:\"FilterDirsAll\";a:0:{}s:14:\"FilterFilesAll\";a:0:{}s:13:\"FilterExtsAll\";a:0:{}s:8:\"FilterOn\";i:0;s:12:\"ExportOnlyDB\";i:0;s:4:\"File\";N;s:6:\"Format\";s:3:\"ZIP\";s:7:\"PackDir\";s:34:\"C:/Users/Casey/Sites/wpcode.dev.cc\";s:4:\"Size\";i:0;s:4:\"Dirs\";a:0:{}s:5:\"Files\";a:0:{}s:10:\"FilterInfo\";O:23:\"DUP_Archive_Filter_Info\":8:{s:4:\"Dirs\";O:34:\"DUP_Archive_Filter_Scope_Directory\":5:{s:7:\"Warning\";a:0:{}s:10:\"Unreadable\";a:0:{}s:4:\"Core\";a:0:{}s:6:\"Global\";a:0:{}s:8:\"Instance\";a:0:{}}s:5:\"Files\";O:29:\"DUP_Archive_Filter_Scope_File\":6:{s:4:\"Size\";a:0:{}s:7:\"Warning\";a:0:{}s:10:\"Unreadable\";a:0:{}s:4:\"Core\";a:0:{}s:6:\"Global\";a:0:{}s:8:\"Instance\";a:0:{}}s:4:\"Exts\";O:29:\"DUP_Archive_Filter_Scope_Base\":3:{s:4:\"Core\";a:0:{}s:6:\"Global\";a:0:{}s:8:\"Instance\";a:0:{}}s:9:\"UDirCount\";i:0;s:10:\"UFileCount\";i:0;s:9:\"UExtCount\";i:0;s:8:\"TreeSize\";a:0:{}s:11:\"TreeWarning\";a:0:{}}s:14:\"RecursiveLinks\";a:0:{}s:10:\"file_count\";i:-1;s:10:\"\0*\0Package\";O:11:\"DUP_Package\":23:{s:7:\"Created\";s:19:\"2021-01-01 21:54:29\";s:7:\"Version\";s:8:\"1.3.40.1\";s:9:\"VersionWP\";s:3:\"5.6\";s:9:\"VersionDB\";s:7:\"10.1.37\";s:10:\"VersionPHP\";s:5:\"7.3.1\";s:9:\"VersionOS\";s:5:\"WINNT\";s:2:\"ID\";N;s:4:\"Name\";s:15:\"20210101_wpcode\";s:4:\"Hash\";s:35:\"2eb777ffff74dc5d2513_20210101215429\";s:8:\"NameHash\";s:51:\"20210101_wpcode_2eb777ffff74dc5d2513_20210101215429\";s:4:\"Type\";i:0;s:5:\"Notes\";s:0:\"\";s:8:\"ScanFile\";N;s:10:\"TimerStart\";i:-1;s:7:\"Runtime\";N;s:7:\"ExeSize\";N;s:7:\"ZipSize\";N;s:6:\"Status\";i:0;s:6:\"WPUser\";N;s:7:\"Archive\";r:21;s:9:\"Installer\";O:13:\"DUP_Installer\":13:{s:4:\"File\";N;s:4:\"Size\";i:0;s:10:\"OptsDBHost\";s:0:\"\";s:10:\"OptsDBPort\";s:0:\"\";s:10:\"OptsDBName\";s:0:\"\";s:10:\"OptsDBUser\";s:0:\"\";s:13:\"OptsDBCharset\";s:0:\"\";s:15:\"OptsDBCollation\";s:0:\"\";s:12:\"OptsSecureOn\";i:0;s:14:\"OptsSecurePass\";s:0:\"\";s:13:\"numFilesAdded\";i:0;s:12:\"numDirsAdded\";i:0;s:10:\"\0*\0Package\";r:61;}s:8:\"Database\";O:12:\"DUP_Database\":14:{s:4:\"Type\";s:5:\"MySQL\";s:4:\"Size\";N;s:4:\"File\";N;s:4:\"Path\";N;s:12:\"FilterTables\";s:0:\"\";s:8:\"FilterOn\";i:0;s:4:\"Name\";N;s:10:\"Compatible\";s:0:\"\";s:8:\"Comments\";s:31:\"mariadb.org binary distribution\";s:4:\"info\";O:16:\"DUP_DatabaseInfo\":15:{s:9:\"buildMode\";N;s:13:\"collationList\";a:0:{}s:17:\"isTablesUpperCase\";N;s:15:\"isNameUpperCase\";N;s:4:\"name\";N;s:15:\"tablesBaseCount\";N;s:16:\"tablesFinalCount\";N;s:14:\"tablesRowCount\";N;s:16:\"tablesSizeOnDisk\";N;s:18:\"varLowerCaseTables\";i:1;s:7:\"version\";N;s:14:\"versionComment\";N;s:18:\"tableWiseRowCounts\";a:0:{}s:33:\"\0DUP_DatabaseInfo\0intFieldsStruct\";a:0:{}s:42:\"\0DUP_DatabaseInfo\0indexProcessedSchemaSize\";a:0:{}}s:10:\"\0*\0Package\";r:61;s:24:\"\0DUP_Database\0tempDbPath\";N;s:23:\"\0DUP_Database\0EOFMarker\";s:0:\"\";s:26:\"\0DUP_Database\0networkFlush\";b:0;}s:13:\"BuildProgress\";O:18:\"DUP_Build_Progress\":12:{s:17:\"thread_start_time\";N;s:11:\"initialized\";b:0;s:15:\"installer_built\";b:0;s:15:\"archive_started\";b:0;s:20:\"archive_has_database\";b:0;s:13:\"archive_built\";b:0;s:21:\"database_script_built\";b:0;s:6:\"failed\";b:0;s:7:\"retries\";i:0;s:14:\"build_failures\";a:0:{}s:19:\"validation_failures\";a:0:{}s:27:\"\0DUP_Build_Progress\0package\";r:61;}}s:29:\"\0DUP_Archive\0tmpFilterDirsAll\";a:0:{}s:24:\"\0DUP_Archive\0wpCorePaths\";a:5:{i:0;s:43:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-admin\";i:1;s:53:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content/uploads\";i:2;s:55:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content/languages\";i:3;s:52:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content/themes\";i:4;s:46:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-includes\";}s:29:\"\0DUP_Archive\0wpCoreExactPaths\";a:2:{i:0;s:34:\"C:/Users/Casey/Sites/wpcode.dev.cc\";i:1;s:45:\"C:/Users/Casey/Sites/wpcode.dev.cc/wp-content\";}}s:9:\"Installer\";r:82;s:8:\"Database\";r:96;s:13:\"BuildProgress\";r:126;}','yes');
/*!40000 ALTER TABLE `wp_options` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_postmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `post_id` (`post_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=228 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_postmeta` WRITE;
/*!40000 ALTER TABLE `wp_postmeta` DISABLE KEYS */;
INSERT INTO `wp_postmeta` VALUES (5,6,'_edit_lock','1609537878:1'),(21,13,'_edit_lock','1609536104:1'),(24,16,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png'),(25,16,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:509;s:6:\"height\";i:229;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-19_50_18-300x135.png\";s:5:\"width\";i:300;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-19_50_18-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(28,18,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png'),(29,18,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:584;s:6:\"height\";i:261;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-19_53_20-300x134.png\";s:5:\"width\";i:300;s:6:\"height\";i:134;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-19_53_20-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(32,20,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png'),(33,20,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:763;s:6:\"height\";i:377;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-300x148.png\";s:5:\"width\";i:300;s:6:\"height\";i:148;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(36,22,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1.png'),(37,22,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:763;s:6:\"height\";i:377;s:4:\"file\";s:59:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:59:\"screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1-300x148.png\";s:5:\"width\";i:300;s:6:\"height\";i:148;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:59:\"screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(40,24,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png'),(41,24,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:678;s:6:\"height\";i:327;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_04_40-300x145.png\";s:5:\"width\";i:300;s:6:\"height\";i:145;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_04_40-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(52,31,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png'),(53,31,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:908;s:6:\"height\";i:560;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\";s:5:\"sizes\";a:3:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_22_43-300x185.png\";s:5:\"width\";i:300;s:6:\"height\";i:185;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_22_43-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_22_43-768x474.png\";s:5:\"width\";i:768;s:6:\"height\";i:474;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(56,33,'_edit_lock','1608427623:1'),(61,40,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png'),(62,40,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:475;s:6:\"height\";i:332;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_50_24-300x210.png\";s:5:\"width\";i:300;s:6:\"height\";i:210;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-20_50_24-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(67,13,'rank_math_seo_score','84'),(68,13,'rank_math_focus_keyword','how to build a custom wordpress theme from scratch'),(71,13,'_edit_last','1'),(73,13,'rank_math_internal_links_processed','1'),(74,13,'rank_math_pillar_content','on'),(78,13,'_wp_old_slug','building-a-custom-wordpress-theme-from-scratch-step-by-step'),(84,13,'rank_math_description','This tutorial will teach you how to build a custom WordPress theme from scratch. Each step covered in full detail with screenshots and code ready for copy/paste into your project. '),(90,13,'_wp_old_slug','how-to-build-a-custom-wordpress-theme-from-scratch-step-by-step'),(95,62,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png'),(96,62,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:342;s:6:\"height\";i:112;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:56:\"screenshot-wpcode.dev_.cc-2020.12.19-22_44_06-300x98.png\";s:5:\"width\";i:300;s:6:\"height\";i:98;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.19-22_44_06-150x112.png\";s:5:\"width\";i:150;s:6:\"height\";i:112;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(105,69,'_edit_lock','1608494452:2'),(106,69,'rank_math_seo_score','52'),(109,69,'_edit_last','2'),(111,69,'rank_math_internal_links_processed','1'),(117,76,'_edit_lock','1608483334:2'),(118,76,'_edit_last','2'),(119,76,'rank_math_internal_links_processed','1'),(120,78,'_edit_lock','1609536079:1'),(121,78,'_edit_last','2'),(122,78,'rank_math_internal_links_processed','1'),(123,76,'rank_math_seo_score','6'),(126,69,'rank_math_focus_keyword','learn php for wordpress'),(129,69,'rank_math_pillar_content','on'),(134,33,'rank_math_internal_links_processed','1'),(135,6,'rank_math_internal_links_processed','1'),(136,89,'_edit_lock','1608830252:1'),(137,89,'rank_math_seo_score','51'),(138,89,'rank_math_focus_keyword','Building a custom WordPress menu'),(141,89,'_edit_last','1'),(144,89,'rank_math_internal_links_processed','1'),(176,101,'_wp_attached_file','2020/12/screenshot-wpcode.dev_.cc-2020.12.24-08_35_48.png'),(177,101,'_wp_attachment_metadata','a:5:{s:5:\"width\";i:627;s:6:\"height\";i:389;s:4:\"file\";s:57:\"2020/12/screenshot-wpcode.dev_.cc-2020.12.24-08_35_48.png\";s:5:\"sizes\";a:2:{s:6:\"medium\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.24-08_35_48-300x186.png\";s:5:\"width\";i:300;s:6:\"height\";i:186;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:57:\"screenshot-wpcode.dev_.cc-2020.12.24-08_35_48-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}'),(178,89,'_pingme','1'),(179,89,'_encloseme','1'),(180,103,'_edit_lock','1608821884:1'),(181,103,'_edit_last','1'),(182,103,'rank_math_internal_links_processed','1'),(201,107,'_menu_item_type','post_type'),(202,107,'_menu_item_menu_item_parent','0'),(203,107,'_menu_item_object_id','33'),(204,107,'_menu_item_object','page'),(205,107,'_menu_item_target',''),(206,107,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(207,107,'_menu_item_xfn',''),(208,107,'_menu_item_url',''),(209,109,'_edit_lock','1609536062:1'),(210,13,'_pingme','1'),(211,13,'_encloseme','1'),(212,13,'rank_math_primary_category','3'),(213,111,'_menu_item_type','post_type'),(214,111,'_menu_item_menu_item_parent','0'),(215,111,'_menu_item_object_id','78'),(216,111,'_menu_item_object','page'),(217,111,'_menu_item_target',''),(218,111,'_menu_item_classes','a:1:{i:0;s:0:\"\";}'),(219,111,'_menu_item_xfn',''),(220,111,'_menu_item_url',''),(222,6,'_pingme','1'),(223,6,'_encloseme','1'),(224,6,'rank_math_primary_category','1'),(225,6,'rank_math_seo_score','55'),(226,6,'rank_math_focus_keyword','where to organize code in wordpress'),(227,6,'_edit_last','1');
/*!40000 ALTER TABLE `wp_postmeta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_posts` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_title` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_excerpt` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `to_ping` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `pinged` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `guid` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT '0',
  `post_type` varchar(20) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID`),
  KEY `post_name` (`post_name`(191)),
  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
  KEY `post_parent` (`post_parent`),
  KEY `post_author` (`post_author`)
) ENGINE=InnoDB AUTO_INCREMENT=114 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_posts` WRITE;
/*!40000 ALTER TABLE `wp_posts` DISABLE KEYS */;
INSERT INTO `wp_posts` VALUES (6,1,'2020-12-20 00:33:24','2020-12-20 00:33:24','<!-- wp:paragraph -->\n<p>You have 2 options for the placement of custom code in WordPress. Either you create a plugin, or you create (or edit) a theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some developers coming from other frameworks have the impress that in WordPress there is a lot of complexity and blocking stuff that would get in the way of coding. That\'s a misconception based on the reality that some newcomers especially to freelance development, end up doing work with existing 3rd party code. In other words it\'s the nature of trying to add to an existing plugin or modify an existing theme, that in that situation you have to learn and grapple with the complexity of an existing codebase. And sometimes that will be a relatively undocumented or perhaps poorly coded project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I want to impress on you is that in WP you can start with fairly blank slate, not much different from how you start a project using a PHP framework such as Laravel or CodeIgniter, or even a NodeJS project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I highly recommend that even if you plan to support and work with 3rd party themes, that you experience WP directly by <a href=\"http://wpcode.dev.cc/how-to-build-a-custom-wordpress-theme-from-scratch\" class=\"rank-math-link\">building a simple WordPress theme from scratch</a>. Don\'t be intimidated by the prospect of this challenge. It\'s actually quite simple and we can show you how to get a basic theme installed in under 10-minutes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to work mostly as a plugin developer, it\'s worth knowing how themes work, understanding template hierarchy and other fundamentals of how WordPress delivers content to the browser. This will help you craft plugins that work with themes properly and which can be supported by most themes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Base Theme versus Child Theme</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We tend to recommend that you learn and use Base Themes, which are full WP themes on most projects. But we know some of you will want to explore the world of WordPress 3rd party themes, or you\'ll have clients that insist on a certain theme, or you\'ll be taking over the management of an existing site with a theme already installed. In these cases unless you can switch to a new custom base theme, you\'re next best option is a Child Theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Understand that generally \"hacking themes\" is not advised. This would be changing or adding code to an existing theme, especially a 3rd party theme. Even with the WP default themes, again a child theme is recommended instead of changing any of the code contained. The reason is because those themes are not managed by you, their managed by the theme developer. As updated are released, your changed will all be completely over-written, and therefore lost, which will often break a site. Typically as a result of this if you were to hack a theme, you only have 2 options for management and neither are good. One is never update that theme. This is bad because if a security flaw is found and fixed, you don\'t get that fix. When WP updates are made, you\'re theme now falls farther and farther behind and may eventually be obsolete (broken). The other option is you somehow manage your custom changes and repeat those changes after each update. While you might be able to automate this process, if you\'re that technically proficient... why did you hack the theme in the first place? </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The one situation where we would not call it \"hacking a theme\" to make changed directly to a 3rd party theme, is when you really have carefully determined you want to manage that entire codebase. In other words you\'ve decided to start with a 3rd party theme, but now you\'re going to adapt it to fit a site, and you\'re never going to use any further updates from the original developer. In other words you\'re forking the project. This could actually be a worthwhile approach to consider in some circumstances. You might really want certain features or styles from a theme, and if you like how the original developer structured it, then you might decide to work from it, and fork the project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Where to organize code in WordPress','','publish','open','open','','where-to-organize-code-in-wordpress','','','2021-01-01 21:44:26','2021-01-01 21:44:26','',0,'http://wpcode.dev.cc/?p=6',0,'post','',0),(7,1,'2020-12-20 00:33:24','2020-12-20 00:33:24','<!-- wp:paragraph -->\n<p>You have 2 options for the placement of custom code in WordPress. Either you create a plugin, or you create (or edit) a theme. </p>\n<!-- /wp:paragraph -->','Where to organize code in WordPress','','inherit','closed','closed','','6-revision-v1','','','2020-12-20 00:33:24','2020-12-20 00:33:24','',6,'http://wpcode.dev.cc/6-revision-v1',0,'revision','',0),(11,1,'2020-12-20 00:41:57','2020-12-20 00:41:57','<!-- wp:paragraph -->\n<p>You have 2 options for the placement of custom code in WordPress. Either you create a plugin, or you create (or edit) a theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some developers coming from other frameworks have the impress that in WordPress there is a lot of complexity and blocking stuff that would get in the way of coding. That\'s a misconception based on the reality that some newcomers especially to freelance development, end up doing work with existing 3rd party code. In other words it\'s the nature of trying to add to an existing plugin or modify an existing theme, that in that situation you have to learn and grapple with the complexity of an existing codebase. And sometimes that will be a relatively undocumented or perhaps poorly coded project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I want to impress on you is that in WP you can start with fairly blank slate, not much different from how you start a project using a PHP framework such as Laravel or CodeIgniter, or even a NodeJS project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I highly recommend that even if you plan to support and work with 3rd party themes, that you experience WP directly by building a simple WordPress theme from scratch. Don\'t be intimidated by the prospect of this challenge. It\'s actually quite simple and we can show you how to get a basic theme installed in under 10-minutes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to work mostly as a plugin developer, it\'s worth knowing how themes work, understanding template hierarchy and other fundamentals of how WordPress delivers content to the browser. This will help you craft plugins that work with themes properly and which can be supported by most themes. </p>\n<!-- /wp:paragraph -->','Where to organize code in WordPress','','inherit','closed','closed','','6-revision-v1','','','2020-12-20 00:41:57','2020-12-20 00:41:57','',6,'http://wpcode.dev.cc/6-revision-v1',0,'revision','',0),(13,1,'2020-12-20 00:49:07','2020-12-20 00:49:07','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"how to build a custom WordPress theme from scratch\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?&gt;&gt;\n\n	&lt;head&gt;\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?&gt;\"&gt;\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" &gt;\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\"&gt;\n\n		&lt;?php wp_head(); ?&gt;\n\n	&lt;/head&gt;\n\n	&lt;body &lt;?php body_class(); ?&gt;&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\"&gt;\n  &lt;div&gt;WPCODE&lt;/div&gt;\n&lt;/header&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer&gt;&lt;/footer&gt;\n\n&lt;?php wp_footer(); ?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body&gt; and &lt;html&gt; tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer&gt; tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer&gt; tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\"&gt;\n  &lt;div class=\"text-logo\"&gt;WPCODE&lt;/div&gt;\n  &lt;div class=\"copyright\"&gt;&amp;copy; 2020 WPCODE&lt;/div&gt;\n&lt;/footer&gt;\n\n&lt;?php wp_footer(); ?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result on the front-end should now look something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":62,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\" alt=\"\" class=\"wp-image-62\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>And now, congratulations because 100% of the output to the front-end is coming from the template and it\'s custom header and footer includes. You are for the most part, in complete control of the rendering of the site. And that\'s exactly why building custom themes is a powerful and liberating way of approaching WordPress development. <strong>Let\'s continue onward shall we?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2>Are you enjoying how to build a custom WordPress theme from scratch so far?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>If you\'re enjoying this content so far please consider taking a moment to share it on social media or leave us a comment below. These actions help us reach more great folks like yourself and also to keep the content flowing and free flowing here at WPCODE. Thanks!</p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 10) A few rapid fire dashes of CSS to spruce things up a bit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','publish','open','open','','how-to-build-a-custom-wordpress-theme-from-scratch','','','2021-01-01 21:21:43','2021-01-01 21:21:43','',0,'http://wpcode.dev.cc/?p=13',0,'post','',0),(14,1,'2020-12-20 00:49:07','2020-12-20 00:49:07','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 00:49:07','2020-12-20 00:49:07','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(16,1,'2020-12-20 00:50:51','2020-12-20 00:50:51','','screenshot-wpcode.dev_.cc-2020.12.19-19_50_18','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-19_50_18','','','2020-12-20 00:50:51','2020-12-20 00:50:51','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png',0,'attachment','image/png',0),(17,1,'2020-12-20 00:53:04','2020-12-20 00:53:04','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 00:53:04','2020-12-20 00:53:04','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(18,1,'2020-12-20 00:54:17','2020-12-20 00:54:17','','screenshot-wpcode.dev_.cc-2020.12.19-19_53_20','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-19_53_20','','','2020-12-20 00:54:17','2020-12-20 00:54:17','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png',0,'attachment','image/png',0),(19,1,'2020-12-20 00:54:19','2020-12-20 00:54:19','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 00:54:19','2020-12-20 00:54:19','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(20,1,'2020-12-20 01:00:47','2020-12-20 01:00:47','','screenshot-wpcode.dev_.cc-2020.12.19-20_00_24','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-20_00_24','','','2020-12-20 01:00:47','2020-12-20 01:00:47','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png',0,'attachment','image/png',0),(21,1,'2020-12-20 01:00:52','2020-12-20 01:00:52','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:00:52','2020-12-20 01:00:52','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(22,1,'2020-12-20 01:04:29','2020-12-20 01:04:29','','screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-20_00_24-1','','','2020-12-20 01:04:29','2020-12-20 01:04:29','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1.png',0,'attachment','image/png',0),(23,1,'2020-12-20 01:04:31','2020-12-20 01:04:31','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":22,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24-1.png\" alt=\"\" class=\"wp-image-22\"/></figure>\n<!-- /wp:image -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:04:31','2020-12-20 01:04:31','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(24,1,'2020-12-20 01:04:53','2020-12-20 01:04:53','','screenshot-wpcode.dev.cc-2020.12.19-20_04_40','','inherit','open','closed','','screenshot-wpcode-dev-cc-2020-12-19-20_04_40','','','2020-12-20 01:04:53','2020-12-20 01:04:53','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png',0,'attachment','image/png',0),(25,1,'2020-12-20 01:04:57','2020-12-20 01:04:57','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:04:57','2020-12-20 01:04:57','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(27,1,'2020-12-20 01:12:57','2020-12-20 01:12:57','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option which is why it\'s required in any base theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:12:57','2020-12-20 01:12:57','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(28,1,'2020-12-20 01:15:22','2020-12-20 01:15:22','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:15:22','2020-12-20 01:15:22','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(29,1,'2020-12-20 01:20:53','2020-12-20 01:20:53','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 5) This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:20:53','2020-12-20 01:20:53','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(30,1,'2020-12-20 01:22:38','2020-12-20 01:22:38','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 5) This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;h3>---------- LOOP CONTENT BELOW ---------&lt;/h3>\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:22:38','2020-12-20 01:22:38','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(31,1,'2020-12-20 01:23:42','2020-12-20 01:23:42','','screenshot-wpcode.dev_.cc-2020.12.19-20_22_43','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-20_22_43','','','2020-12-20 01:23:42','2020-12-20 01:23:42','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png',0,'attachment','image/png',0),(32,1,'2020-12-20 01:24:57','2020-12-20 01:24:57','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 5) This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;h3>---------- LOOP CONTENT BELOW ---------&lt;/h3>\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:24:57','2020-12-20 01:24:57','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(33,1,'2020-12-20 01:28:13','2020-12-20 01:28:13','<!-- wp:paragraph -->\n<p>We teach people to <strong>code in WP for free baby</strong>, sometimes with a dash of <strong><em>humor</em></strong>, or various forms of attempted humor. Our incessant rhyming of words is designed to stimulate your brain stem.</p>\n<!-- /wp:paragraph -->','About','','publish','closed','closed','','about','','','2020-12-20 01:29:26','2020-12-20 01:29:26','',0,'http://wpcode.dev.cc/?page_id=33',0,'page','',0),(34,1,'2020-12-20 01:28:13','2020-12-20 01:28:13','<!-- wp:paragraph -->\n<p>We teach people to code in WP for free, sometimes with a dash of humor baby. Our incessant rhyming of words is designed to stimulate your brain stem.</p>\n<!-- /wp:paragraph -->','About','','inherit','closed','closed','','33-revision-v1','','','2020-12-20 01:28:13','2020-12-20 01:28:13','',33,'http://wpcode.dev.cc/33-revision-v1',0,'revision','',0),(35,1,'2020-12-20 01:28:55','2020-12-20 01:28:55','<!-- wp:paragraph -->\n<p>We teach people to <strong>code in WP for free baby</strong>, sometimes with a dash of <strong><em>humor</em></strong>. Our incessant rhyming of words is designed to stimulate your brain stem.</p>\n<!-- /wp:paragraph -->','About','','inherit','closed','closed','','33-autosave-v1','','','2020-12-20 01:28:55','2020-12-20 01:28:55','',33,'http://wpcode.dev.cc/33-autosave-v1',0,'revision','',0),(36,1,'2020-12-20 01:29:26','2020-12-20 01:29:26','<!-- wp:paragraph -->\n<p>We teach people to <strong>code in WP for free baby</strong>, sometimes with a dash of <strong><em>humor</em></strong>, or various forms of attempted humor. Our incessant rhyming of words is designed to stimulate your brain stem.</p>\n<!-- /wp:paragraph -->','About','','inherit','closed','closed','','33-revision-v1','','','2020-12-20 01:29:26','2020-12-20 01:29:26','',33,'http://wpcode.dev.cc/33-revision-v1',0,'revision','',0),(37,1,'2020-12-20 01:42:44','2020-12-20 01:42:44','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin > Appearance > Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;h1>Welcome to WPCode&lt;/h1>\n&lt;p>You\'re in the right place to learn to code in WP for free baby!&lt;/p>\n\n&lt;h3>---------- LOOP CONTENT BELOW ---------&lt;/h3>\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:42:44','2020-12-20 01:42:44','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(39,1,'2020-12-20 01:50:06','2020-12-20 01:50:06','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?>\n\n  &lt;h1>&lt;?php the_title(); ?>&lt;/h1>\n  &lt;div class=\"main-content\">\n    &lt;?php the_content(); ?>\n  &lt;/div>\n\n&lt;?php\n  endwhile;\nendif;\n?>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1> tag and the content goes inside of a &lt;div>, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:50:06','2020-12-20 01:50:06','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(40,1,'2020-12-20 01:51:13','2020-12-20 01:51:13','','screenshot-wpcode.dev_.cc-2020.12.19-20_50_24','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-20_50_24','','','2020-12-20 01:51:13','2020-12-20 01:51:13','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png',0,'attachment','image/png',0),(41,1,'2020-12-20 01:51:15','2020-12-20 01:51:15','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?>\n\n  &lt;h1>&lt;?php the_title(); ?>&lt;/h1>\n  &lt;div class=\"main-content\">\n    &lt;?php the_content(); ?>\n  &lt;/div>\n\n&lt;?php\n  endwhile;\nendif;\n?>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1> tag and the content goes inside of a &lt;div>, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 01:51:15','2020-12-20 01:51:15','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(42,1,'2020-12-20 02:10:39','2020-12-20 02:10:39','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?>\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?>\n\n  &lt;h1>&lt;?php the_title(); ?>&lt;/h1>\n  &lt;div class=\"main-content\">\n    &lt;?php the_content(); ?>\n  &lt;/div>\n\n&lt;?php\n  endwhile;\nendif;\n?>\n\n&lt;?php get_footer(); ?></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1> tag and the content goes inside of a &lt;div>, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 02:10:39','2020-12-20 02:10:39','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(44,1,'2020-12-20 02:30:08','2020-12-20 02:30:08','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch step-by-step','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 02:30:08','2020-12-20 02:30:08','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(46,1,'2020-12-20 02:32:30','2020-12-20 02:32:30','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 1 Create the directory. We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 02:32:30','2020-12-20 02:32:30','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(48,1,'2020-12-20 02:33:07','2020-12-20 02:33:07','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 02:33:07','2020-12-20 02:33:07','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(50,1,'2020-12-20 02:35:35','2020-12-20 02:35:35','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 02:35:35','2020-12-20 02:35:35','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(52,1,'2020-12-20 03:07:10','2020-12-20 03:07:10','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:07:10','2020-12-20 03:07:10','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(54,1,'2020-12-20 03:22:09','2020-12-20 03:22:09','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:22:09','2020-12-20 03:22:09','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(56,1,'2020-12-20 03:29:18','2020-12-20 03:29:18','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:29:18','2020-12-20 03:29:18','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(58,1,'2020-12-20 03:36:34','2020-12-20 03:36:34','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\">\n  &lt;div>WPCODE&lt;/div>\n&lt;/header></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:36:34','2020-12-20 03:36:34','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(60,1,'2020-12-20 03:43:53','2020-12-20 03:43:53','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\">\n  &lt;div>WPCODE&lt;/div>\n&lt;/header></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer>&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body> and &lt;html> tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer> tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer> tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\">\n  &lt;div class=\"text-logo\">WPCODE&lt;/div>\n  &lt;div class=\"copyright\">&amp;copy; 2020 WPCODE&lt;/div>\n&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:43:53','2020-12-20 03:43:53','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(62,1,'2020-12-20 03:45:01','2020-12-20 03:45:01','','screenshot-wpcode.dev_.cc-2020.12.19-22_44_06','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-19-22_44_06','','','2020-12-20 03:45:01','2020-12-20 03:45:01','',13,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png',0,'attachment','image/png',0),(63,1,'2020-12-20 03:46:23','2020-12-20 03:46:23','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\">\n  &lt;div>WPCODE&lt;/div>\n&lt;/header></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer>&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body> and &lt;html> tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer> tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer> tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\">\n  &lt;div class=\"text-logo\">WPCODE&lt;/div>\n  &lt;div class=\"copyright\">&amp;copy; 2020 WPCODE&lt;/div>\n&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result on the front-end should now look something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":62,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\" alt=\"\" class=\"wp-image-62\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>And now, congratulations because 100% of the output to the front-end is coming from the template and it\'s custom header and footer includes. You are for the most part, in complete control of the rendering of the site. And that\'s exactly why building custom themes is a powerful and liberating way of approaching WordPress development. <strong>Let\'s continue onward shall we?</strong></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:46:23','2020-12-20 03:46:23','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(65,1,'2020-12-20 03:48:12','2020-12-20 03:48:12','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\">\n  &lt;div>WPCODE&lt;/div>\n&lt;/header></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer>&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body> and &lt;html> tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer> tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer> tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\">\n  &lt;div class=\"text-logo\">WPCODE&lt;/div>\n  &lt;div class=\"copyright\">&amp;copy; 2020 WPCODE&lt;/div>\n&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result on the front-end should now look something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":62,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\" alt=\"\" class=\"wp-image-62\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>And now, congratulations because 100% of the output to the front-end is coming from the template and it\'s custom header and footer includes. You are for the most part, in complete control of the rendering of the site. And that\'s exactly why building custom themes is a powerful and liberating way of approaching WordPress development. <strong>Let\'s continue onward shall we?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>If you\'re enjoying this content so far please consider taking a moment to share it on social media or leave us a comment below. These actions help us reach more great folks like yourself and also to keep the content flowing and free flowing here at WPCODE. Thanks!</p></blockquote></figure>\n<!-- /wp:pullquote -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:48:12','2020-12-20 03:48:12','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(67,1,'2020-12-20 03:51:09','2020-12-20 03:51:09','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\">\n  &lt;div>WPCODE&lt;/div>\n&lt;/header></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer>&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body> and &lt;html> tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer> tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer> tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\">\n  &lt;div class=\"text-logo\">WPCODE&lt;/div>\n  &lt;div class=\"copyright\">&amp;copy; 2020 WPCODE&lt;/div>\n&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result on the front-end should now look something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":62,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\" alt=\"\" class=\"wp-image-62\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>And now, congratulations because 100% of the output to the front-end is coming from the template and it\'s custom header and footer includes. You are for the most part, in complete control of the rendering of the site. And that\'s exactly why building custom themes is a powerful and liberating way of approaching WordPress development. <strong>Let\'s continue onward shall we?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2>Are you enjoying how to build a custom WordPress theme from scratch so far?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>If you\'re enjoying this content so far please consider taking a moment to share it on social media or leave us a comment below. These actions help us reach more great folks like yourself and also to keep the content flowing and free flowing here at WPCODE. Thanks!</p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 10) A few rapid fire dashes of CSS to spruce things up a bit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:51:09','2020-12-20 03:51:09','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(68,1,'2020-12-20 03:51:45','2020-12-20 03:51:45','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"how to build a custom WordPress theme from scratch\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?>>\n\n	&lt;head>\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?>\">\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" >\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\">\n\n		&lt;?php wp_head(); ?>\n\n	&lt;/head>\n\n	&lt;body &lt;?php body_class(); ?>></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\">\n  &lt;div>WPCODE&lt;/div>\n&lt;/header></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer>&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body> and &lt;html> tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer> tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer> tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\">\n  &lt;div class=\"text-logo\">WPCODE&lt;/div>\n  &lt;div class=\"copyright\">&amp;copy; 2020 WPCODE&lt;/div>\n&lt;/footer>\n\n&lt;?php wp_footer(); ?>\n\n&lt;/body>\n&lt;/html></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result on the front-end should now look something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":62,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\" alt=\"\" class=\"wp-image-62\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>And now, congratulations because 100% of the output to the front-end is coming from the template and it\'s custom header and footer includes. You are for the most part, in complete control of the rendering of the site. And that\'s exactly why building custom themes is a powerful and liberating way of approaching WordPress development. <strong>Let\'s continue onward shall we?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2>Are you enjoying how to build a custom WordPress theme from scratch so far?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>If you\'re enjoying this content so far please consider taking a moment to share it on social media or leave us a comment below. These actions help us reach more great folks like yourself and also to keep the content flowing and free flowing here at WPCODE. Thanks!</p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 10) A few rapid fire dashes of CSS to spruce things up a bit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2020-12-20 03:51:45','2020-12-20 03:51:45','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(69,1,'2020-12-20 15:20:31','2020-12-20 15:20:31','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?&gt; as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?&gt;\n\n&lt;h1&gt;Now we\'re out of PHP and into regular HTML&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2>Introducing PHP Arrays</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are 2 syntax options for creating a new array in PHP:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// named array() function\n$cats = array(\'tabitha\', \'gerald\', \'max\');\n\n// short bracket notation &#91;]\n$cats = &#91;\'tabitha\', \'gerald\', \'max\'];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each array defined above are identical, so it is personal preference in terms of how you setup your arrays. We prefer using short brackets, and when you use most editors you\'ll find that this enables you to open the arrow with the open bracket [ and have the close bracket ] placed automatically.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP supports multidimensional arrays in addition to simple arrays like those shown above. You can therefore nest arrays inside of arrays, another common usage is to create an array that contains objects or other mixed data such as objects, arrays and/or strings. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user = &#91;\n  \'id\' => 59,\n  \'username\' => \'timsmith59\',\n  \'profile_image\' => &#91;\n    \'url\' => \'https://cdn.amazons3.com/293848392\',\n    \'size\' => \'medium\',\n    \'width\' => 400,\n    \'height\' => 300\n  ]\n]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we have an array of user data. The first two elements are strings and number data, the ID and the username. Then for the profile_image we have a nested array of data. Notice the use of the equals sign followed by the right array => to set the value of array parameters. You\'ll trigger an error if you were to incorrectly use only an = sign the way you\'re used to when setting up variables. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Learn PHP Functions </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As in most programming languages functions are used to organize code into modular pieces. Most of the code you write in PHP will be organized into functions, and within these functions you will likely call other functions. We\'ll talk later about object-oriented programming where functions are organized into classes and also where they become known by the OO (Object-Oriented) terminology \"methods\". For now just remember that when somebody talks about methods, they mean functions contained within a class structure. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions are defined starting with the keyword \"function\" shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function do_stuff() {\n  // this is where stuff is done inside the curly braces {} of the function. \n}\n\n// time to call our function do_stuff \ndo_stuff();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now let\'s set a variable and pass it to the function as an argument. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user_first_name = \"Katrina\";\nshow_user_name( $user_first_name );\n\nfunction show_user_name( $name ) {\n  print $name;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should now see \"Katrina\" printed to the screen when you run this code. Notice that we named our variable  $user_first_name and set the value, then passed it into the show_user_name() function, but inside that function the variable is $name. This is because inside the function you use whatever the argument name is, in this case $name. The function does not care whether a string was passed in or a variable holding a string, and the name of that variable is not relevant to it. The only thing that matters is the function requires 1 argument. If you were to call show_user_name() without the argument, it would create an error for the missing argument. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next were going to show how functions can have optional arguments. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user_first_name = \"Katrina\";\nshow_user_name( $user_first_name );\n\nfunction show_user_name( $name_first, $name_last = false ) {\n  print $name_first;\n  if( $name_last ) {\n    print $name_last;\n  }\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this example we add $name_last argument as a second and optional argument to the show_user_name function. It has the default set to false, and the way we call it in the example we only pass the first name. This will work fine, and inside the function we use an IF statement (which you\'ll learn about more in the next section) to check if $name_last is set. If it is set we\'ll print the last name. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Try now calling the argument with both arguments like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>show_user_name( \"Tiger\", \"Woods\" );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should now see both names printed as \"TigerWoods\". <em>In practice we\'d want to also create a space or separate the names when we\'re printing multiple strings like this. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Learn PHP for WordPress in 30 minutes','','publish','open','open','','learn-php-in-30-minutes','','','2020-12-20 17:57:22','2020-12-20 17:57:22','',0,'http://wpcode.dev.cc/?p=69',0,'post','',0),(70,1,'2020-12-20 15:20:31','2020-12-20 15:20:31','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?> as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?>\n\n&lt;h1>Now we\'re out of PHP and into regular HTML&lt;/h1></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Learn PHP in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 15:20:31','2020-12-20 15:20:31','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(72,1,'2020-12-20 15:23:03','2020-12-20 15:23:03','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?> as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?>\n\n&lt;h1>Now we\'re out of PHP and into regular HTML&lt;/h1></code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->','Learn PHP in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 15:23:03','2020-12-20 15:23:03','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(75,2,'2020-12-20 15:47:36','2020-12-20 15:47:36','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?&gt; as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?&gt;\n\n&lt;h1&gt;Now we\'re out of PHP and into regular HTML&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2>Introducing PHP Arrays</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are 2 syntax options for creating a new array in PHP:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// named array() function\n$cats = array(\'tabitha\', \'gerald\', \'max\');\n\n// short bracket notation &#91;]\n$cats = &#91;\'tabitha\', \'gerald\', \'max\'];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each array defined above are identical, so it is personal preference in terms of how you setup your arrays. We prefer using short brackets, and when you use most editors you\'ll find that this enables you to open the arrow with the open bracket [ and have the close bracket ] placed automatically.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP supports multidimensional arrays in addition to simple arrays like those shown above. You can therefore nest arrays inside of arrays, another common usage is to create an array that contains objects or other mixed data such as objects, arrays and/or strings. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Learn PHP in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 15:47:36','2020-12-20 15:47:36','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(76,2,'2020-12-20 15:53:45','2020-12-20 15:53:45','<!-- wp:paragraph -->\n<p>Welcome to WP Code where you can learn WordPress coding skills for free. Here we teach code in a WP-specific context. Our lessons and tutorial include PHP, various forms of Javascript including jQuery, modern JS and React. We also cover front-end development including WP theme building, template development, HTML5 and CSS.</p>\n<!-- /wp:paragraph -->','Home','','publish','closed','closed','','home','','','2020-12-20 16:55:32','2020-12-20 16:55:32','',0,'http://wpcode.dev.cc/?page_id=76',0,'page','',0),(77,2,'2020-12-20 15:53:45','2020-12-20 15:53:45','','Home','','inherit','closed','closed','','76-revision-v1','','','2020-12-20 15:53:45','2020-12-20 15:53:45','',76,'http://wpcode.dev.cc/76-revision-v1',0,'revision','',0),(78,2,'2020-12-20 15:53:58','2020-12-20 15:53:58','','Blog','','publish','closed','closed','','blog','','','2020-12-20 15:53:59','2020-12-20 15:53:59','',0,'http://wpcode.dev.cc/?page_id=78',0,'page','',0),(79,2,'2020-12-20 15:53:58','2020-12-20 15:53:58','','Blog','','inherit','closed','closed','','78-revision-v1','','','2020-12-20 15:53:58','2020-12-20 15:53:58','',78,'http://wpcode.dev.cc/78-revision-v1',0,'revision','',0),(81,2,'2020-12-20 15:59:54','2020-12-20 15:59:54','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?&gt; as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?&gt;\n\n&lt;h1&gt;Now we\'re out of PHP and into regular HTML&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2>Introducing PHP Arrays</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are 2 syntax options for creating a new array in PHP:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// named array() function\n$cats = array(\'tabitha\', \'gerald\', \'max\');\n\n// short bracket notation &#91;]\n$cats = &#91;\'tabitha\', \'gerald\', \'max\'];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each array defined above are identical, so it is personal preference in terms of how you setup your arrays. We prefer using short brackets, and when you use most editors you\'ll find that this enables you to open the arrow with the open bracket [ and have the close bracket ] placed automatically.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP supports multidimensional arrays in addition to simple arrays like those shown above. You can therefore nest arrays inside of arrays, another common usage is to create an array that contains objects or other mixed data such as objects, arrays and/or strings. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user = &#91;\n  \'id\' => 59,\n  \'username\' => \'timsmith59\',\n  \'profile_image\' => &#91;\n    \'url\' => \'https://cdn.amazons3.com/293848392\',\n    \'size\' => \'medium\',\n    \'width\' => 400,\n    \'height\' => 300\n  ]\n]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we have an array of user data. The first two elements are strings and number data, the ID and the username. Then for the profile_image we have a nested array of data. Notice the use of the equals sign followed by the right array => to set the value of array parameters. You\'ll trigger an error if you were to incorrectly use only an = sign the way you\'re used to when setting up variables. </p>\n<!-- /wp:paragraph -->','Learn PHP in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 15:59:54','2020-12-20 15:59:54','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(84,2,'2020-12-20 16:53:49','2020-12-20 16:53:49','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?&gt; as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?&gt;\n\n&lt;h1&gt;Now we\'re out of PHP and into regular HTML&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2>Introducing PHP Arrays</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are 2 syntax options for creating a new array in PHP:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// named array() function\n$cats = array(\'tabitha\', \'gerald\', \'max\');\n\n// short bracket notation &#91;]\n$cats = &#91;\'tabitha\', \'gerald\', \'max\'];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each array defined above are identical, so it is personal preference in terms of how you setup your arrays. We prefer using short brackets, and when you use most editors you\'ll find that this enables you to open the arrow with the open bracket [ and have the close bracket ] placed automatically.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP supports multidimensional arrays in addition to simple arrays like those shown above. You can therefore nest arrays inside of arrays, another common usage is to create an array that contains objects or other mixed data such as objects, arrays and/or strings. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user = &#91;\n  \'id\' => 59,\n  \'username\' => \'timsmith59\',\n  \'profile_image\' => &#91;\n    \'url\' => \'https://cdn.amazons3.com/293848392\',\n    \'size\' => \'medium\',\n    \'width\' => 400,\n    \'height\' => 300\n  ]\n]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we have an array of user data. The first two elements are strings and number data, the ID and the username. Then for the profile_image we have a nested array of data. Notice the use of the equals sign followed by the right array => to set the value of array parameters. You\'ll trigger an error if you were to incorrectly use only an = sign the way you\'re used to when setting up variables. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Learn PHP Functions </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As in most programming languages functions are used to organize code into modular pieces. Most of the code you write in PHP will be organized into functions, and within these functions you will likely call other functions. We\'ll talk later about object-oriented programming where functions are organized into classes and also where they become known by the OO (Object-Oriented) terminology \"methods\". For now just remember that when somebody talks about methods, they mean functions contained within a class structure. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions are defined starting with the keyword \"function\" shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function do_stuff() {\n  // this is where stuff is done inside the curly braces {} of the function. \n}\n\n// time to call our function do_stuff \ndo_stuff();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Learn PHP in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 16:53:49','2020-12-20 16:53:49','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(85,2,'2020-12-20 16:55:31','2020-12-20 16:55:31','<!-- wp:paragraph -->\n<p>Welcome to WP Code where you can learn WordPress coding skills for free. Here we teach code in a WP-specific context. Our lessons and tutorial include PHP, various forms of Javascript including jQuery, modern JS and React. We also cover front-end development including WP theme building, template development, HTML5 and CSS.</p>\n<!-- /wp:paragraph -->','Home','','inherit','closed','closed','','76-revision-v1','','','2020-12-20 16:55:31','2020-12-20 16:55:31','',76,'http://wpcode.dev.cc/76-revision-v1',0,'revision','',0),(87,2,'2020-12-20 17:21:27','2020-12-20 17:21:27','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?&gt; as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?&gt;\n\n&lt;h1&gt;Now we\'re out of PHP and into regular HTML&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2>Introducing PHP Arrays</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are 2 syntax options for creating a new array in PHP:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// named array() function\n$cats = array(\'tabitha\', \'gerald\', \'max\');\n\n// short bracket notation &#91;]\n$cats = &#91;\'tabitha\', \'gerald\', \'max\'];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each array defined above are identical, so it is personal preference in terms of how you setup your arrays. We prefer using short brackets, and when you use most editors you\'ll find that this enables you to open the arrow with the open bracket [ and have the close bracket ] placed automatically.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP supports multidimensional arrays in addition to simple arrays like those shown above. You can therefore nest arrays inside of arrays, another common usage is to create an array that contains objects or other mixed data such as objects, arrays and/or strings. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user = &#91;\n  \'id\' => 59,\n  \'username\' => \'timsmith59\',\n  \'profile_image\' => &#91;\n    \'url\' => \'https://cdn.amazons3.com/293848392\',\n    \'size\' => \'medium\',\n    \'width\' => 400,\n    \'height\' => 300\n  ]\n]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we have an array of user data. The first two elements are strings and number data, the ID and the username. Then for the profile_image we have a nested array of data. Notice the use of the equals sign followed by the right array => to set the value of array parameters. You\'ll trigger an error if you were to incorrectly use only an = sign the way you\'re used to when setting up variables. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Learn PHP Functions </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As in most programming languages functions are used to organize code into modular pieces. Most of the code you write in PHP will be organized into functions, and within these functions you will likely call other functions. We\'ll talk later about object-oriented programming where functions are organized into classes and also where they become known by the OO (Object-Oriented) terminology \"methods\". For now just remember that when somebody talks about methods, they mean functions contained within a class structure. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions are defined starting with the keyword \"function\" shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function do_stuff() {\n  // this is where stuff is done inside the curly braces {} of the function. \n}\n\n// time to call our function do_stuff \ndo_stuff();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now let\'s set a variable and pass it to the function as an argument. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user_first_name = \"Katrina\";\nshow_user_name( $user_first_name );\n\nfunction show_user_name( $name ) {\n  print $name;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should now see \"Katrina\" printed to the screen when you run this code. Notice that we named our variable  $user_first_name and set the value, then passed it into the show_user_name() function, but inside that function the variable is $name. This is because inside the function you use whatever the argument name is, in this case $name. The function does not care whether a string was passed in or a variable holding a string, and the name of that variable is not relevant to it. The only thing that matters is the function requires 1 argument. If you were to call show_user_name() without the argument, it would create an error for the missing argument. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next were going to show how functions can have optional arguments. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user_first_name = \"Katrina\";\nshow_user_name( $user_first_name );\n\nfunction show_user_name( $name_first, $name_last = false ) {\n  print $name_first;\n  if( $name_last ) {\n    print $name_last;\n  }\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this example we add $name_last argument as a second and optional argument to the show_user_name function. It has the default set to false, and the way we call it in the example we only pass the first name. This will work fine, and inside the function we use an IF statement (which you\'ll learn about more in the next section) to check if $name_last is set. If it is set we\'ll print the last name. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Try now calling the argument with both arguments like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>show_user_name( \"Tiger\", \"Woods\" );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should now see both names printed as \"TigerWoods\". <em>In practice we\'d want to also create a space or separate the names when we\'re printing multiple strings like this. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Learn PHP in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 17:21:27','2020-12-20 17:21:27','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(88,2,'2020-12-20 17:21:59','2020-12-20 17:21:59','<!-- wp:paragraph -->\n<p>Need to learn PHP ASAP? This is a rapid fire class to help you learn PHP in 30 minutes. Obviously we won\'t be covering every damned thing, but we will get you up and running with PHP inside of WordPress so that you can get to work writing awesome PHP functionality. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need a working WordPress install. You\'ll need a code editor. You\'ll need your WP site to be running either locally or on a server, and if it\'s on a server you\'ll need FTP to be able to drop files into your WP site. If any of those steps are not done already go research and handle that and then come back. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>First thing you\'re going to do is setup a page to run PHP in WordPress. The fastest way to do this is to create a custom page template at the root of your active theme. At this point for practice, we don\'t care if the theme is a starter theme from WP, a 3rd party theme or a child theme. Just add the following file to the root, page-test.php. Then go into the WP Admin and make a page with the title \"Test\" and the permalink should be \'test\'. Save your page, then visit it. You should now see your page-test.php, currently empty, loading in the front-end.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now add an opening tag plus a print statement to do the hello world as shown below. This is saved to your page-test.php:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nprint \"Hello wonderful world\";</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>After refreshing the page you should now see \"Hello wonderful world\" printed to the page. You now have a working PHP file to practice in. You\'ve also learnt that we start PHP blocks with the &lt;?php open tag. Now in a full PHP file, we DO NOT close the PHP tag, we leave it open. However if we need to break out of PHP, usually to write HTML in a mixed PHP/HTML template, then we will use the closing tag ?&gt; as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\n$test = \'Test 123\';\nprint $test;\n\n?&gt;\n\n&lt;h1&gt;Now we\'re out of PHP and into regular HTML&lt;/h1&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This capability to move in and out of PHP has made PHP very effective in rendering content in HTML tags. Now let\'s learn variables. In PHP the variables as in the code block above start with a dollar sign ($) so $vars and $args are both variables. We use the equals sign (=) to set the value of the variable as shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$test = \'Test 123456\';\nvar_dump( $test );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>A handy utility function in PHP is var_dump() which will spit out the value of the variable, array or object that you pass to it. This is very useful in debugging and just seeing what is going on. With a simple variable we could just print the variable to see it\'s value, but using var_dump() is more useful when you have an array or object or when you\'re just not sure what a variable is, it could for instance be a boolean value like false. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When variables are set to strings we use either single or double quotes around the string, whereas with numbers we can often omit this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$number = 5;\nprint $number;\nvar_dump( $number );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:heading -->\n<h2>Introducing PHP Arrays</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>There are 2 syntax options for creating a new array in PHP:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>// named array() function\n$cats = array(\'tabitha\', \'gerald\', \'max\');\n\n// short bracket notation &#91;]\n$cats = &#91;\'tabitha\', \'gerald\', \'max\'];</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Each array defined above are identical, so it is personal preference in terms of how you setup your arrays. We prefer using short brackets, and when you use most editors you\'ll find that this enables you to open the arrow with the open bracket [ and have the close bracket ] placed automatically.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>PHP supports multidimensional arrays in addition to simple arrays like those shown above. You can therefore nest arrays inside of arrays, another common usage is to create an array that contains objects or other mixed data such as objects, arrays and/or strings. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user = &#91;\n  \'id\' => 59,\n  \'username\' => \'timsmith59\',\n  \'profile_image\' => &#91;\n    \'url\' => \'https://cdn.amazons3.com/293848392\',\n    \'size\' => \'medium\',\n    \'width\' => 400,\n    \'height\' => 300\n  ]\n]</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In the example above we have an array of user data. The first two elements are strings and number data, the ID and the username. Then for the profile_image we have a nested array of data. Notice the use of the equals sign followed by the right array => to set the value of array parameters. You\'ll trigger an error if you were to incorrectly use only an = sign the way you\'re used to when setting up variables. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Learn PHP Functions </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>As in most programming languages functions are used to organize code into modular pieces. Most of the code you write in PHP will be organized into functions, and within these functions you will likely call other functions. We\'ll talk later about object-oriented programming where functions are organized into classes and also where they become known by the OO (Object-Oriented) terminology \"methods\". For now just remember that when somebody talks about methods, they mean functions contained within a class structure. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions are defined starting with the keyword \"function\" shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>function do_stuff() {\n  // this is where stuff is done inside the curly braces {} of the function. \n}\n\n// time to call our function do_stuff \ndo_stuff();</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now let\'s set a variable and pass it to the function as an argument. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user_first_name = \"Katrina\";\nshow_user_name( $user_first_name );\n\nfunction show_user_name( $name ) {\n  print $name;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should now see \"Katrina\" printed to the screen when you run this code. Notice that we named our variable  $user_first_name and set the value, then passed it into the show_user_name() function, but inside that function the variable is $name. This is because inside the function you use whatever the argument name is, in this case $name. The function does not care whether a string was passed in or a variable holding a string, and the name of that variable is not relevant to it. The only thing that matters is the function requires 1 argument. If you were to call show_user_name() without the argument, it would create an error for the missing argument. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next were going to show how functions can have optional arguments. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>$user_first_name = \"Katrina\";\nshow_user_name( $user_first_name );\n\nfunction show_user_name( $name_first, $name_last = false ) {\n  print $name_first;\n  if( $name_last ) {\n    print $name_last;\n  }\n\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In this example we add $name_last argument as a second and optional argument to the show_user_name function. It has the default set to false, and the way we call it in the example we only pass the first name. This will work fine, and inside the function we use an IF statement (which you\'ll learn about more in the next section) to check if $name_last is set. If it is set we\'ll print the last name. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Try now calling the argument with both arguments like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>show_user_name( \"Tiger\", \"Woods\" );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>You should now see both names printed as \"TigerWoods\". <em>In practice we\'d want to also create a space or separate the names when we\'re printing multiple strings like this. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Learn PHP for WordPress in 30 minutes','','inherit','closed','closed','','69-revision-v1','','','2020-12-20 17:21:59','2020-12-20 17:21:59','',69,'http://wpcode.dev.cc/69-revision-v1',0,'revision','',0),(89,1,'2020-12-24 12:09:38','2020-12-24 12:09:38','<!-- wp:paragraph -->\n<p>Menu\'s are one of the most important aspects of a site. Choosing the right elements, the positioning, it can make a huge difference in the user experience. In WordPress there is a menu system, which you\'re probably familiar with already. It enables you to build the menu structure through the WP Admin, under WP Admin &gt; Appearance &gt; Menu. Most themes then provide menu location(s), and most have at least a few. There are also many plugins that provide various forms of menu integration and customization. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you rely entirely on themes and plugins to provide menu handling for you, then you miss out on the opportunity to create custom menus. For instance although many \"mega menu\" plugins exist, it can be very difficult to get the exact result you might want using 3rd party solutions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to custom menus is first having solid HTML5/CSS skills, and then learning the PHP needed to render custom menus in a unique way, and finally a dash of Javascript and/or jQuery is usually needed as well. This is mainly a front-end development project, but because it can involve some PHP as well we can term it to require full-stack skills. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s important to understand that a Menu and a Menu Location are 2 different things in WordPress. Themes are required to \"register locations\" rather than specifying menu\'s directly. This makes themes more versatile because admin users can make any menu they want and then drop it into a location for display. In practice however the relationship between a menu and it\'s location is almost always 1:1 because when would you ever want to stack a menu on top of another menu? Even in an area like the footer where you might want multiple menu\'s to display, odds are these will be separate menu\'s in separate locations because you need some markup around each one, like for instance the common approach of have multiple columns with a vertical menu in each. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function we use in the theme to register nav menus is<code> register_nav_menus</code>(). This function takes an array as it\'s only argument, and this array should be an associative array where the keys represent the menu location ID and the value is the display label. Notice the display labels are wrapped in the localization function __() to enable translation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_nav_menus( array(\n  \'primary_menu\' =&gt; __( \'Primary Menu\', \'text_domain\' ),\n  \'footer_menu\'  =&gt; __( \'Footer Menu\', \'text_domain\' ),\n));</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In practice \"text_domain\" should be replaced with the text domain for your theme which is a unique string, often a lowercased form of the theme name. This is used by translators to target your theme\'s text. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Rendering Menu\'s with wp_nav_menu()</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next function we\'ll use is wp_nav_menu() which is used to render menu locations. A minimal example is shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp_nav_menu( array( \'theme_location\' =&gt; \'header-menu\' ) );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice that \'theme_location\' is specified inside an array. There are many other array arguments that can be used in this display function. This allows themes to do customization to the the render of the navigation menu, but the majority of the HTML and CSS classes are still automatically rendered by WordPress. Which is why later we\'ll cover  making a custom Menu Walker Class, which will give us full control over the output. For many situation however, simply rendering the menu will be sufficient because you can create the styling needed for basic menus entirely with CSS and just by implementing the various classes that WordPress applies to the menu markup. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>When you test rendering of your menu watch out for the automated menu that WordPress will generate if you use the wrong menu location key, or if no menu is attached to the location. This menu would have any pages you\'ve created automatically added, and sometimes you might not notice the difference so it is worth building your menu with specific items that you can identify in a test.</p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Let\'s take a look at what a mostly unstyled menu might look like from our own project here at WPCode.org this was our primary menu being rendered in the header:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":101,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.24-08_35_48.png\" alt=\"\" class=\"wp-image-101\"/><figcaption>A perfect website menu, end of tutorial. Thank you for joining us.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress menu','','publish','open','open','','building-a-custom-wordpress-menu','','','2020-12-24 13:54:09','2020-12-24 13:54:09','',0,'http://wpcode.dev.cc/?p=89',0,'post','',0),(90,1,'2020-12-24 12:09:38','2020-12-24 12:09:38','<!-- wp:paragraph -->\n<p>Menu\'s are one of the most important aspects of a site. Choosing the right elements, the positioning, it can make a huge difference in the user experience. In WordPress there is a menu system, which you\'re probably familiar with already. It enables you to build the menu structure through the WP Admin, under WP Admin > Appearance > Menu. Most themes then provide menu location(s), and most have at least a few. There are also many plugins that provide various forms of menu integration and customization. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you rely entirely on themes and plugins to provide menu handling for you, then you miss out on the opportunity to create custom menus. For instance although many \"mega menu\" plugins exist, it can be very difficult to get the exact result you might want using 3rd party solutions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to custom menus is first having solid HTML5/CSS skills, and then learning the PHP needed to render custom menus in a unique way, and finally a dash of Javascript and/or jQuery is usually needed as well. This is mainly a front-end development project, but because it can involve some PHP as well we can term it to require full-stack skills. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress menu','','inherit','closed','closed','','89-revision-v1','','','2020-12-24 12:09:38','2020-12-24 12:09:38','',89,'http://wpcode.dev.cc/89-revision-v1',0,'revision','',0),(92,1,'2020-12-24 13:02:15','2020-12-24 13:02:15','<!-- wp:paragraph -->\n<p>Menu\'s are one of the most important aspects of a site. Choosing the right elements, the positioning, it can make a huge difference in the user experience. In WordPress there is a menu system, which you\'re probably familiar with already. It enables you to build the menu structure through the WP Admin, under WP Admin &gt; Appearance &gt; Menu. Most themes then provide menu location(s), and most have at least a few. There are also many plugins that provide various forms of menu integration and customization. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you rely entirely on themes and plugins to provide menu handling for you, then you miss out on the opportunity to create custom menus. For instance although many \"mega menu\" plugins exist, it can be very difficult to get the exact result you might want using 3rd party solutions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to custom menus is first having solid HTML5/CSS skills, and then learning the PHP needed to render custom menus in a unique way, and finally a dash of Javascript and/or jQuery is usually needed as well. This is mainly a front-end development project, but because it can involve some PHP as well we can term it to require full-stack skills. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s important to understand that a Menu and a Menu Location are 2 different things in WordPress. Themes are required to \"register locations\" rather than specifying menu\'s directly. This makes themes more versatile because admin users can make any menu they want and then drop it into a location for display. In practice however the relationship between a menu and it\'s location is almost always 1:1 because when would you ever want to stack a menu on top of another menu? Even in an area like the footer where you might want multiple menu\'s to display, odds are these will be separate menu\'s in separate locations because you need some markup around each one, like for instance the common approach of have multiple columns with a vertical menu in each. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function we use in the theme to register nav menus is<code> register_nav_menus</code>(). This function takes an array as it\'s only argument, and this array should be an associative array where the keys represent the menu location ID and the value is the display label. Notice the display labels are wrapped in the localization function __() to enable translation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_nav_menus( array(\n  \'primary_menu\' => __( \'Primary Menu\', \'text_domain\' ),\n  \'footer_menu\'  => __( \'Footer Menu\', \'text_domain\' ),\n));</code></pre>\n<!-- /wp:code -->','Building a custom WordPress menu','','inherit','closed','closed','','89-revision-v1','','','2020-12-24 13:02:15','2020-12-24 13:02:15','',89,'http://wpcode.dev.cc/89-revision-v1',0,'revision','',0),(97,1,'2020-12-24 13:27:52','2020-12-24 13:27:52','<!-- wp:paragraph -->\n<p>Menu\'s are one of the most important aspects of a site. Choosing the right elements, the positioning, it can make a huge difference in the user experience. In WordPress there is a menu system, which you\'re probably familiar with already. It enables you to build the menu structure through the WP Admin, under WP Admin &gt; Appearance &gt; Menu. Most themes then provide menu location(s), and most have at least a few. There are also many plugins that provide various forms of menu integration and customization. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you rely entirely on themes and plugins to provide menu handling for you, then you miss out on the opportunity to create custom menus. For instance although many \"mega menu\" plugins exist, it can be very difficult to get the exact result you might want using 3rd party solutions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to custom menus is first having solid HTML5/CSS skills, and then learning the PHP needed to render custom menus in a unique way, and finally a dash of Javascript and/or jQuery is usually needed as well. This is mainly a front-end development project, but because it can involve some PHP as well we can term it to require full-stack skills. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s important to understand that a Menu and a Menu Location are 2 different things in WordPress. Themes are required to \"register locations\" rather than specifying menu\'s directly. This makes themes more versatile because admin users can make any menu they want and then drop it into a location for display. In practice however the relationship between a menu and it\'s location is almost always 1:1 because when would you ever want to stack a menu on top of another menu? Even in an area like the footer where you might want multiple menu\'s to display, odds are these will be separate menu\'s in separate locations because you need some markup around each one, like for instance the common approach of have multiple columns with a vertical menu in each. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function we use in the theme to register nav menus is<code> register_nav_menus</code>(). This function takes an array as it\'s only argument, and this array should be an associative array where the keys represent the menu location ID and the value is the display label. Notice the display labels are wrapped in the localization function __() to enable translation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_nav_menus( array(\n  \'primary_menu\' => __( \'Primary Menu\', \'text_domain\' ),\n  \'footer_menu\'  => __( \'Footer Menu\', \'text_domain\' ),\n));</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In practice \"text_domain\" should be replaced with the text domain for your theme which is a unique string, often a lowercased form of the theme name. This is used by translators to target your theme\'s text. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Rendering Menu\'s with wp_nav_menu()</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next function we\'ll use is wp_nav_menu() which is used to render menu locations. A minimal example is shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp_nav_menu( array( \'theme_location\' => \'header-menu\' ) );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice that \'theme_location\' is specified inside an array. There are many other array arguments that can be used in this display function. This allows themes to do customization to the the render of the navigation menu, but the majority of the HTML and CSS classes are still automatically rendered by WordPress. Which is why later we\'ll cover  making a custom Menu Walker Class, which will give us full control over the output. For many situation however, simply rendering the menu will be sufficient because you can create the styling needed for basic menus entirely with CSS and just by implementing the various classes that WordPress applies to the menu markup. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress menu','','inherit','closed','closed','','89-revision-v1','','','2020-12-24 13:27:52','2020-12-24 13:27:52','',89,'http://wpcode.dev.cc/89-revision-v1',0,'revision','',0),(99,1,'2020-12-24 13:34:40','2020-12-24 13:34:40','<!-- wp:paragraph -->\n<p>Menu\'s are one of the most important aspects of a site. Choosing the right elements, the positioning, it can make a huge difference in the user experience. In WordPress there is a menu system, which you\'re probably familiar with already. It enables you to build the menu structure through the WP Admin, under WP Admin &gt; Appearance &gt; Menu. Most themes then provide menu location(s), and most have at least a few. There are also many plugins that provide various forms of menu integration and customization. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you rely entirely on themes and plugins to provide menu handling for you, then you miss out on the opportunity to create custom menus. For instance although many \"mega menu\" plugins exist, it can be very difficult to get the exact result you might want using 3rd party solutions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to custom menus is first having solid HTML5/CSS skills, and then learning the PHP needed to render custom menus in a unique way, and finally a dash of Javascript and/or jQuery is usually needed as well. This is mainly a front-end development project, but because it can involve some PHP as well we can term it to require full-stack skills. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s important to understand that a Menu and a Menu Location are 2 different things in WordPress. Themes are required to \"register locations\" rather than specifying menu\'s directly. This makes themes more versatile because admin users can make any menu they want and then drop it into a location for display. In practice however the relationship between a menu and it\'s location is almost always 1:1 because when would you ever want to stack a menu on top of another menu? Even in an area like the footer where you might want multiple menu\'s to display, odds are these will be separate menu\'s in separate locations because you need some markup around each one, like for instance the common approach of have multiple columns with a vertical menu in each. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function we use in the theme to register nav menus is<code> register_nav_menus</code>(). This function takes an array as it\'s only argument, and this array should be an associative array where the keys represent the menu location ID and the value is the display label. Notice the display labels are wrapped in the localization function __() to enable translation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_nav_menus( array(\n  \'primary_menu\' => __( \'Primary Menu\', \'text_domain\' ),\n  \'footer_menu\'  => __( \'Footer Menu\', \'text_domain\' ),\n));</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In practice \"text_domain\" should be replaced with the text domain for your theme which is a unique string, often a lowercased form of the theme name. This is used by translators to target your theme\'s text. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Rendering Menu\'s with wp_nav_menu()</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next function we\'ll use is wp_nav_menu() which is used to render menu locations. A minimal example is shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp_nav_menu( array( \'theme_location\' => \'header-menu\' ) );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice that \'theme_location\' is specified inside an array. There are many other array arguments that can be used in this display function. This allows themes to do customization to the the render of the navigation menu, but the majority of the HTML and CSS classes are still automatically rendered by WordPress. Which is why later we\'ll cover  making a custom Menu Walker Class, which will give us full control over the output. For many situation however, simply rendering the menu will be sufficient because you can create the styling needed for basic menus entirely with CSS and just by implementing the various classes that WordPress applies to the menu markup. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>When you test rendering of your menu watch out for the automated menu that WordPress will generate if you use the wrong menu location key, or if no menu is attached to the location. This menu would have any pages you\'ve created automatically added, and sometimes you might not notice the difference so it is worth building your menu with specific items that you can identify in a test.</p></blockquote></figure>\n<!-- /wp:pullquote -->','Building a custom WordPress menu','','inherit','closed','closed','','89-revision-v1','','','2020-12-24 13:34:40','2020-12-24 13:34:40','',89,'http://wpcode.dev.cc/89-revision-v1',0,'revision','',0),(101,1,'2020-12-24 13:53:40','2020-12-24 13:53:40','','screenshot-wpcode.dev_.cc-2020.12.24-08_35_48','','inherit','open','closed','','screenshot-wpcode-dev_-cc-2020-12-24-08_35_48','','','2020-12-24 13:53:40','2020-12-24 13:53:40','',89,'http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.24-08_35_48.png',0,'attachment','image/png',0),(102,1,'2020-12-24 13:54:08','2020-12-24 13:54:08','<!-- wp:paragraph -->\n<p>Menu\'s are one of the most important aspects of a site. Choosing the right elements, the positioning, it can make a huge difference in the user experience. In WordPress there is a menu system, which you\'re probably familiar with already. It enables you to build the menu structure through the WP Admin, under WP Admin &gt; Appearance &gt; Menu. Most themes then provide menu location(s), and most have at least a few. There are also many plugins that provide various forms of menu integration and customization. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>If you rely entirely on themes and plugins to provide menu handling for you, then you miss out on the opportunity to create custom menus. For instance although many \"mega menu\" plugins exist, it can be very difficult to get the exact result you might want using 3rd party solutions.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The key to custom menus is first having solid HTML5/CSS skills, and then learning the PHP needed to render custom menus in a unique way, and finally a dash of Javascript and/or jQuery is usually needed as well. This is mainly a front-end development project, but because it can involve some PHP as well we can term it to require full-stack skills. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>It\'s important to understand that a Menu and a Menu Location are 2 different things in WordPress. Themes are required to \"register locations\" rather than specifying menu\'s directly. This makes themes more versatile because admin users can make any menu they want and then drop it into a location for display. In practice however the relationship between a menu and it\'s location is almost always 1:1 because when would you ever want to stack a menu on top of another menu? Even in an area like the footer where you might want multiple menu\'s to display, odds are these will be separate menu\'s in separate locations because you need some markup around each one, like for instance the common approach of have multiple columns with a vertical menu in each. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The function we use in the theme to register nav menus is<code> register_nav_menus</code>(). This function takes an array as it\'s only argument, and this array should be an associative array where the keys represent the menu location ID and the value is the display label. Notice the display labels are wrapped in the localization function __() to enable translation. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>register_nav_menus( array(\n  \'primary_menu\' =&gt; __( \'Primary Menu\', \'text_domain\' ),\n  \'footer_menu\'  =&gt; __( \'Footer Menu\', \'text_domain\' ),\n));</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In practice \"text_domain\" should be replaced with the text domain for your theme which is a unique string, often a lowercased form of the theme name. This is used by translators to target your theme\'s text. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Rendering Menu\'s with wp_nav_menu()</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>The next function we\'ll use is wp_nav_menu() which is used to render menu locations. A minimal example is shown below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>wp_nav_menu( array( \'theme_location\' =&gt; \'header-menu\' ) );</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice that \'theme_location\' is specified inside an array. There are many other array arguments that can be used in this display function. This allows themes to do customization to the the render of the navigation menu, but the majority of the HTML and CSS classes are still automatically rendered by WordPress. Which is why later we\'ll cover  making a custom Menu Walker Class, which will give us full control over the output. For many situation however, simply rendering the menu will be sufficient because you can create the styling needed for basic menus entirely with CSS and just by implementing the various classes that WordPress applies to the menu markup. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>When you test rendering of your menu watch out for the automated menu that WordPress will generate if you use the wrong menu location key, or if no menu is attached to the location. This menu would have any pages you\'ve created automatically added, and sometimes you might not notice the difference so it is worth building your menu with specific items that you can identify in a test.</p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Let\'s take a look at what a mostly unstyled menu might look like from our own project here at WPCode.org this was our primary menu being rendered in the header:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":101,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.24-08_35_48.png\" alt=\"\" class=\"wp-image-101\"/><figcaption>A perfect website menu, end of tutorial. Thank you for joining us.</figcaption></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Building a custom WordPress menu','','inherit','closed','closed','','89-revision-v1','','','2020-12-24 13:54:08','2020-12-24 13:54:08','',89,'http://wpcode.dev.cc/89-revision-v1',0,'revision','',0),(103,1,'2020-12-24 14:58:02','2020-12-24 14:58:02','','Tutorials','','publish','closed','closed','','tutorials','','','2020-12-24 14:58:03','2020-12-24 14:58:03','',0,'http://wpcode.dev.cc/?page_id=103',0,'page','',0),(104,1,'2020-12-24 14:58:02','2020-12-24 14:58:02','','Tutorials','','inherit','closed','closed','','103-revision-v1','','','2020-12-24 14:58:02','2020-12-24 14:58:02','',103,'http://wpcode.dev.cc/103-revision-v1',0,'revision','',0),(107,1,'2020-12-24 14:58:45','2020-12-24 14:58:45',' ','','','publish','closed','closed','','107','','','2021-01-01 21:29:30','2021-01-01 21:29:30','',0,'http://wpcode.dev.cc/?p=107',2,'nav_menu_item','',0),(108,1,'2021-01-01 21:19:13','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2021-01-01 21:19:13','0000-00-00 00:00:00','',0,'http://wpcode.dev.cc/?p=108',0,'post','',0),(109,1,'2021-01-01 21:21:02','0000-00-00 00:00:00','','Auto Draft','','auto-draft','open','open','','','','','2021-01-01 21:21:02','0000-00-00 00:00:00','',0,'http://wpcode.dev.cc/?p=109',0,'post','',0),(110,1,'2021-01-01 21:21:42','2021-01-01 21:21:42','<!-- wp:paragraph -->\n<p>For this site WPCode.org (did you know this is where you are???) we wanted a fully custom theme. And that\'s when we thought why not document every step of the process and create a tutorial on how to build a custom WordPress theme from scratch. It turned out to require 87 steps. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to WP or theming, let\'s clarify that there are \"base themes\" and \"child themes\", native WP themes and 3rd party (premium) themes. It\'s our opinion (and we\'re right about it) that most 3rd party themes are bloated and filled with junk code and slow WP sites down. But they look pretty and that\'s what counts? No... no... no.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>We could have built a child theme off a very minimalist theme such as Blocksy, or even on top of the new TwentyTwentyOne shipped with the latest WordPress at the time of our build. We opted instead to do what we\'re most comfortable doing and what works best on our work with any serious WordPress client site. That\'s to start with a fully blank slate. And no, not a theme named \"Slate\" but an actual blank slate. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to go the way of the masses and adopt some existing theme(s) to work with regularly, we highly recommend every developer should know how themes work and at least once build a fully custom theme just you understand what\'s going on under the hood. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 1 Create the theme\'s directory</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We need an empty directory under /wp-content/themes/{theme-name}/ to start. For our project we named the theme simply <strong><em>wpcode</em></strong> so the path is:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/wp-content/themes/wpcode/</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Now if you like TDD (test-driven development) then play along and run a simple test of your theme being able to install right now. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":16,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_50_18.png\" alt=\"how to build a custom WordPress theme from scratch\" class=\"wp-image-16\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>When you visit WP Admin &gt; Appearance &gt; Themes at the bottom of the page under your installed themes list you should see this, the Broken Themes section. Congrats, you\'ve created a broken theme. What I like about this is it actually tells exactly what is wrong. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 2) Make the required <strong><em>style.css</em></strong> file. Make this a totally empty file to start, then repeat the activation test by refreshing the Themes page in the WP Admin. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Congratulations, you have now improved your broken theme and have been rewarded with a new error message, <strong>Template is missing</strong>.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":18,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-19_53_20.png\" alt=\"\" class=\"wp-image-18\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 3) Now we will add the required index.php file. Again add merely an empty file to your theme directory. Now do your activation test again by refreshing the Themes page in the WP Admin. You should now see the theme is ready for activation, the broken themes section is gone and your theme is waiting to be activated. Success at long last. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now I know what you\'re wondering, why did we break this down into 3-steps when you could have just said make a directory and put 2 empty files in it named style.css and index.php. Well, I don\'t have a good answer for you but I hope it demonstrates exactly how minimal the requirements for a custom theme are in WordPress. And by doing \"less\" we now have a truly blank slate to work with. This is instead of opting to make a declaration block in our theme with the details of it\'s name and license etc, this is instead of diving into a loop in our index.php template. We\'ll do those steps later. Just remember in the future whenever you think about what\'s involved in custom theme development, it can start with a folder and 2 empty files. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Activate your custom theme and then head to the front of the site and see your WordPress canvas. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":20,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_00_24.png\" alt=\"\" class=\"wp-image-20\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>Step 4 Let\'s get some minimal output rendering from our main index.php template. We\'ll add the WordPress functions for rendering a header and footer as well as put some text in between, like so:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then refresh the front of your site and you should see something like this rendered. Note that this is rendering a default header template and footer template that WordPress provided when your theme does not have one yet. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":24,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_04_40.png\" alt=\"\" class=\"wp-image-24\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>Key Concept: in WordPress the template hierarchy is used to determine which template file to load. The index template (index.php) is the last or final option, which is why it\'s required in any base (stand-alone) theme. </p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:heading -->\n<h2>Step 5) Adding a post rendering loop. </h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>This point is a fork in the road as a developer because on any real project you will want to make a custom header and footer for your theme. But right now, the default header/footer combo that ships with WP is working fine, so we\'re going to focus on actually rendering content using \"the loop\". </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I suggest you might want to read up on \"the loop\" which you can find detailed in the <a href=\"https://developer.wordpress.org/themes/basics/the-loop/\" target=\"_blank\" rel=\"noreferrer noopener\">official WordPress docs</a> because it\'s an important concept in WP. In short what the loop refers to is iteration over any currently loaded posts. So it has the ability to show either the 1 single post that should be shown like when you\'re visiting a single blog post, or it can show a list of posts like on an archive page. Before we use the loop you would find our theme shows the same static content from the index.php file whether we visit the homepage, a blog post page or an archive page. That\'s because it lacks any rendering of the actual WP post content, even though WordPress is still loading the post(s) for each page. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;h1&gt;Welcome to WPCode&lt;/h1&gt;\n&lt;p&gt;You\'re in the right place to learn to code in WP for free baby!&lt;/p&gt;\n\n&lt;h3&gt;---------- LOOP CONTENT BELOW ---------&lt;/h3&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n    the_title();\n    the_content();\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>When you test for this step make sure you have at least 1 or 2 published test posts with some content so you can see if the content is being rendered. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>In our WP Code project this article I\'m currently writing showed up in the test because the homepage is automatically showing any posts available. <em>Later I\'ll be changing that through the WP settings to show a static home page. </em></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":31,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_22_43.png\" alt=\"\" class=\"wp-image-31\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 6 Adding a page template</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Now we\'re starting to build support for different types of content. Remember the mention of template hierarchy earlier? One of the templates that is \"more specific\" and earlier in the hierarchy than index.php is page.php which is the default page template. Bear in mind that \"pages\" are separate forms of posts in WP, usually used for static site pages like \"home\", \"about\" and so on. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Start by making the page.php file at the root of your theme and then add the following code. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php get_header(); ?&gt;\n\n&lt;?php\nif ( have_posts() ) :\n  while ( have_posts() ) : the_post();\n?&gt;\n\n  &lt;h1&gt;&lt;?php the_title(); ?&gt;&lt;/h1&gt;\n  &lt;div class=\"main-content\"&gt;\n    &lt;?php the_content(); ?&gt;\n  &lt;/div&gt;\n\n&lt;?php\n  endwhile;\nendif;\n?&gt;\n\n&lt;?php get_footer(); ?&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>In comparison to the index.php you\'ll notice just a few edits. First the static test content is gone. This is fully dynamic, it will show only the current page content plus the header/footer. We\'ve broken up the loop into 3 blocks of code. We have the start of the loop using have_posts() and while{}. Then we break out of PHP ending that block, and this allows us to wrap our output in some HTML tags. We wrap the title in an &lt;h1&gt; tag and the content goes inside of a &lt;div&gt;, and we\'ve added our first custom CSS class \"main-content\". The loop then closes in the PHP block below.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>You\'ll need to make a page through the WP admin and then visit that page to test if you\'re new page template is working. We made an \"About Us\" page to do this test, and the result looks like this below:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":40,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-20_50_24.png\" alt=\"\" class=\"wp-image-40\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:heading -->\n<h2>Step 7) Enqueue the theme stylesheet</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>You might imagine that style.css would be automatically included in your theme because it is a requirement for the theme to have this file. However, WordPress no longer includes it by default, it used to. Now you still have to enqueue the file just like any other CSS file or script. To do this first we\'ll make the functions.php file that we need at the root of the theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Functions.php does not have to be included, WordPress automatically detects and load this file very early in the loading process. You can use any WP function or \"hook\" call inside of it. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now if you\'re new to the WP hooks system, you may want to read up on the 2 forms of hooks available which allow developers to run their code at various times. Action hooks in particular are all about timing, whereas filters are about changing (filtering) data that is being used by certain functions. At this point we need an action hook, and we need to use \"wp_enqueue_scripts\" because this is the hook that fires when WordPress is building the list of scripts to include in the header and footer. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;?php \n\nadd_action(\'wp_enqueue_scripts\', \'wpcodeScripts\');\n\nfunction wpcodeScripts() {\n\n  wp_enqueue_style(\n    \'wpcode-main-css\',\n    get_template_directory_uri() . \'/style.css\',\n    &#91;],\n    time()\n  );\n  \n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>First examine the add_action() which hooks into \'wp_enqueue_scripts\'. This is used to setup the timing, so that our inclusion of the style.css file will be made when WP is organizing the different scripts for rendering into the header and footer. The second argument is the name of our callback function which we\'ve named \'wpcodeScripts\'. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Next we have the wpcodeScripts() callback where we put a call to the wp_enqueue_style() function. This core WP function gives WordPress all the details about our script. It takes up to 5 arguments, but we\'ve only used 4. First we specify a unique ID for the script, in this case \'wpcode-main-css\'. Notice how we\'re using the theme name (wpcode) as a prefix to make the ID unique, and we did the same thing with the function itself. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The get_template_directory_uri() function returns the URI/URL for the root of our theme, so we only have to add \'/style.css\' after it to specify the path to our main CSS stylesheet. Note that you do need to include the forward slash as the get_template_directory_uri() will not return the trailing slash. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The 3rd argument for wp_enqueue_style() is an array of dependencies, other stylesheets that our requires. At this point our stylesheet doesn\'t have any dependencies so we just pass an empty array []. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Finally the 4th parameter is actually the version number, so you may be puzzled as to why we have time() function there. This is a little trick to avoid the browser caching our stylesheet during development. Later in production you should search/replace time() in all your script calls, and this would normally be the version number as a string such as \"1.0.0\" or a constant such as THEME_VERSION. Setting it as a constant will make it easier to handle version updates. But for now, time() means a fresh reload of our changes making testing 5X less frustrating. Nothing worse than a cached stylesheet when you\'re trying to do CSS changes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now when you refresh the front of your site and check the source code, you should be able to search for style.css and see it included. You can also put some CSS styles into the sheet for testing purposes as well, something like body { background: #000; } will give you a clear indicator to whether the stylesheet is loaded successfully.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 8) Add reset CSS to normalize element styles </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>When you build a theme entirely from scratch you may find the initial style of elements surprising. And there are some defaults, like list styles that will have to continually be changed as we start to build the UX. A CSS reset tool can help us here, and I\'ll recommend the Reset CSS project from meyerweb.com for this. Simply copy the code from <a href=\"https://meyerweb.com/eric/tools/css/reset/\" class=\"rank-math-link\">https://meyerweb.com/eric/tools/css/reset/</a> into your style.css. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Step 9) Add a custom header</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now it\'s time to replace the default header that WordPress is loading with one of our own. Start by making a header.php file at the root of your theme. If you want to test the result, you\'ll notice looking at the front-end of the site that now there simply is no header. You\'re empty file is now being loaded. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>There are some requirements for the header. In WordPress only the code you choose to render reaches the browser, so if you don\'t include a doctype tag and other required HTML5 sections, then you won\'t end up with valid HTML5.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Below is a very streamlined example of a minimalist header. It has the required HTML5 tags and sections, and it has some recommended WordPress function calls such as language_attributes(). We won\'t go into what each of these does now, but if you want to know the WP Codex can give you an understanding of what each of these does. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\n\n&lt;html class=\"no-js\" &lt;?php language_attributes(); ?&gt;&gt;\n\n	&lt;head&gt;\n\n		&lt;meta charset=\"&lt;?php bloginfo( \'charset\' ); ?&gt;\"&gt;\n		&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" &gt;\n\n		&lt;link rel=\"profile\" href=\"https://gmpg.org/xfn/11\"&gt;\n\n		&lt;?php wp_head(); ?&gt;\n\n	&lt;/head&gt;\n\n	&lt;body &lt;?php body_class(); ?&gt;&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Notice our header ends with the opening body tag, so at this point the header itself does not render anything. What we\'re going to do for now is add a very slim minimalist header with a bit of CSS.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>This part goes into the header.php file under the body open tag:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;header class=\"site-header\"&gt;\n  &lt;div&gt;WPCODE&lt;/div&gt;\n&lt;/header&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Then a bit of CSS is placed into style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Header Styles */\nheader.site-header {\n  background: #484848;\n  font-size: 3.0em;\n  color: #FFF;\n  padding: 20px;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>This was result. It may not win design awards but we\'re keeping it nice and simple here and that lets us get our theme structured rapidly and then we\'ll iterate over later with more focus on styling. The header of course will later need a menu added, but that will be easier to handle now that we already have loaded a custom header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Now the only part of the page auto-generated is the footer, in the next step we\'ll change that.</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Step 9) Add a custom footer</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>Very similar process here to creating the custom header. We start with a footer.php file placed at the root of the theme directory. Below is our starting point for the file:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer&gt;&lt;/footer&gt;\n\n&lt;?php wp_footer(); ?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The wp_footer() call is very important, without that scripts setup to load in the footer won\'t be loaded and that includes the WP admin bar. We also need to close the &lt;body&gt; and &lt;html&gt; tags that were opened in the header. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The &lt;footer&gt; tag is where we\'ll actually put the output from our footer, and as with the header we\'ll quickly draft a basic starting point. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Update the footer.php with our &lt;footer&gt; tag content:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>&lt;footer class=\"site-footer\"&gt;\n  &lt;div class=\"text-logo\"&gt;WPCODE&lt;/div&gt;\n  &lt;div class=\"copyright\"&gt;&amp;copy; 2020 WPCODE&lt;/div&gt;\n&lt;/footer&gt;\n\n&lt;?php wp_footer(); ?&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>Next sprinkle a little CSS on top placing this snippet into the style.css:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:code -->\n<pre class=\"wp-block-code\"><code>/* Footer Styles */\n\nfooter.site-footer {\n  background: #676767;\n  font-size: 1.5em;\n  color: #FFF;\n  padding: 15px;\n}\n\nfooter.site-footer .copyright {\n  font-size: 0.8em;\n}</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:paragraph -->\n<p>The result on the front-end should now look something like this:</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:image {\"id\":62,\"sizeSlug\":\"large\",\"linkDestination\":\"none\"} -->\n<figure class=\"wp-block-image size-large\"><img src=\"http://wpcode.dev.cc/wp-content/uploads/2020/12/screenshot-wpcode.dev_.cc-2020.12.19-22_44_06.png\" alt=\"\" class=\"wp-image-62\"/></figure>\n<!-- /wp:image -->\n\n<!-- wp:paragraph -->\n<p>And now, congratulations because 100% of the output to the front-end is coming from the template and it\'s custom header and footer includes. You are for the most part, in complete control of the rendering of the site. And that\'s exactly why building custom themes is a powerful and liberating way of approaching WordPress development. <strong>Let\'s continue onward shall we?</strong></p>\n<!-- /wp:paragraph -->\n\n<!-- wp:separator -->\n<hr class=\"wp-block-separator\"/>\n<!-- /wp:separator -->\n\n<!-- wp:heading -->\n<h2>Are you enjoying how to build a custom WordPress theme from scratch so far?</h2>\n<!-- /wp:heading -->\n\n<!-- wp:pullquote -->\n<figure class=\"wp-block-pullquote\"><blockquote><p>If you\'re enjoying this content so far please consider taking a moment to share it on social media or leave us a comment below. These actions help us reach more great folks like yourself and also to keep the content flowing and free flowing here at WPCODE. Thanks!</p></blockquote></figure>\n<!-- /wp:pullquote -->\n\n<!-- wp:paragraph -->\n<p>Step 10) A few rapid fire dashes of CSS to spruce things up a bit</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','How to build a custom WordPress theme from scratch in 87 easy steps without going crazy','','inherit','closed','closed','','13-revision-v1','','','2021-01-01 21:21:42','2021-01-01 21:21:42','',13,'http://wpcode.dev.cc/13-revision-v1',0,'revision','',0),(111,1,'2021-01-01 21:26:52','2021-01-01 21:26:52','','Tutorials','','publish','closed','closed','','tutorials','','','2021-01-01 21:29:30','2021-01-01 21:29:30','',0,'http://wpcode.dev.cc/?p=111',1,'nav_menu_item','',0),(113,1,'2021-01-01 21:44:25','2021-01-01 21:44:25','<!-- wp:paragraph -->\n<p>You have 2 options for the placement of custom code in WordPress. Either you create a plugin, or you create (or edit) a theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Some developers coming from other frameworks have the impress that in WordPress there is a lot of complexity and blocking stuff that would get in the way of coding. That\'s a misconception based on the reality that some newcomers especially to freelance development, end up doing work with existing 3rd party code. In other words it\'s the nature of trying to add to an existing plugin or modify an existing theme, that in that situation you have to learn and grapple with the complexity of an existing codebase. And sometimes that will be a relatively undocumented or perhaps poorly coded project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>What I want to impress on you is that in WP you can start with fairly blank slate, not much different from how you start a project using a PHP framework such as Laravel or CodeIgniter, or even a NodeJS project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>I highly recommend that even if you plan to support and work with 3rd party themes, that you experience WP directly by <a href=\"http://wpcode.dev.cc/how-to-build-a-custom-wordpress-theme-from-scratch\" class=\"rank-math-link\">building a simple WordPress theme from scratch</a>. Don\'t be intimidated by the prospect of this challenge. It\'s actually quite simple and we can show you how to get a basic theme installed in under 10-minutes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Even if you plan to work mostly as a plugin developer, it\'s worth knowing how themes work, understanding template hierarchy and other fundamentals of how WordPress delivers content to the browser. This will help you craft plugins that work with themes properly and which can be supported by most themes. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:heading -->\n<h2>Base Theme versus Child Theme</h2>\n<!-- /wp:heading -->\n\n<!-- wp:paragraph -->\n<p>We tend to recommend that you learn and use Base Themes, which are full WP themes on most projects. But we know some of you will want to explore the world of WordPress 3rd party themes, or you\'ll have clients that insist on a certain theme, or you\'ll be taking over the management of an existing site with a theme already installed. In these cases unless you can switch to a new custom base theme, you\'re next best option is a Child Theme. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>Understand that generally \"hacking themes\" is not advised. This would be changing or adding code to an existing theme, especially a 3rd party theme. Even with the WP default themes, again a child theme is recommended instead of changing any of the code contained. The reason is because those themes are not managed by you, their managed by the theme developer. As updated are released, your changed will all be completely over-written, and therefore lost, which will often break a site. Typically as a result of this if you were to hack a theme, you only have 2 options for management and neither are good. One is never update that theme. This is bad because if a security flaw is found and fixed, you don\'t get that fix. When WP updates are made, you\'re theme now falls farther and farther behind and may eventually be obsolete (broken). The other option is you somehow manage your custom changes and repeat those changes after each update. While you might be able to automate this process, if you\'re that technically proficient... why did you hack the theme in the first place? </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p>The one situation where we would not call it \"hacking a theme\" to make changed directly to a 3rd party theme, is when you really have carefully determined you want to manage that entire codebase. In other words you\'ve decided to start with a 3rd party theme, but now you\'re going to adapt it to fit a site, and you\'re never going to use any further updates from the original developer. In other words you\'re forking the project. This could actually be a worthwhile approach to consider in some circumstances. You might really want certain features or styles from a theme, and if you like how the original developer structured it, then you might decide to work from it, and fork the project. </p>\n<!-- /wp:paragraph -->\n\n<!-- wp:paragraph -->\n<p></p>\n<!-- /wp:paragraph -->','Where to organize code in WordPress','','inherit','closed','closed','','6-revision-v1','','','2021-01-01 21:44:25','2021-01-01 21:44:25','',6,'http://wpcode.dev.cc/6-revision-v1',0,'revision','',0);
/*!40000 ALTER TABLE `wp_posts` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_rank_math_404_logs` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `uri` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `accessed` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `times_accessed` bigint(20) unsigned NOT NULL DEFAULT '1',
  `ip` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `referer` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_agent` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `uri` (`uri`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_rank_math_404_logs` WRITE;
/*!40000 ALTER TABLE `wp_rank_math_404_logs` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_rank_math_404_logs` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_rank_math_internal_links` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `url` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL,
  `post_id` bigint(20) unsigned NOT NULL,
  `target_post_id` bigint(20) unsigned NOT NULL,
  `type` varchar(8) COLLATE utf8mb4_unicode_ci NOT NULL,
  PRIMARY KEY (`id`),
  KEY `link_direction` (`post_id`,`type`)
) ENGINE=InnoDB AUTO_INCREMENT=28 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_rank_math_internal_links` WRITE;
/*!40000 ALTER TABLE `wp_rank_math_internal_links` DISABLE KEYS */;
INSERT INTO `wp_rank_math_internal_links` VALUES (25,'https://developer.wordpress.org/themes/basics/the-loop/',13,0,'external'),(26,'https://meyerweb.com/eric/tools/css/reset/',13,0,'external'),(27,'http://wpcode.dev.cc/how-to-build-a-custom-wordpress-theme-from-scratch',6,13,'internal');
/*!40000 ALTER TABLE `wp_rank_math_internal_links` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_rank_math_internal_meta` (
  `object_id` bigint(20) unsigned NOT NULL,
  `internal_link_count` int(10) unsigned DEFAULT '0',
  `external_link_count` int(10) unsigned DEFAULT '0',
  `incoming_link_count` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`object_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_rank_math_internal_meta` WRITE;
/*!40000 ALTER TABLE `wp_rank_math_internal_meta` DISABLE KEYS */;
INSERT INTO `wp_rank_math_internal_meta` VALUES (6,1,0,0),(13,0,2,1),(33,0,0,0),(69,0,0,0),(76,0,0,0),(78,0,0,0),(89,0,0,0),(103,0,0,0);
/*!40000 ALTER TABLE `wp_rank_math_internal_meta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_rank_math_redirections` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `sources` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `url_to` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `header_code` smallint(4) unsigned NOT NULL,
  `hits` bigint(20) unsigned NOT NULL DEFAULT '0',
  `status` varchar(25) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'active',
  `created` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `last_accessed` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `status` (`status`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_rank_math_redirections` WRITE;
/*!40000 ALTER TABLE `wp_rank_math_redirections` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_rank_math_redirections` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_rank_math_redirections_cache` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `from_url` text CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `redirection_id` bigint(20) unsigned NOT NULL,
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `object_type` varchar(10) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'post',
  `is_redirected` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`),
  KEY `redirection_id` (`redirection_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_rank_math_redirections_cache` WRITE;
/*!40000 ALTER TABLE `wp_rank_math_redirections_cache` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_rank_math_redirections_cache` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_relationships` (
  `object_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_taxonomy_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `term_order` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`object_id`,`term_taxonomy_id`),
  KEY `term_taxonomy_id` (`term_taxonomy_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_term_relationships` WRITE;
/*!40000 ALTER TABLE `wp_term_relationships` DISABLE KEYS */;
INSERT INTO `wp_term_relationships` VALUES (6,1,0),(13,3,0),(69,1,0),(89,1,0),(107,2,0),(111,2,0);
/*!40000 ALTER TABLE `wp_term_relationships` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_term_taxonomy` (
  `term_taxonomy_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `taxonomy` varchar(32) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `description` longtext COLLATE utf8mb4_unicode_ci NOT NULL,
  `parent` bigint(20) unsigned NOT NULL DEFAULT '0',
  `count` bigint(20) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_taxonomy_id`),
  UNIQUE KEY `term_id_taxonomy` (`term_id`,`taxonomy`),
  KEY `taxonomy` (`taxonomy`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_term_taxonomy` WRITE;
/*!40000 ALTER TABLE `wp_term_taxonomy` DISABLE KEYS */;
INSERT INTO `wp_term_taxonomy` VALUES (1,1,'category','',0,3),(2,2,'nav_menu','',0,2),(3,3,'category','',0,1),(4,4,'category','',0,0);
/*!40000 ALTER TABLE `wp_term_taxonomy` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_termmeta` (
  `meta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`meta_id`),
  KEY `term_id` (`term_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_termmeta` WRITE;
/*!40000 ALTER TABLE `wp_termmeta` DISABLE KEYS */;
/*!40000 ALTER TABLE `wp_termmeta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_terms` (
  `term_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `slug` varchar(200) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`term_id`),
  KEY `slug` (`slug`(191)),
  KEY `name` (`name`(191))
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_terms` WRITE;
/*!40000 ALTER TABLE `wp_terms` DISABLE KEYS */;
INSERT INTO `wp_terms` VALUES (1,'Uncategorized','uncategorized',0),(2,'Primary','primary',0),(3,'Theming','theming',0),(4,'Code Fundamentals','code-fundamentals',0);
/*!40000 ALTER TABLE `wp_terms` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_usermeta` (
  `umeta_id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) unsigned NOT NULL DEFAULT '0',
  `meta_key` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `meta_value` longtext COLLATE utf8mb4_unicode_ci,
  PRIMARY KEY (`umeta_id`),
  KEY `user_id` (`user_id`),
  KEY `meta_key` (`meta_key`(191))
) ENGINE=InnoDB AUTO_INCREMENT=57 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_usermeta` WRITE;
/*!40000 ALTER TABLE `wp_usermeta` DISABLE KEYS */;
INSERT INTO `wp_usermeta` VALUES (1,1,'nickname','testadmin'),(2,1,'first_name',''),(3,1,'last_name',''),(4,1,'description',''),(5,1,'rich_editing','true'),(6,1,'syntax_highlighting','true'),(7,1,'comment_shortcuts','false'),(8,1,'admin_color','fresh'),(9,1,'use_ssl','0'),(10,1,'show_admin_bar_front','true'),(11,1,'locale',''),(12,1,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(13,1,'wp_user_level','10'),(14,1,'dismissed_wp_pointers',''),(15,1,'show_welcome_panel','0'),(17,1,'wp_dashboard_quick_press_last_post_id','108'),(18,1,'community-events-location','a:1:{s:2:\"ip\";s:9:\"127.0.0.0\";}'),(19,1,'closedpostboxes_dashboard','a:0:{}'),(20,1,'metaboxhidden_dashboard','a:5:{i:0;s:21:\"dashboard_site_health\";i:1;s:19:\"dashboard_right_now\";i:2;s:18:\"dashboard_activity\";i:3;s:21:\"dashboard_quick_press\";i:4;s:17:\"dashboard_primary\";}'),(21,1,'wp_user-settings','mfold=o&libraryContent=browse'),(22,1,'wp_user-settings-time','1608427547'),(23,1,'manageedit-postcolumnshidden','a:3:{i:0;s:0:\"\";i:1;s:15:\"rank_math_title\";i:2;s:21:\"rank_math_description\";}'),(24,1,'manageedit-postcolumnshidden_default','1'),(25,1,'manageedit-pagecolumnshidden','a:3:{i:0;s:0:\"\";i:1;s:15:\"rank_math_title\";i:2;s:21:\"rank_math_description\";}'),(26,1,'manageedit-pagecolumnshidden_default','1'),(27,1,'closedpostboxes_post','a:1:{i:0;s:34:\"rank_math_metabox_link_suggestions\";}'),(28,1,'metaboxhidden_post','a:0:{}'),(29,1,'last_update','1609537466'),(30,2,'nickname','casey.milne'),(31,2,'first_name','Casey'),(32,2,'last_name','Milne'),(33,2,'description',''),(34,2,'rich_editing','true'),(35,2,'syntax_highlighting','true'),(36,2,'comment_shortcuts','false'),(37,2,'admin_color','fresh'),(38,2,'use_ssl','0'),(39,2,'show_admin_bar_front','true'),(40,2,'locale',''),(41,2,'wp_capabilities','a:1:{s:13:\"administrator\";b:1;}'),(42,2,'wp_user_level','10'),(43,2,'last_update','1608483332'),(44,2,'dismissed_wp_pointers',''),(45,2,'session_tokens','a:1:{s:64:\"00f82aea6cfbc4961e468c0de172c6756f4eec7c659298aa31f0029935028de2\";a:4:{s:10:\"expiration\";i:1608651526;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:78:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\";s:5:\"login\";i:1608478726;}}'),(46,2,'wp_dashboard_quick_press_last_post_id','73'),(47,2,'manageedit-postcolumnshidden','a:3:{i:0;s:0:\"\";i:1;s:15:\"rank_math_title\";i:2;s:21:\"rank_math_description\";}'),(48,2,'manageedit-postcolumnshidden_default','1'),(49,2,'manageedit-pagecolumnshidden','a:3:{i:0;s:0:\"\";i:1;s:15:\"rank_math_title\";i:2;s:21:\"rank_math_description\";}'),(50,2,'manageedit-pagecolumnshidden_default','1'),(51,2,'community-events-location','a:1:{s:2:\"ip\";s:9:\"127.0.0.0\";}'),(53,1,'managenav-menuscolumnshidden','a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}'),(54,1,'metaboxhidden_nav-menus','a:1:{i:0;s:12:\"add-post_tag\";}'),(55,1,'nav_menu_recently_edited','2'),(56,1,'session_tokens','a:1:{s:64:\"448fa2181fc8235778fbb47e6e96db420e8482d2f0ccb8b52908b26313453e43\";a:4:{s:10:\"expiration\";i:1609708784;s:2:\"ip\";s:9:\"127.0.0.1\";s:2:\"ua\";s:78:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0) Gecko/20100101 Firefox/84.0\";s:5:\"login\";i:1609535984;}}');
/*!40000 ALTER TABLE `wp_usermeta` ENABLE KEYS */;
UNLOCK TABLES;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `wp_users` (
  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_registered` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT '0',
  `display_name` varchar(250) COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`),
  KEY `user_login_key` (`user_login`),
  KEY `user_nicename` (`user_nicename`),
  KEY `user_email` (`user_email`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

LOCK TABLES `wp_users` WRITE;
/*!40000 ALTER TABLE `wp_users` DISABLE KEYS */;
INSERT INTO `wp_users` VALUES (1,'testadmin','$P$B7LrkZzeGKMr2yKP9fDL043uBfpsmp1','testadmin','pleaseupdate@wpcode.dev.cc','http://wpcode.dev.cc','2020-12-20 00:28:20','',0,'testadmin'),(2,'casey.milne','$P$BahRwnVFewh8qFkiuYZ.xJ7oE2oKAX.','casey-milne','casey.milne@eatbuildplay.com','https://caseymilne.com','2020-12-20 15:38:30','',0,'Casey Milne');
/*!40000 ALTER TABLE `wp_users` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;



/* Duplicator WordPress Timestamp: 2021-01-01 21:55:03*/
/* DUPLICATOR_MYSQLDUMP_EOF */
